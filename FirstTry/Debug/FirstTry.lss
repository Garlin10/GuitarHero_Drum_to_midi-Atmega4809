
FirstTry.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00802800  00001c5f  00001d13  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b8e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d1  00005b8e  00001b8e  00001c42  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000001de  00802814  00802814  00001d27  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00001d27  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d84  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000118  00000000  00000000  00001dc8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005300  00000000  00000000  00001ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000028e7  00000000  00000000  000071e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001187  00000000  00000000  00009ac7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002f8  00000000  00000000  0000ac50  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001a25  00000000  00000000  0000af48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000173d  00000000  00000000  0000c96d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000c8  00000000  00000000  0000e0aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__ctors_end>
       4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      30:	0c 94 74 08 	jmp	0x10e8	; 0x10e8 <__vector_12>
      34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      48:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      58:	0c 94 16 09 	jmp	0x122c	; 0x122c <__vector_22>
      5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      98:	0c 94 70 0a 	jmp	0x14e0	; 0x14e0 <__vector_38>
      9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a0:	2a 02       	muls	r18, r26
      a2:	43 02       	muls	r20, r19
      a4:	70 02       	muls	r23, r16
      a6:	9f 02       	muls	r25, r31
      a8:	cc 02       	muls	r28, r28
      aa:	fb 02       	muls	r31, r27
      ac:	28 03       	fmul	r18, r16
      ae:	57 03       	mulsu	r21, r23
      b0:	84 03       	fmuls	r16, r20
      b2:	b3 03       	fmuls	r19, r19
      b4:	e0 03       	fmuls	r22, r16
      b6:	0f 04       	cpc	r0, r15
      b8:	3c 04       	cpc	r3, r12
      ba:	86 04       	cpc	r8, r6
      bc:	b6 04       	cpc	r11, r6
      be:	e8 04       	cpc	r14, r8
      c0:	18 05       	cpc	r17, r8
      c2:	4a 05       	cpc	r20, r10
      c4:	7a 05       	cpc	r23, r10
      c6:	ac 05       	cpc	r26, r12
      c8:	dc 05       	cpc	r29, r12
      ca:	0e 06       	cpc	r0, r30
      cc:	3e 06       	cpc	r3, r30
      ce:	70 06       	cpc	r7, r16
      d0:	a0 06       	cpc	r10, r16

000000d2 <__ctors_end>:
      d2:	11 24       	eor	r1, r1
      d4:	1f be       	out	0x3f, r1	; 63
      d6:	cf ef       	ldi	r28, 0xFF	; 255
      d8:	cd bf       	out	0x3d, r28	; 61
      da:	df e3       	ldi	r29, 0x3F	; 63
      dc:	de bf       	out	0x3e, r29	; 62

000000de <__do_copy_data>:
      de:	18 e2       	ldi	r17, 0x28	; 40
      e0:	a0 e0       	ldi	r26, 0x00	; 0
      e2:	b8 e2       	ldi	r27, 0x28	; 40
      e4:	ef e5       	ldi	r30, 0x5F	; 95
      e6:	fc e1       	ldi	r31, 0x1C	; 28
      e8:	02 c0       	rjmp	.+4      	; 0xee <__do_copy_data+0x10>
      ea:	05 90       	lpm	r0, Z+
      ec:	0d 92       	st	X+, r0
      ee:	a4 31       	cpi	r26, 0x14	; 20
      f0:	b1 07       	cpc	r27, r17
      f2:	d9 f7       	brne	.-10     	; 0xea <__do_copy_data+0xc>

000000f4 <__do_clear_bss>:
      f4:	29 e2       	ldi	r18, 0x29	; 41
      f6:	a4 e1       	ldi	r26, 0x14	; 20
      f8:	b8 e2       	ldi	r27, 0x28	; 40
      fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
      fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
      fe:	a2 3f       	cpi	r26, 0xF2	; 242
     100:	b2 07       	cpc	r27, r18
     102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
     104:	0e 94 84 07 	call	0xf08	; 0xf08 <main>
     108:	0c 94 c5 0d 	jmp	0x1b8a	; 0x1b8a <_exit>

0000010c <__bad_interrupt>:
     10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <button_down>:
// Return non-zero if a button matching mask is pressed.
//button_mask-ot kivenni
//20ms várok utána váltok csak állapotot
uint8_t button_down(uint8_t button_mask, char port)
{
	uint8_t PORT_INFO  = PORTE.IN;
     110:	90 91 88 04 	lds	r25, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
	switch(port)
     114:	62 34       	cpi	r22, 0x42	; 66
     116:	29 f0       	breq	.+10     	; 0x122 <button_down+0x12>
     118:	65 34       	cpi	r22, 0x45	; 69
     11a:	29 f4       	brne	.+10     	; 0x126 <button_down+0x16>
	{
		case 'E':
		PORT_INFO = PORTE.IN;	
     11c:	90 91 88 04 	lds	r25, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
		break;
     120:	02 c0       	rjmp	.+4      	; 0x126 <button_down+0x16>
		case 'B':
		PORT_INFO = PORTB.IN;
     122:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <__TEXT_REGION_LENGTH__+0x7f4428>
		break;
	}
    
	PORT_INFO &= (button_mask);
     126:	89 23       	and	r24, r25
	if(PORT_INFO)
     128:	11 f0       	breq	.+4      	; 0x12e <button_down+0x1e>
	{
		return 0;
     12a:	80 e0       	ldi	r24, 0x00	; 0
     12c:	08 95       	ret
	}
	else
	{
		return 1;
     12e:	81 e0       	ldi	r24, 0x01	; 1
	}
	
}
     130:	08 95       	ret

00000132 <debounce_init>:

void debounce_init(void)
{	
    // Enable pullup on buttons
	//Bal
	E2_PORT |= (BUTTON1_MASK);
     132:	e0 e8       	ldi	r30, 0x80	; 128
     134:	f4 e0       	ldi	r31, 0x04	; 4
     136:	80 85       	ldd	r24, Z+8	; 0x08
     138:	84 60       	ori	r24, 0x04	; 4
     13a:	80 87       	std	Z+8, r24	; 0x08
	E1_PORT |= (BUTTON2_MASK);
     13c:	80 85       	ldd	r24, Z+8	; 0x08
     13e:	82 60       	ori	r24, 0x02	; 2
     140:	80 87       	std	Z+8, r24	; 0x08
	E0_PORT	|= (BUTTON3_MASK);
     142:	80 85       	ldd	r24, Z+8	; 0x08
     144:	81 60       	ori	r24, 0x01	; 1
     146:	80 87       	std	Z+8, r24	; 0x08
	
    B1_PORT |= (BUTTON4_MASK);
     148:	a0 e2       	ldi	r26, 0x20	; 32
     14a:	b4 e0       	ldi	r27, 0x04	; 4
     14c:	18 96       	adiw	r26, 0x08	; 8
     14e:	8c 91       	ld	r24, X
     150:	18 97       	sbiw	r26, 0x08	; 8
     152:	82 60       	ori	r24, 0x02	; 2
     154:	18 96       	adiw	r26, 0x08	; 8
     156:	8c 93       	st	X, r24
     158:	18 97       	sbiw	r26, 0x08	; 8
	
	PORTE.PIN2CTRL = PORT_PULLUPEN_bm;
     15a:	88 e0       	ldi	r24, 0x08	; 8
     15c:	82 8b       	std	Z+18, r24	; 0x12
	PORTE.PIN1CTRL = PORT_PULLUPEN_bm;
     15e:	81 8b       	std	Z+17, r24	; 0x11
	PORTE.PIN0CTRL = PORT_PULLUPEN_bm;
     160:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_PULLUPEN_bm;
     162:	51 96       	adiw	r26, 0x11	; 17
     164:	8c 93       	st	X, r24
     166:	08 95       	ret

00000168 <DATA_OUT>:
#define RS 0				/* .kbv Define Register Select pin */
#define EN 5 				/* .kbv Define Enable signal pin */

void DATA_OUT(unsigned char CMND)
{
	D4_PORT &= ~(1<<D4_PIN);
     168:	e0 e4       	ldi	r30, 0x40	; 64
     16a:	f4 e0       	ldi	r31, 0x04	; 4
     16c:	94 81       	ldd	r25, Z+4	; 0x04
     16e:	9f 7b       	andi	r25, 0xBF	; 191
     170:	94 83       	std	Z+4, r25	; 0x04
	D5_PORT &= ~(1<<D5_PIN);
     172:	e0 e2       	ldi	r30, 0x20	; 32
     174:	f4 e0       	ldi	r31, 0x04	; 4
     176:	94 81       	ldd	r25, Z+4	; 0x04
     178:	9b 7f       	andi	r25, 0xFB	; 251
     17a:	94 83       	std	Z+4, r25	; 0x04
	D6_PORT &= ~(1<<D6_PIN);
     17c:	e0 ea       	ldi	r30, 0xA0	; 160
     17e:	f4 e0       	ldi	r31, 0x04	; 4
     180:	94 81       	ldd	r25, Z+4	; 0x04
     182:	9f 7e       	andi	r25, 0xEF	; 239
     184:	94 83       	std	Z+4, r25	; 0x04
	D7_PORT &= ~(1<<D7_PIN);
     186:	e0 e0       	ldi	r30, 0x00	; 0
     188:	f4 e0       	ldi	r31, 0x04	; 4
     18a:	94 81       	ldd	r25, Z+4	; 0x04
     18c:	9d 7f       	andi	r25, 0xFD	; 253
     18e:	94 83       	std	Z+4, r25	; 0x04
	if(CMND & (1<<4))
     190:	84 ff       	sbrs	r24, 4
     192:	05 c0       	rjmp	.+10     	; 0x19e <DATA_OUT+0x36>
	{
		D4_PORT |= (1<<D4_PIN);
     194:	e0 e4       	ldi	r30, 0x40	; 64
     196:	f4 e0       	ldi	r31, 0x04	; 4
     198:	94 81       	ldd	r25, Z+4	; 0x04
     19a:	90 64       	ori	r25, 0x40	; 64
     19c:	94 83       	std	Z+4, r25	; 0x04
	}
	if(CMND & (1<<5))
     19e:	85 ff       	sbrs	r24, 5
     1a0:	05 c0       	rjmp	.+10     	; 0x1ac <DATA_OUT+0x44>
	{
		D5_PORT |= (1<<D5_PIN);
     1a2:	e0 e2       	ldi	r30, 0x20	; 32
     1a4:	f4 e0       	ldi	r31, 0x04	; 4
     1a6:	94 81       	ldd	r25, Z+4	; 0x04
     1a8:	94 60       	ori	r25, 0x04	; 4
     1aa:	94 83       	std	Z+4, r25	; 0x04
	}
	if(CMND & (1<<6))
     1ac:	86 ff       	sbrs	r24, 6
     1ae:	05 c0       	rjmp	.+10     	; 0x1ba <DATA_OUT+0x52>
	{
		D6_PORT |= (1<<D6_PIN);
     1b0:	e0 ea       	ldi	r30, 0xA0	; 160
     1b2:	f4 e0       	ldi	r31, 0x04	; 4
     1b4:	94 81       	ldd	r25, Z+4	; 0x04
     1b6:	90 61       	ori	r25, 0x10	; 16
     1b8:	94 83       	std	Z+4, r25	; 0x04
	}
	if(CMND & (1<<7))
     1ba:	88 23       	and	r24, r24
     1bc:	2c f4       	brge	.+10     	; 0x1c8 <DATA_OUT+0x60>
	{
		D7_PORT |= (1<<D7_PIN);
     1be:	e0 e0       	ldi	r30, 0x00	; 0
     1c0:	f4 e0       	ldi	r31, 0x04	; 4
     1c2:	84 81       	ldd	r24, Z+4	; 0x04
     1c4:	82 60       	ori	r24, 0x02	; 2
     1c6:	84 83       	std	Z+4, r24	; 0x04
     1c8:	08 95       	ret

000001ca <LCD_Command>:
	}
}

void LCD_Command( unsigned char cmnd )
{ 
     1ca:	1f 93       	push	r17
     1cc:	cf 93       	push	r28
     1ce:	df 93       	push	r29
     1d0:	18 2f       	mov	r17, r24
	DATA_OUT(cmnd & 0xF0);	/* sending upper nibble */
     1d2:	80 7f       	andi	r24, 0xF0	; 240
     1d4:	0e 94 b4 00 	call	0x168	; 0x168 <DATA_OUT>
	RS_PORT &= ~ (1<<RS);		/* RS=0, command reg. */
     1d8:	e0 e0       	ldi	r30, 0x00	; 0
     1da:	f4 e0       	ldi	r31, 0x04	; 4
     1dc:	84 81       	ldd	r24, Z+4	; 0x04
     1de:	8e 7f       	andi	r24, 0xFE	; 254
     1e0:	84 83       	std	Z+4, r24	; 0x04
	EN_PORT |= (1<<EN);		/* Enable pulse */
     1e2:	c0 ea       	ldi	r28, 0xA0	; 160
     1e4:	d4 e0       	ldi	r29, 0x04	; 4
     1e6:	8c 81       	ldd	r24, Y+4	; 0x04
     1e8:	80 62       	ori	r24, 0x20	; 32
     1ea:	8c 83       	std	Y+4, r24	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1ec:	86 e0       	ldi	r24, 0x06	; 6
     1ee:	8a 95       	dec	r24
     1f0:	f1 f7       	brne	.-4      	; 0x1ee <LCD_Command+0x24>
     1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <LCD_Command+0x2a>
	_delay_us(1);
	EN_PORT &= ~ (1<<EN);
     1f4:	8c 81       	ldd	r24, Y+4	; 0x04
     1f6:	8f 7d       	andi	r24, 0xDF	; 223
     1f8:	8c 83       	std	Y+4, r24	; 0x04
     1fa:	87 ee       	ldi	r24, 0xE7	; 231
     1fc:	93 e0       	ldi	r25, 0x03	; 3
     1fe:	01 97       	sbiw	r24, 0x01	; 1
     200:	f1 f7       	brne	.-4      	; 0x1fe <LCD_Command+0x34>
     202:	00 c0       	rjmp	.+0      	; 0x204 <LCD_Command+0x3a>
     204:	00 00       	nop

	_delay_us(200);

	DATA_OUT(cmnd << 4); 	/* sending upper nibble */
     206:	81 2f       	mov	r24, r17
     208:	82 95       	swap	r24
     20a:	80 7f       	andi	r24, 0xF0	; 240
     20c:	0e 94 b4 00 	call	0x168	; 0x168 <DATA_OUT>
	EN_PORT |= (1<<EN);
     210:	8c 81       	ldd	r24, Y+4	; 0x04
     212:	80 62       	ori	r24, 0x20	; 32
     214:	8c 83       	std	Y+4, r24	; 0x04
     216:	96 e0       	ldi	r25, 0x06	; 6
     218:	9a 95       	dec	r25
     21a:	f1 f7       	brne	.-4      	; 0x218 <LCD_Command+0x4e>
     21c:	00 c0       	rjmp	.+0      	; 0x21e <LCD_Command+0x54>
	_delay_us(1);
	EN_PORT &= ~ (1<<EN);
     21e:	8c 81       	ldd	r24, Y+4	; 0x04
     220:	8f 7d       	andi	r24, 0xDF	; 223
     222:	8c 83       	std	Y+4, r24	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     224:	8f e0       	ldi	r24, 0x0F	; 15
     226:	97 e2       	ldi	r25, 0x27	; 39
     228:	01 97       	sbiw	r24, 0x01	; 1
     22a:	f1 f7       	brne	.-4      	; 0x228 <LCD_Command+0x5e>
     22c:	00 c0       	rjmp	.+0      	; 0x22e <LCD_Command+0x64>
     22e:	00 00       	nop
	_delay_ms(2);
}
     230:	df 91       	pop	r29
     232:	cf 91       	pop	r28
     234:	1f 91       	pop	r17
     236:	08 95       	ret

00000238 <LCD_Char>:


void LCD_Char( unsigned char data )
{
     238:	1f 93       	push	r17
     23a:	cf 93       	push	r28
     23c:	df 93       	push	r29
     23e:	18 2f       	mov	r17, r24
	DATA_OUT(data & 0xF0); /* sending upper nibble */
     240:	80 7f       	andi	r24, 0xF0	; 240
     242:	0e 94 b4 00 	call	0x168	; 0x168 <DATA_OUT>
	RS_PORT |= (1<<RS);		/* RS=1, data reg. */
     246:	e0 e0       	ldi	r30, 0x00	; 0
     248:	f4 e0       	ldi	r31, 0x04	; 4
     24a:	84 81       	ldd	r24, Z+4	; 0x04
     24c:	81 60       	ori	r24, 0x01	; 1
     24e:	84 83       	std	Z+4, r24	; 0x04
	EN_PORT|= (1<<EN);
     250:	c0 ea       	ldi	r28, 0xA0	; 160
     252:	d4 e0       	ldi	r29, 0x04	; 4
     254:	8c 81       	ldd	r24, Y+4	; 0x04
     256:	80 62       	ori	r24, 0x20	; 32
     258:	8c 83       	std	Y+4, r24	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     25a:	86 e0       	ldi	r24, 0x06	; 6
     25c:	8a 95       	dec	r24
     25e:	f1 f7       	brne	.-4      	; 0x25c <LCD_Char+0x24>
     260:	00 c0       	rjmp	.+0      	; 0x262 <LCD_Char+0x2a>
	_delay_us(1);
	EN_PORT &= ~ (1<<EN);
     262:	8c 81       	ldd	r24, Y+4	; 0x04
     264:	8f 7d       	andi	r24, 0xDF	; 223
     266:	8c 83       	std	Y+4, r24	; 0x04
     268:	87 ee       	ldi	r24, 0xE7	; 231
     26a:	93 e0       	ldi	r25, 0x03	; 3
     26c:	01 97       	sbiw	r24, 0x01	; 1
     26e:	f1 f7       	brne	.-4      	; 0x26c <LCD_Char+0x34>
     270:	00 c0       	rjmp	.+0      	; 0x272 <LCD_Char+0x3a>
     272:	00 00       	nop

	_delay_us(200);

	DATA_OUT(data << 4); /* sending lower nibble */
     274:	81 2f       	mov	r24, r17
     276:	82 95       	swap	r24
     278:	80 7f       	andi	r24, 0xF0	; 240
     27a:	0e 94 b4 00 	call	0x168	; 0x168 <DATA_OUT>
	EN_PORT |= (1<<EN);
     27e:	8c 81       	ldd	r24, Y+4	; 0x04
     280:	80 62       	ori	r24, 0x20	; 32
     282:	8c 83       	std	Y+4, r24	; 0x04
     284:	96 e0       	ldi	r25, 0x06	; 6
     286:	9a 95       	dec	r25
     288:	f1 f7       	brne	.-4      	; 0x286 <LCD_Char+0x4e>
     28a:	00 c0       	rjmp	.+0      	; 0x28c <LCD_Char+0x54>
	_delay_us(1);
	EN_PORT &= ~ (1<<EN);
     28c:	8c 81       	ldd	r24, Y+4	; 0x04
     28e:	8f 7d       	andi	r24, 0xDF	; 223
     290:	8c 83       	std	Y+4, r24	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     292:	8f e0       	ldi	r24, 0x0F	; 15
     294:	97 e2       	ldi	r25, 0x27	; 39
     296:	01 97       	sbiw	r24, 0x01	; 1
     298:	f1 f7       	brne	.-4      	; 0x296 <LCD_Char+0x5e>
     29a:	00 c0       	rjmp	.+0      	; 0x29c <LCD_Char+0x64>
     29c:	00 00       	nop
	_delay_ms(2);
}
     29e:	df 91       	pop	r29
     2a0:	cf 91       	pop	r28
     2a2:	1f 91       	pop	r17
     2a4:	08 95       	ret

000002a6 <LCD_Init>:

void LCD_Init (void)			/* LCD Initialize function */
{
     2a6:	cf 93       	push	r28
     2a8:	df 93       	push	r29
	
	RS_DIR |= (1<<RS);
     2aa:	e0 e0       	ldi	r30, 0x00	; 0
     2ac:	f4 e0       	ldi	r31, 0x04	; 4
     2ae:	80 81       	ld	r24, Z
     2b0:	81 60       	ori	r24, 0x01	; 1
     2b2:	80 83       	st	Z, r24
	EN_DIR |= (1 << EN);			/* Make LCD port direction as o/p */
     2b4:	a0 ea       	ldi	r26, 0xA0	; 160
     2b6:	b4 e0       	ldi	r27, 0x04	; 4
     2b8:	8c 91       	ld	r24, X
     2ba:	80 62       	ori	r24, 0x20	; 32
     2bc:	8c 93       	st	X, r24
	D4_DIR |= (1 << D4_PIN);
     2be:	80 e4       	ldi	r24, 0x40	; 64
     2c0:	94 e0       	ldi	r25, 0x04	; 4
     2c2:	ec 01       	movw	r28, r24
     2c4:	28 81       	ld	r18, Y
     2c6:	20 64       	ori	r18, 0x40	; 64
     2c8:	28 83       	st	Y, r18
	D5_DIR |= (1 << D5_PIN);
     2ca:	40 e2       	ldi	r20, 0x20	; 32
     2cc:	54 e0       	ldi	r21, 0x04	; 4
     2ce:	ea 01       	movw	r28, r20
     2d0:	28 81       	ld	r18, Y
     2d2:	24 60       	ori	r18, 0x04	; 4
     2d4:	28 83       	st	Y, r18
	D6_DIR |= (1 << D6_PIN);
     2d6:	2c 91       	ld	r18, X
     2d8:	20 61       	ori	r18, 0x10	; 16
     2da:	2c 93       	st	X, r18
	D7_DIR |= (1 << D7_PIN);
     2dc:	20 81       	ld	r18, Z
     2de:	22 60       	ori	r18, 0x02	; 2
     2e0:	20 83       	st	Z, r18
	RS_PORT &= ~(1<<RS);
     2e2:	24 81       	ldd	r18, Z+4	; 0x04
     2e4:	2e 7f       	andi	r18, 0xFE	; 254
     2e6:	24 83       	std	Z+4, r18	; 0x04
	EN_PORT &= ~(1<<EN);
     2e8:	14 96       	adiw	r26, 0x04	; 4
     2ea:	2c 91       	ld	r18, X
     2ec:	14 97       	sbiw	r26, 0x04	; 4
     2ee:	2f 7d       	andi	r18, 0xDF	; 223
     2f0:	14 96       	adiw	r26, 0x04	; 4
     2f2:	2c 93       	st	X, r18
     2f4:	14 97       	sbiw	r26, 0x04	; 4
	D4_PORT &= ~(1 << D4_PIN);
     2f6:	ec 01       	movw	r28, r24
     2f8:	2c 81       	ldd	r18, Y+4	; 0x04
     2fa:	2f 7b       	andi	r18, 0xBF	; 191
     2fc:	2c 83       	std	Y+4, r18	; 0x04
	D5_PORT &= ~(1 << D5_PIN);
     2fe:	ea 01       	movw	r28, r20
     300:	8c 81       	ldd	r24, Y+4	; 0x04
     302:	8b 7f       	andi	r24, 0xFB	; 251
     304:	8c 83       	std	Y+4, r24	; 0x04
	D6_PORT &= ~(1 << D6_PIN);
     306:	14 96       	adiw	r26, 0x04	; 4
     308:	8c 91       	ld	r24, X
     30a:	14 97       	sbiw	r26, 0x04	; 4
     30c:	8f 7e       	andi	r24, 0xEF	; 239
     30e:	14 96       	adiw	r26, 0x04	; 4
     310:	8c 93       	st	X, r24
	D7_PORT &= ~(1 << D7_PIN);
     312:	84 81       	ldd	r24, Z+4	; 0x04
     314:	8d 7f       	andi	r24, 0xFD	; 253
     316:	84 83       	std	Z+4, r24	; 0x04
     318:	df eb       	ldi	r29, 0xBF	; 191
     31a:	24 ed       	ldi	r18, 0xD4	; 212
     31c:	81 e0       	ldi	r24, 0x01	; 1
     31e:	d1 50       	subi	r29, 0x01	; 1
     320:	20 40       	sbci	r18, 0x00	; 0
     322:	80 40       	sbci	r24, 0x00	; 0
     324:	e1 f7       	brne	.-8      	; 0x31e <LCD_Init+0x78>
     326:	00 c0       	rjmp	.+0      	; 0x328 <LCD_Init+0x82>
     328:	00 00       	nop
	_delay_ms(30);			/* .kbv 30ms is safer with Curiosity voltage control */
	LCD_Command(0x33);		/* .kbv sets regular 8-bit mode */
     32a:	83 e3       	ldi	r24, 0x33	; 51
     32c:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_Command>
     330:	c7 ea       	ldi	r28, 0xA7	; 167
     332:	d1 e6       	ldi	r29, 0x61	; 97
     334:	21 97       	sbiw	r28, 0x01	; 1
     336:	f1 f7       	brne	.-4      	; 0x334 <LCD_Init+0x8e>
     338:	00 c0       	rjmp	.+0      	; 0x33a <LCD_Init+0x94>
     33a:	00 00       	nop
	_delay_ms(5);           /* .kbv needs delay */
	LCD_Command(0x32);		/* .kbv 4 bit initialization of LCD  */
     33c:	82 e3       	ldi	r24, 0x32	; 50
     33e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_Command>
	LCD_Command(0x28);              /* 2 line, 5*7 matrix in 4-bit mode */
     342:	88 e2       	ldi	r24, 0x28	; 40
     344:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_Command>
	LCD_Command(0x0c);              /* Display on cursor off*/
     348:	8c e0       	ldi	r24, 0x0C	; 12
     34a:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_Command>
	LCD_Command(0x06);              /* Increment cursor (shift cursor to right)*/
     34e:	86 e0       	ldi	r24, 0x06	; 6
     350:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_Command>
	LCD_Command(0x01);              /* Clear display screen*/
     354:	81 e0       	ldi	r24, 0x01	; 1
     356:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_Command>
     35a:	8f e0       	ldi	r24, 0x0F	; 15
     35c:	97 e2       	ldi	r25, 0x27	; 39
     35e:	01 97       	sbiw	r24, 0x01	; 1
     360:	f1 f7       	brne	.-4      	; 0x35e <LCD_Init+0xb8>
     362:	00 c0       	rjmp	.+0      	; 0x364 <LCD_Init+0xbe>
     364:	00 00       	nop
	_delay_ms(2);
}
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	08 95       	ret

0000036c <LCD_String>:


void LCD_String (char *str)		/* Send string to LCD function */
{
     36c:	0f 93       	push	r16
     36e:	1f 93       	push	r17
     370:	cf 93       	push	r28
     372:	df 93       	push	r29
     374:	8c 01       	movw	r16, r24
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
     376:	c0 e0       	ldi	r28, 0x00	; 0
     378:	d0 e0       	ldi	r29, 0x00	; 0
     37a:	03 c0       	rjmp	.+6      	; 0x382 <LCD_String+0x16>
	{
		LCD_Char (str[i]);
     37c:	0e 94 1c 01 	call	0x238	; 0x238 <LCD_Char>


void LCD_String (char *str)		/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
     380:	21 96       	adiw	r28, 0x01	; 1
     382:	f8 01       	movw	r30, r16
     384:	ec 0f       	add	r30, r28
     386:	fd 1f       	adc	r31, r29
     388:	80 81       	ld	r24, Z
     38a:	81 11       	cpse	r24, r1
     38c:	f7 cf       	rjmp	.-18     	; 0x37c <LCD_String+0x10>
	{
		LCD_Char (str[i]);
	}
}
     38e:	df 91       	pop	r29
     390:	cf 91       	pop	r28
     392:	1f 91       	pop	r17
     394:	0f 91       	pop	r16
     396:	08 95       	ret

00000398 <LCD_String_xy>:

void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD with xy position */
{
     398:	cf 93       	push	r28
     39a:	df 93       	push	r29
     39c:	ea 01       	movw	r28, r20
	if (row == 0 && pos<16)
     39e:	81 11       	cpse	r24, r1
     3a0:	08 c0       	rjmp	.+16     	; 0x3b2 <LCD_String_xy+0x1a>
     3a2:	60 31       	cpi	r22, 0x10	; 16
     3a4:	30 f4       	brcc	.+12     	; 0x3b2 <LCD_String_xy+0x1a>
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
     3a6:	86 2f       	mov	r24, r22
     3a8:	8f 70       	andi	r24, 0x0F	; 15
     3aa:	80 68       	ori	r24, 0x80	; 128
     3ac:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_Command>
     3b0:	09 c0       	rjmp	.+18     	; 0x3c4 <LCD_String_xy+0x2c>
	else if (row == 1 && pos<16)
     3b2:	81 30       	cpi	r24, 0x01	; 1
     3b4:	39 f4       	brne	.+14     	; 0x3c4 <LCD_String_xy+0x2c>
     3b6:	60 31       	cpi	r22, 0x10	; 16
     3b8:	28 f4       	brcc	.+10     	; 0x3c4 <LCD_String_xy+0x2c>
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
     3ba:	86 2f       	mov	r24, r22
     3bc:	8f 70       	andi	r24, 0x0F	; 15
     3be:	80 6c       	ori	r24, 0xC0	; 192
     3c0:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_Command>
	LCD_String(str);		/* Call LCD string function */
     3c4:	ce 01       	movw	r24, r28
     3c6:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_String>
}
     3ca:	df 91       	pop	r29
     3cc:	cf 91       	pop	r28
     3ce:	08 95       	ret

000003d0 <note_value_changer>:
volatile Button_Machine Button_Machines[4] = {Released,Released,Released,Released};
volatile uint8_t BUTTON_FLAGS[4] = {0,0,0,0};
volatile int Button_Timers[4] = {0,0,0,0};
	void note_value_changer(uint8_t pokemon, uint8_t plusz_minus)
	{
		if(plusz_minus)
     3d0:	66 23       	and	r22, r22
     3d2:	41 f0       	breq	.+16     	; 0x3e4 <note_value_changer+0x14>
		{
			note_C[pokemon]++;
     3d4:	e8 2f       	mov	r30, r24
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	e0 50       	subi	r30, 0x00	; 0
     3da:	f8 4d       	sbci	r31, 0xD8	; 216
     3dc:	80 81       	ld	r24, Z
     3de:	8f 5f       	subi	r24, 0xFF	; 255
     3e0:	80 83       	st	Z, r24
     3e2:	08 95       	ret
		}
		else
		{
			if (0>note_C[pokemon])
     3e4:	e8 2f       	mov	r30, r24
     3e6:	f0 e0       	ldi	r31, 0x00	; 0
     3e8:	e0 50       	subi	r30, 0x00	; 0
     3ea:	f8 4d       	sbci	r31, 0xD8	; 216
     3ec:	80 81       	ld	r24, Z
			{
				note_C[pokemon]=0;
			}
			else
			{
				note_C[pokemon]--;
     3ee:	80 81       	ld	r24, Z
     3f0:	81 50       	subi	r24, 0x01	; 1
     3f2:	80 83       	st	Z, r24
     3f4:	08 95       	ret

000003f6 <velocity_value_changer>:
			
		}
	}
	void velocity_value_changer(uint8_t pokemon, uint8_t plusz_minus)
	{
		if(plusz_minus)
     3f6:	66 23       	and	r22, r22
     3f8:	61 f0       	breq	.+24     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
		{
			min_velocity[pokemon]++;
     3fa:	e8 2f       	mov	r30, r24
     3fc:	f0 e0       	ldi	r31, 0x00	; 0
     3fe:	ee 0f       	add	r30, r30
     400:	ff 1f       	adc	r31, r31
     402:	e8 5f       	subi	r30, 0xF8	; 248
     404:	f7 4d       	sbci	r31, 0xD7	; 215
     406:	80 81       	ld	r24, Z
     408:	91 81       	ldd	r25, Z+1	; 0x01
     40a:	01 96       	adiw	r24, 0x01	; 1
     40c:	80 83       	st	Z, r24
     40e:	91 83       	std	Z+1, r25	; 0x01
     410:	08 95       	ret
		}
		else
		{
			if (0>min_velocity[pokemon])
     412:	e8 2f       	mov	r30, r24
     414:	f0 e0       	ldi	r31, 0x00	; 0
     416:	ee 0f       	add	r30, r30
     418:	ff 1f       	adc	r31, r31
     41a:	e8 5f       	subi	r30, 0xF8	; 248
     41c:	f7 4d       	sbci	r31, 0xD7	; 215
     41e:	80 81       	ld	r24, Z
     420:	91 81       	ldd	r25, Z+1	; 0x01
			{
				min_velocity[pokemon]=0;
			}
			else
			{
				min_velocity[pokemon]--;
     422:	80 81       	ld	r24, Z
     424:	91 81       	ldd	r25, Z+1	; 0x01
     426:	01 97       	sbiw	r24, 0x01	; 1
     428:	80 83       	st	Z, r24
     42a:	91 83       	std	Z+1, r25	; 0x01
     42c:	08 95       	ret

0000042e <LCD_menu>:
			}
			
		}
	}
	void LCD_menu(uint8_t state)
	{
     42e:	0f 93       	push	r16
     430:	1f 93       	push	r17
     432:	cf 93       	push	r28
     434:	df 93       	push	r29
     436:	cd b7       	in	r28, 0x3d	; 61
     438:	de b7       	in	r29, 0x3e	; 62
     43a:	d4 50       	subi	r29, 0x04	; 4
     43c:	cd bf       	out	0x3d, r28	; 61
     43e:	de bf       	out	0x3e, r29	; 62
		char buf[ 1024];
		switch (state)
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	8d 30       	cpi	r24, 0x0D	; 13
     444:	91 05       	cpc	r25, r1
     446:	08 f0       	brcs	.+2      	; 0x44a <LCD_menu+0x1c>
     448:	45 c2       	rjmp	.+1162   	; 0x8d4 <LCD_menu+0x4a6>
     44a:	fc 01       	movw	r30, r24
     44c:	e0 5b       	subi	r30, 0xB0	; 176
     44e:	ff 4f       	sbci	r31, 0xFF	; 255
     450:	0c 94 c1 0a 	jmp	0x1582	; 0x1582 <__tablejump2__>
		{
			case 0:
			LCD_Command(0x01);
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_Command>
			LCD_String_xy (0, 2, "Guitar Hero");
     45a:	4e e8       	ldi	r20, 0x8E	; 142
     45c:	5b e5       	ldi	r21, 0x5B	; 91
     45e:	62 e0       	ldi	r22, 0x02	; 2
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
			LCD_String_xy (1, 3, "Let's Rock");
     466:	4a e9       	ldi	r20, 0x9A	; 154
     468:	5b e5       	ldi	r21, 0x5B	; 91
     46a:	63 e0       	ldi	r22, 0x03	; 3
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
     472:	2f e7       	ldi	r18, 0x7F	; 127
     474:	8a e1       	ldi	r24, 0x1A	; 26
     476:	96 e0       	ldi	r25, 0x06	; 6
     478:	21 50       	subi	r18, 0x01	; 1
     47a:	80 40       	sbci	r24, 0x00	; 0
     47c:	90 40       	sbci	r25, 0x00	; 0
     47e:	e1 f7       	brne	.-8      	; 0x478 <LCD_menu+0x4a>
     480:	00 c0       	rjmp	.+0      	; 0x482 <LCD_menu+0x54>
     482:	00 00       	nop
     484:	27 c2       	rjmp	.+1102   	; 0x8d4 <LCD_menu+0x4a6>

			_delay_ms(100);
			break;
			case 1:
			LCD_Command(0x01);
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_Command>
			LCD_String_xy (0, 4, "Kick Note");
     48c:	45 ea       	ldi	r20, 0xA5	; 165
     48e:	5b e5       	ldi	r21, 0x5B	; 91
     490:	64 e0       	ldi	r22, 0x04	; 4
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
			sprintf( buf, "%d", note_C[0]);
     498:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__data_start>
     49c:	1f 92       	push	r1
     49e:	8f 93       	push	r24
     4a0:	8f ea       	ldi	r24, 0xAF	; 175
     4a2:	9b e5       	ldi	r25, 0x5B	; 91
     4a4:	9f 93       	push	r25
     4a6:	8f 93       	push	r24
     4a8:	8e 01       	movw	r16, r28
     4aa:	0f 5f       	subi	r16, 0xFF	; 255
     4ac:	1f 4f       	sbci	r17, 0xFF	; 255
     4ae:	1f 93       	push	r17
     4b0:	0f 93       	push	r16
     4b2:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <sprintf>
			LCD_String_xy (1, 8, buf);
     4b6:	a8 01       	movw	r20, r16
     4b8:	68 e0       	ldi	r22, 0x08	; 8
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
     4c0:	2f e7       	ldi	r18, 0x7F	; 127
     4c2:	8a e1       	ldi	r24, 0x1A	; 26
     4c4:	96 e0       	ldi	r25, 0x06	; 6
     4c6:	21 50       	subi	r18, 0x01	; 1
     4c8:	80 40       	sbci	r24, 0x00	; 0
     4ca:	90 40       	sbci	r25, 0x00	; 0
     4cc:	e1 f7       	brne	.-8      	; 0x4c6 <LCD_menu+0x98>
     4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <LCD_menu+0xa2>
     4d0:	00 00       	nop
     4d2:	0f 90       	pop	r0
     4d4:	0f 90       	pop	r0
     4d6:	0f 90       	pop	r0
     4d8:	0f 90       	pop	r0
     4da:	0f 90       	pop	r0
     4dc:	0f 90       	pop	r0
     4de:	fa c1       	rjmp	.+1012   	; 0x8d4 <LCD_menu+0x4a6>

			_delay_ms(100);
			break;
			case 2:
			LCD_Command(0x01);
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_Command>
			LCD_String_xy (0, 0, "Kick Velocity");
     4e6:	42 eb       	ldi	r20, 0xB2	; 178
     4e8:	5b e5       	ldi	r21, 0x5B	; 91
     4ea:	60 e0       	ldi	r22, 0x00	; 0
     4ec:	80 e0       	ldi	r24, 0x00	; 0
     4ee:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
			
			sprintf( buf, "%d", min_velocity[0]);
     4f2:	80 91 08 28 	lds	r24, 0x2808	; 0x802808 <min_velocity>
     4f6:	90 91 09 28 	lds	r25, 0x2809	; 0x802809 <min_velocity+0x1>
     4fa:	9f 93       	push	r25
     4fc:	8f 93       	push	r24
     4fe:	8f ea       	ldi	r24, 0xAF	; 175
     500:	9b e5       	ldi	r25, 0x5B	; 91
     502:	9f 93       	push	r25
     504:	8f 93       	push	r24
     506:	8e 01       	movw	r16, r28
     508:	0f 5f       	subi	r16, 0xFF	; 255
     50a:	1f 4f       	sbci	r17, 0xFF	; 255
     50c:	1f 93       	push	r17
     50e:	0f 93       	push	r16
     510:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <sprintf>
			LCD_String_xy (1, 8, buf);
     514:	a8 01       	movw	r20, r16
     516:	68 e0       	ldi	r22, 0x08	; 8
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
     51e:	2f e7       	ldi	r18, 0x7F	; 127
     520:	8a e1       	ldi	r24, 0x1A	; 26
     522:	96 e0       	ldi	r25, 0x06	; 6
     524:	21 50       	subi	r18, 0x01	; 1
     526:	80 40       	sbci	r24, 0x00	; 0
     528:	90 40       	sbci	r25, 0x00	; 0
     52a:	e1 f7       	brne	.-8      	; 0x524 <LCD_menu+0xf6>
     52c:	00 c0       	rjmp	.+0      	; 0x52e <LCD_menu+0x100>
     52e:	00 00       	nop
     530:	0f 90       	pop	r0
     532:	0f 90       	pop	r0
     534:	0f 90       	pop	r0
     536:	0f 90       	pop	r0
     538:	0f 90       	pop	r0
     53a:	0f 90       	pop	r0
     53c:	cb c1       	rjmp	.+918    	; 0x8d4 <LCD_menu+0x4a6>

			_delay_ms(100);
			break;
			case 3:
			LCD_Command(0x01);
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_Command>
			LCD_String_xy (0, 4, "Green Note");
     544:	40 ec       	ldi	r20, 0xC0	; 192
     546:	5b e5       	ldi	r21, 0x5B	; 91
     548:	64 e0       	ldi	r22, 0x04	; 4
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
			sprintf( buf, "%d", note_C[1]);
     550:	80 91 01 28 	lds	r24, 0x2801	; 0x802801 <__data_start+0x1>
     554:	1f 92       	push	r1
     556:	8f 93       	push	r24
     558:	8f ea       	ldi	r24, 0xAF	; 175
     55a:	9b e5       	ldi	r25, 0x5B	; 91
     55c:	9f 93       	push	r25
     55e:	8f 93       	push	r24
     560:	8e 01       	movw	r16, r28
     562:	0f 5f       	subi	r16, 0xFF	; 255
     564:	1f 4f       	sbci	r17, 0xFF	; 255
     566:	1f 93       	push	r17
     568:	0f 93       	push	r16
     56a:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <sprintf>
			LCD_String_xy (1, 8, buf);
     56e:	a8 01       	movw	r20, r16
     570:	68 e0       	ldi	r22, 0x08	; 8
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
     578:	2f e7       	ldi	r18, 0x7F	; 127
     57a:	8a e1       	ldi	r24, 0x1A	; 26
     57c:	96 e0       	ldi	r25, 0x06	; 6
     57e:	21 50       	subi	r18, 0x01	; 1
     580:	80 40       	sbci	r24, 0x00	; 0
     582:	90 40       	sbci	r25, 0x00	; 0
     584:	e1 f7       	brne	.-8      	; 0x57e <LCD_menu+0x150>
     586:	00 c0       	rjmp	.+0      	; 0x588 <LCD_menu+0x15a>
     588:	00 00       	nop
     58a:	0f 90       	pop	r0
     58c:	0f 90       	pop	r0
     58e:	0f 90       	pop	r0
     590:	0f 90       	pop	r0
     592:	0f 90       	pop	r0
     594:	0f 90       	pop	r0
     596:	9e c1       	rjmp	.+828    	; 0x8d4 <LCD_menu+0x4a6>

			_delay_ms(100);
			break;
			case 4:
			LCD_Command(0x01);
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_Command>
			LCD_String_xy (0, 0, "Green Velocity");
     59e:	4b ec       	ldi	r20, 0xCB	; 203
     5a0:	5b e5       	ldi	r21, 0x5B	; 91
     5a2:	60 e0       	ldi	r22, 0x00	; 0
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
			
			sprintf( buf, "%d", min_velocity[1]);
     5aa:	80 91 0a 28 	lds	r24, 0x280A	; 0x80280a <min_velocity+0x2>
     5ae:	90 91 0b 28 	lds	r25, 0x280B	; 0x80280b <min_velocity+0x3>
     5b2:	9f 93       	push	r25
     5b4:	8f 93       	push	r24
     5b6:	8f ea       	ldi	r24, 0xAF	; 175
     5b8:	9b e5       	ldi	r25, 0x5B	; 91
     5ba:	9f 93       	push	r25
     5bc:	8f 93       	push	r24
     5be:	8e 01       	movw	r16, r28
     5c0:	0f 5f       	subi	r16, 0xFF	; 255
     5c2:	1f 4f       	sbci	r17, 0xFF	; 255
     5c4:	1f 93       	push	r17
     5c6:	0f 93       	push	r16
     5c8:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <sprintf>
			LCD_String_xy (1, 8, buf);
     5cc:	a8 01       	movw	r20, r16
     5ce:	68 e0       	ldi	r22, 0x08	; 8
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
     5d6:	2f e7       	ldi	r18, 0x7F	; 127
     5d8:	8a e1       	ldi	r24, 0x1A	; 26
     5da:	96 e0       	ldi	r25, 0x06	; 6
     5dc:	21 50       	subi	r18, 0x01	; 1
     5de:	80 40       	sbci	r24, 0x00	; 0
     5e0:	90 40       	sbci	r25, 0x00	; 0
     5e2:	e1 f7       	brne	.-8      	; 0x5dc <LCD_menu+0x1ae>
     5e4:	00 c0       	rjmp	.+0      	; 0x5e6 <LCD_menu+0x1b8>
     5e6:	00 00       	nop
     5e8:	0f 90       	pop	r0
     5ea:	0f 90       	pop	r0
     5ec:	0f 90       	pop	r0
     5ee:	0f 90       	pop	r0
     5f0:	0f 90       	pop	r0
     5f2:	0f 90       	pop	r0
     5f4:	6f c1       	rjmp	.+734    	; 0x8d4 <LCD_menu+0x4a6>

			_delay_ms(100);
			break;
			case 5:
			LCD_Command(0x01);
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_Command>
			LCD_String_xy (0, 4, "Orange Note");
     5fc:	4a ed       	ldi	r20, 0xDA	; 218
     5fe:	5b e5       	ldi	r21, 0x5B	; 91
     600:	64 e0       	ldi	r22, 0x04	; 4
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
			sprintf( buf, "%d", note_C[2]);
     608:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <__data_start+0x2>
     60c:	1f 92       	push	r1
     60e:	8f 93       	push	r24
     610:	8f ea       	ldi	r24, 0xAF	; 175
     612:	9b e5       	ldi	r25, 0x5B	; 91
     614:	9f 93       	push	r25
     616:	8f 93       	push	r24
     618:	8e 01       	movw	r16, r28
     61a:	0f 5f       	subi	r16, 0xFF	; 255
     61c:	1f 4f       	sbci	r17, 0xFF	; 255
     61e:	1f 93       	push	r17
     620:	0f 93       	push	r16
     622:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <sprintf>
			LCD_String_xy (1, 8, buf);
     626:	a8 01       	movw	r20, r16
     628:	68 e0       	ldi	r22, 0x08	; 8
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
     630:	2f e7       	ldi	r18, 0x7F	; 127
     632:	8a e1       	ldi	r24, 0x1A	; 26
     634:	96 e0       	ldi	r25, 0x06	; 6
     636:	21 50       	subi	r18, 0x01	; 1
     638:	80 40       	sbci	r24, 0x00	; 0
     63a:	90 40       	sbci	r25, 0x00	; 0
     63c:	e1 f7       	brne	.-8      	; 0x636 <LCD_menu+0x208>
     63e:	00 c0       	rjmp	.+0      	; 0x640 <LCD_menu+0x212>
     640:	00 00       	nop
     642:	0f 90       	pop	r0
     644:	0f 90       	pop	r0
     646:	0f 90       	pop	r0
     648:	0f 90       	pop	r0
     64a:	0f 90       	pop	r0
     64c:	0f 90       	pop	r0
     64e:	42 c1       	rjmp	.+644    	; 0x8d4 <LCD_menu+0x4a6>

			_delay_ms(100);
			break;
			case 6:
			LCD_Command(0x01);
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_Command>
			LCD_String_xy (0, 0, "Orange Velocity");
     656:	46 ee       	ldi	r20, 0xE6	; 230
     658:	5b e5       	ldi	r21, 0x5B	; 91
     65a:	60 e0       	ldi	r22, 0x00	; 0
     65c:	80 e0       	ldi	r24, 0x00	; 0
     65e:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
			
			sprintf( buf, "%d", min_velocity[2]);
     662:	80 91 0c 28 	lds	r24, 0x280C	; 0x80280c <min_velocity+0x4>
     666:	90 91 0d 28 	lds	r25, 0x280D	; 0x80280d <min_velocity+0x5>
     66a:	9f 93       	push	r25
     66c:	8f 93       	push	r24
     66e:	8f ea       	ldi	r24, 0xAF	; 175
     670:	9b e5       	ldi	r25, 0x5B	; 91
     672:	9f 93       	push	r25
     674:	8f 93       	push	r24
     676:	8e 01       	movw	r16, r28
     678:	0f 5f       	subi	r16, 0xFF	; 255
     67a:	1f 4f       	sbci	r17, 0xFF	; 255
     67c:	1f 93       	push	r17
     67e:	0f 93       	push	r16
     680:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <sprintf>
			LCD_String_xy (1, 8, buf);
     684:	a8 01       	movw	r20, r16
     686:	68 e0       	ldi	r22, 0x08	; 8
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
     68e:	2f e7       	ldi	r18, 0x7F	; 127
     690:	8a e1       	ldi	r24, 0x1A	; 26
     692:	96 e0       	ldi	r25, 0x06	; 6
     694:	21 50       	subi	r18, 0x01	; 1
     696:	80 40       	sbci	r24, 0x00	; 0
     698:	90 40       	sbci	r25, 0x00	; 0
     69a:	e1 f7       	brne	.-8      	; 0x694 <LCD_menu+0x266>
     69c:	00 c0       	rjmp	.+0      	; 0x69e <LCD_menu+0x270>
     69e:	00 00       	nop
     6a0:	0f 90       	pop	r0
     6a2:	0f 90       	pop	r0
     6a4:	0f 90       	pop	r0
     6a6:	0f 90       	pop	r0
     6a8:	0f 90       	pop	r0
     6aa:	0f 90       	pop	r0
     6ac:	13 c1       	rjmp	.+550    	; 0x8d4 <LCD_menu+0x4a6>

			_delay_ms(100);
			break;
			case 7:
			LCD_Command(0x01);
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_Command>
			LCD_String_xy (0, 4, "Blue Note");
     6b4:	46 ef       	ldi	r20, 0xF6	; 246
     6b6:	5b e5       	ldi	r21, 0x5B	; 91
     6b8:	64 e0       	ldi	r22, 0x04	; 4
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
			sprintf( buf, "%d", note_C[3]);
     6c0:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <__data_start+0x3>
     6c4:	1f 92       	push	r1
     6c6:	8f 93       	push	r24
     6c8:	8f ea       	ldi	r24, 0xAF	; 175
     6ca:	9b e5       	ldi	r25, 0x5B	; 91
     6cc:	9f 93       	push	r25
     6ce:	8f 93       	push	r24
     6d0:	8e 01       	movw	r16, r28
     6d2:	0f 5f       	subi	r16, 0xFF	; 255
     6d4:	1f 4f       	sbci	r17, 0xFF	; 255
     6d6:	1f 93       	push	r17
     6d8:	0f 93       	push	r16
     6da:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <sprintf>
			LCD_String_xy (1, 8, buf);
     6de:	a8 01       	movw	r20, r16
     6e0:	68 e0       	ldi	r22, 0x08	; 8
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
     6e8:	2f e7       	ldi	r18, 0x7F	; 127
     6ea:	8a e1       	ldi	r24, 0x1A	; 26
     6ec:	96 e0       	ldi	r25, 0x06	; 6
     6ee:	21 50       	subi	r18, 0x01	; 1
     6f0:	80 40       	sbci	r24, 0x00	; 0
     6f2:	90 40       	sbci	r25, 0x00	; 0
     6f4:	e1 f7       	brne	.-8      	; 0x6ee <LCD_menu+0x2c0>
     6f6:	00 c0       	rjmp	.+0      	; 0x6f8 <LCD_menu+0x2ca>
     6f8:	00 00       	nop
     6fa:	0f 90       	pop	r0
     6fc:	0f 90       	pop	r0
     6fe:	0f 90       	pop	r0
     700:	0f 90       	pop	r0
     702:	0f 90       	pop	r0
     704:	0f 90       	pop	r0
     706:	e6 c0       	rjmp	.+460    	; 0x8d4 <LCD_menu+0x4a6>

			_delay_ms(100);
			break;
			case 8:
			LCD_Command(0x01);
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_Command>
			LCD_String_xy (0, 0, "Blue Velocity");
     70e:	40 e0       	ldi	r20, 0x00	; 0
     710:	5c e5       	ldi	r21, 0x5C	; 92
     712:	60 e0       	ldi	r22, 0x00	; 0
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
			
			sprintf( buf, "%d", min_velocity[3]);
     71a:	80 91 0e 28 	lds	r24, 0x280E	; 0x80280e <min_velocity+0x6>
     71e:	90 91 0f 28 	lds	r25, 0x280F	; 0x80280f <min_velocity+0x7>
     722:	9f 93       	push	r25
     724:	8f 93       	push	r24
     726:	8f ea       	ldi	r24, 0xAF	; 175
     728:	9b e5       	ldi	r25, 0x5B	; 91
     72a:	9f 93       	push	r25
     72c:	8f 93       	push	r24
     72e:	8e 01       	movw	r16, r28
     730:	0f 5f       	subi	r16, 0xFF	; 255
     732:	1f 4f       	sbci	r17, 0xFF	; 255
     734:	1f 93       	push	r17
     736:	0f 93       	push	r16
     738:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <sprintf>
			LCD_String_xy (1, 8, buf);
     73c:	a8 01       	movw	r20, r16
     73e:	68 e0       	ldi	r22, 0x08	; 8
     740:	81 e0       	ldi	r24, 0x01	; 1
     742:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
     746:	2f e7       	ldi	r18, 0x7F	; 127
     748:	8a e1       	ldi	r24, 0x1A	; 26
     74a:	96 e0       	ldi	r25, 0x06	; 6
     74c:	21 50       	subi	r18, 0x01	; 1
     74e:	80 40       	sbci	r24, 0x00	; 0
     750:	90 40       	sbci	r25, 0x00	; 0
     752:	e1 f7       	brne	.-8      	; 0x74c <LCD_menu+0x31e>
     754:	00 c0       	rjmp	.+0      	; 0x756 <LCD_menu+0x328>
     756:	00 00       	nop
     758:	0f 90       	pop	r0
     75a:	0f 90       	pop	r0
     75c:	0f 90       	pop	r0
     75e:	0f 90       	pop	r0
     760:	0f 90       	pop	r0
     762:	0f 90       	pop	r0
     764:	b7 c0       	rjmp	.+366    	; 0x8d4 <LCD_menu+0x4a6>

			_delay_ms(100);
			break;
			case 9:
			LCD_Command(0x01);
     766:	81 e0       	ldi	r24, 0x01	; 1
     768:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_Command>
			LCD_String_xy (0, 4, "Yellow Note");
     76c:	4e e0       	ldi	r20, 0x0E	; 14
     76e:	5c e5       	ldi	r21, 0x5C	; 92
     770:	64 e0       	ldi	r22, 0x04	; 4
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
			sprintf( buf, "%d", note_C[4]);
     778:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <__data_start+0x4>
     77c:	1f 92       	push	r1
     77e:	8f 93       	push	r24
     780:	8f ea       	ldi	r24, 0xAF	; 175
     782:	9b e5       	ldi	r25, 0x5B	; 91
     784:	9f 93       	push	r25
     786:	8f 93       	push	r24
     788:	8e 01       	movw	r16, r28
     78a:	0f 5f       	subi	r16, 0xFF	; 255
     78c:	1f 4f       	sbci	r17, 0xFF	; 255
     78e:	1f 93       	push	r17
     790:	0f 93       	push	r16
     792:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <sprintf>
			LCD_String_xy (1, 8, buf);
     796:	a8 01       	movw	r20, r16
     798:	68 e0       	ldi	r22, 0x08	; 8
     79a:	81 e0       	ldi	r24, 0x01	; 1
     79c:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
     7a0:	2f e7       	ldi	r18, 0x7F	; 127
     7a2:	8a e1       	ldi	r24, 0x1A	; 26
     7a4:	96 e0       	ldi	r25, 0x06	; 6
     7a6:	21 50       	subi	r18, 0x01	; 1
     7a8:	80 40       	sbci	r24, 0x00	; 0
     7aa:	90 40       	sbci	r25, 0x00	; 0
     7ac:	e1 f7       	brne	.-8      	; 0x7a6 <LCD_menu+0x378>
     7ae:	00 c0       	rjmp	.+0      	; 0x7b0 <LCD_menu+0x382>
     7b0:	00 00       	nop
     7b2:	0f 90       	pop	r0
     7b4:	0f 90       	pop	r0
     7b6:	0f 90       	pop	r0
     7b8:	0f 90       	pop	r0
     7ba:	0f 90       	pop	r0
     7bc:	0f 90       	pop	r0
     7be:	8a c0       	rjmp	.+276    	; 0x8d4 <LCD_menu+0x4a6>

			_delay_ms(100);
			break;
			case 10:
			LCD_Command(0x01);
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_Command>
			LCD_String_xy (0, 0, "Yellow Velocity");
     7c6:	4a e1       	ldi	r20, 0x1A	; 26
     7c8:	5c e5       	ldi	r21, 0x5C	; 92
     7ca:	60 e0       	ldi	r22, 0x00	; 0
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
			
			sprintf( buf, "%d", min_velocity[4]);
     7d2:	80 91 10 28 	lds	r24, 0x2810	; 0x802810 <min_velocity+0x8>
     7d6:	90 91 11 28 	lds	r25, 0x2811	; 0x802811 <min_velocity+0x9>
     7da:	9f 93       	push	r25
     7dc:	8f 93       	push	r24
     7de:	8f ea       	ldi	r24, 0xAF	; 175
     7e0:	9b e5       	ldi	r25, 0x5B	; 91
     7e2:	9f 93       	push	r25
     7e4:	8f 93       	push	r24
     7e6:	8e 01       	movw	r16, r28
     7e8:	0f 5f       	subi	r16, 0xFF	; 255
     7ea:	1f 4f       	sbci	r17, 0xFF	; 255
     7ec:	1f 93       	push	r17
     7ee:	0f 93       	push	r16
     7f0:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <sprintf>
			LCD_String_xy (1, 8, buf);
     7f4:	a8 01       	movw	r20, r16
     7f6:	68 e0       	ldi	r22, 0x08	; 8
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
     7fe:	2f e7       	ldi	r18, 0x7F	; 127
     800:	8a e1       	ldi	r24, 0x1A	; 26
     802:	96 e0       	ldi	r25, 0x06	; 6
     804:	21 50       	subi	r18, 0x01	; 1
     806:	80 40       	sbci	r24, 0x00	; 0
     808:	90 40       	sbci	r25, 0x00	; 0
     80a:	e1 f7       	brne	.-8      	; 0x804 <LCD_menu+0x3d6>
     80c:	00 c0       	rjmp	.+0      	; 0x80e <LCD_menu+0x3e0>
     80e:	00 00       	nop
     810:	0f 90       	pop	r0
     812:	0f 90       	pop	r0
     814:	0f 90       	pop	r0
     816:	0f 90       	pop	r0
     818:	0f 90       	pop	r0
     81a:	0f 90       	pop	r0
     81c:	5b c0       	rjmp	.+182    	; 0x8d4 <LCD_menu+0x4a6>

			_delay_ms(100);
			break;
			case 11:
			LCD_Command(0x01);
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_Command>
			LCD_String_xy (0, 4, "Red Note");
     824:	4a e2       	ldi	r20, 0x2A	; 42
     826:	5c e5       	ldi	r21, 0x5C	; 92
     828:	64 e0       	ldi	r22, 0x04	; 4
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
			sprintf( buf, "%d", note_C[5]);
     830:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <__data_start+0x5>
     834:	1f 92       	push	r1
     836:	8f 93       	push	r24
     838:	8f ea       	ldi	r24, 0xAF	; 175
     83a:	9b e5       	ldi	r25, 0x5B	; 91
     83c:	9f 93       	push	r25
     83e:	8f 93       	push	r24
     840:	8e 01       	movw	r16, r28
     842:	0f 5f       	subi	r16, 0xFF	; 255
     844:	1f 4f       	sbci	r17, 0xFF	; 255
     846:	1f 93       	push	r17
     848:	0f 93       	push	r16
     84a:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <sprintf>
			LCD_String_xy (1, 8, buf);
     84e:	a8 01       	movw	r20, r16
     850:	68 e0       	ldi	r22, 0x08	; 8
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
     858:	2f e7       	ldi	r18, 0x7F	; 127
     85a:	8a e1       	ldi	r24, 0x1A	; 26
     85c:	96 e0       	ldi	r25, 0x06	; 6
     85e:	21 50       	subi	r18, 0x01	; 1
     860:	80 40       	sbci	r24, 0x00	; 0
     862:	90 40       	sbci	r25, 0x00	; 0
     864:	e1 f7       	brne	.-8      	; 0x85e <LCD_menu+0x430>
     866:	00 c0       	rjmp	.+0      	; 0x868 <LCD_menu+0x43a>
     868:	00 00       	nop
     86a:	0f 90       	pop	r0
     86c:	0f 90       	pop	r0
     86e:	0f 90       	pop	r0
     870:	0f 90       	pop	r0
     872:	0f 90       	pop	r0
     874:	0f 90       	pop	r0
     876:	2e c0       	rjmp	.+92     	; 0x8d4 <LCD_menu+0x4a6>

			_delay_ms(100);
			break;
			case 12:
			LCD_Command(0x01);
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_Command>
			LCD_String_xy (0, 0, "Red Velocity");
     87e:	43 e3       	ldi	r20, 0x33	; 51
     880:	5c e5       	ldi	r21, 0x5C	; 92
     882:	60 e0       	ldi	r22, 0x00	; 0
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
			
			sprintf( buf, "%d", min_velocity[5]);
     88a:	80 91 12 28 	lds	r24, 0x2812	; 0x802812 <min_velocity+0xa>
     88e:	90 91 13 28 	lds	r25, 0x2813	; 0x802813 <min_velocity+0xb>
     892:	9f 93       	push	r25
     894:	8f 93       	push	r24
     896:	8f ea       	ldi	r24, 0xAF	; 175
     898:	9b e5       	ldi	r25, 0x5B	; 91
     89a:	9f 93       	push	r25
     89c:	8f 93       	push	r24
     89e:	8e 01       	movw	r16, r28
     8a0:	0f 5f       	subi	r16, 0xFF	; 255
     8a2:	1f 4f       	sbci	r17, 0xFF	; 255
     8a4:	1f 93       	push	r17
     8a6:	0f 93       	push	r16
     8a8:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <sprintf>
			LCD_String_xy (1, 8, buf);
     8ac:	a8 01       	movw	r20, r16
     8ae:	68 e0       	ldi	r22, 0x08	; 8
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
     8b6:	2f e7       	ldi	r18, 0x7F	; 127
     8b8:	8a e1       	ldi	r24, 0x1A	; 26
     8ba:	96 e0       	ldi	r25, 0x06	; 6
     8bc:	21 50       	subi	r18, 0x01	; 1
     8be:	80 40       	sbci	r24, 0x00	; 0
     8c0:	90 40       	sbci	r25, 0x00	; 0
     8c2:	e1 f7       	brne	.-8      	; 0x8bc <LCD_menu+0x48e>
     8c4:	00 c0       	rjmp	.+0      	; 0x8c6 <LCD_menu+0x498>
     8c6:	00 00       	nop
     8c8:	0f 90       	pop	r0
     8ca:	0f 90       	pop	r0
     8cc:	0f 90       	pop	r0
     8ce:	0f 90       	pop	r0
     8d0:	0f 90       	pop	r0
     8d2:	0f 90       	pop	r0

			_delay_ms(100);
			break;
			
		}
	}
     8d4:	dc 5f       	subi	r29, 0xFC	; 252
     8d6:	cd bf       	out	0x3d, r28	; 61
     8d8:	de bf       	out	0x3e, r29	; 62
     8da:	df 91       	pop	r29
     8dc:	cf 91       	pop	r28
     8de:	1f 91       	pop	r17
     8e0:	0f 91       	pop	r16
     8e2:	08 95       	ret

000008e4 <LCD_menu_change_value>:
	void LCD_menu_change_value(uint8_t state,uint8_t plusz_minus)
	{
     8e4:	0f 93       	push	r16
     8e6:	1f 93       	push	r17
     8e8:	cf 93       	push	r28
     8ea:	df 93       	push	r29
     8ec:	cd b7       	in	r28, 0x3d	; 61
     8ee:	de b7       	in	r29, 0x3e	; 62
     8f0:	d4 50       	subi	r29, 0x04	; 4
     8f2:	cd bf       	out	0x3d, r28	; 61
     8f4:	de bf       	out	0x3e, r29	; 62
		char buf[ 1024];
		switch(state)
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	fc 01       	movw	r30, r24
     8fa:	31 97       	sbiw	r30, 0x01	; 1
     8fc:	ec 30       	cpi	r30, 0x0C	; 12
     8fe:	f1 05       	cpc	r31, r1
     900:	08 f0       	brcs	.+2      	; 0x904 <LCD_menu_change_value+0x20>
     902:	4f c2       	rjmp	.+1182   	; 0xda2 <LCD_menu_change_value+0x4be>
     904:	e3 5a       	subi	r30, 0xA3	; 163
     906:	ff 4f       	sbci	r31, 0xFF	; 255
     908:	0c 94 c1 0a 	jmp	0x1582	; 0x1582 <__tablejump2__>
		{
			case 1:
			note_value_changer(0,plusz_minus);
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <note_value_changer>
			LCD_Command(0x01);
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_Command>
			LCD_String_xy (0, 4, "Kick Note");
     918:	45 ea       	ldi	r20, 0xA5	; 165
     91a:	5b e5       	ldi	r21, 0x5B	; 91
     91c:	64 e0       	ldi	r22, 0x04	; 4
     91e:	80 e0       	ldi	r24, 0x00	; 0
     920:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
			sprintf( buf, "%d", note_C[0]);
     924:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__data_start>
     928:	1f 92       	push	r1
     92a:	8f 93       	push	r24
     92c:	8f ea       	ldi	r24, 0xAF	; 175
     92e:	9b e5       	ldi	r25, 0x5B	; 91
     930:	9f 93       	push	r25
     932:	8f 93       	push	r24
     934:	8e 01       	movw	r16, r28
     936:	0f 5f       	subi	r16, 0xFF	; 255
     938:	1f 4f       	sbci	r17, 0xFF	; 255
     93a:	1f 93       	push	r17
     93c:	0f 93       	push	r16
     93e:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <sprintf>
			LCD_String_xy (1, 8, buf);
     942:	a8 01       	movw	r20, r16
     944:	68 e0       	ldi	r22, 0x08	; 8
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
     94c:	2f e7       	ldi	r18, 0x7F	; 127
     94e:	8a e1       	ldi	r24, 0x1A	; 26
     950:	96 e0       	ldi	r25, 0x06	; 6
     952:	21 50       	subi	r18, 0x01	; 1
     954:	80 40       	sbci	r24, 0x00	; 0
     956:	90 40       	sbci	r25, 0x00	; 0
     958:	e1 f7       	brne	.-8      	; 0x952 <LCD_menu_change_value+0x6e>
     95a:	00 c0       	rjmp	.+0      	; 0x95c <LCD_menu_change_value+0x78>
     95c:	00 00       	nop
     95e:	0f 90       	pop	r0
     960:	0f 90       	pop	r0
     962:	0f 90       	pop	r0
     964:	0f 90       	pop	r0
     966:	0f 90       	pop	r0
     968:	0f 90       	pop	r0
     96a:	1b c2       	rjmp	.+1078   	; 0xda2 <LCD_menu_change_value+0x4be>

			_delay_ms(100);
			break;
			case 2:
			velocity_value_changer(0,plusz_minus);
     96c:	80 e0       	ldi	r24, 0x00	; 0
     96e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <velocity_value_changer>
			LCD_Command(0x01);
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_Command>
			LCD_String_xy (0, 0, "Kick Velocity");
     978:	42 eb       	ldi	r20, 0xB2	; 178
     97a:	5b e5       	ldi	r21, 0x5B	; 91
     97c:	60 e0       	ldi	r22, 0x00	; 0
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
			sprintf( buf, "%d", min_velocity[0]);
     984:	80 91 08 28 	lds	r24, 0x2808	; 0x802808 <min_velocity>
     988:	90 91 09 28 	lds	r25, 0x2809	; 0x802809 <min_velocity+0x1>
     98c:	9f 93       	push	r25
     98e:	8f 93       	push	r24
     990:	8f ea       	ldi	r24, 0xAF	; 175
     992:	9b e5       	ldi	r25, 0x5B	; 91
     994:	9f 93       	push	r25
     996:	8f 93       	push	r24
     998:	8e 01       	movw	r16, r28
     99a:	0f 5f       	subi	r16, 0xFF	; 255
     99c:	1f 4f       	sbci	r17, 0xFF	; 255
     99e:	1f 93       	push	r17
     9a0:	0f 93       	push	r16
     9a2:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <sprintf>
			LCD_String_xy (1, 8, buf);
     9a6:	a8 01       	movw	r20, r16
     9a8:	68 e0       	ldi	r22, 0x08	; 8
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
     9b0:	2f e7       	ldi	r18, 0x7F	; 127
     9b2:	8a e1       	ldi	r24, 0x1A	; 26
     9b4:	96 e0       	ldi	r25, 0x06	; 6
     9b6:	21 50       	subi	r18, 0x01	; 1
     9b8:	80 40       	sbci	r24, 0x00	; 0
     9ba:	90 40       	sbci	r25, 0x00	; 0
     9bc:	e1 f7       	brne	.-8      	; 0x9b6 <LCD_menu_change_value+0xd2>
     9be:	00 c0       	rjmp	.+0      	; 0x9c0 <LCD_menu_change_value+0xdc>
     9c0:	00 00       	nop
     9c2:	0f 90       	pop	r0
     9c4:	0f 90       	pop	r0
     9c6:	0f 90       	pop	r0
     9c8:	0f 90       	pop	r0
     9ca:	0f 90       	pop	r0
     9cc:	0f 90       	pop	r0
     9ce:	e9 c1       	rjmp	.+978    	; 0xda2 <LCD_menu_change_value+0x4be>
			_delay_ms(100);
			break;
			case 3:
			note_value_changer(1,plusz_minus);
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <note_value_changer>
			LCD_Command(0x01);
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_Command>
			LCD_String_xy (0, 4, "Green Note");
     9dc:	40 ec       	ldi	r20, 0xC0	; 192
     9de:	5b e5       	ldi	r21, 0x5B	; 91
     9e0:	64 e0       	ldi	r22, 0x04	; 4
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
			sprintf( buf, "%d", note_C[1]);
     9e8:	80 91 01 28 	lds	r24, 0x2801	; 0x802801 <__data_start+0x1>
     9ec:	1f 92       	push	r1
     9ee:	8f 93       	push	r24
     9f0:	8f ea       	ldi	r24, 0xAF	; 175
     9f2:	9b e5       	ldi	r25, 0x5B	; 91
     9f4:	9f 93       	push	r25
     9f6:	8f 93       	push	r24
     9f8:	8e 01       	movw	r16, r28
     9fa:	0f 5f       	subi	r16, 0xFF	; 255
     9fc:	1f 4f       	sbci	r17, 0xFF	; 255
     9fe:	1f 93       	push	r17
     a00:	0f 93       	push	r16
     a02:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <sprintf>
			LCD_String_xy (1, 8, buf);
     a06:	a8 01       	movw	r20, r16
     a08:	68 e0       	ldi	r22, 0x08	; 8
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
     a10:	2f e7       	ldi	r18, 0x7F	; 127
     a12:	8a e1       	ldi	r24, 0x1A	; 26
     a14:	96 e0       	ldi	r25, 0x06	; 6
     a16:	21 50       	subi	r18, 0x01	; 1
     a18:	80 40       	sbci	r24, 0x00	; 0
     a1a:	90 40       	sbci	r25, 0x00	; 0
     a1c:	e1 f7       	brne	.-8      	; 0xa16 <LCD_menu_change_value+0x132>
     a1e:	00 c0       	rjmp	.+0      	; 0xa20 <LCD_menu_change_value+0x13c>
     a20:	00 00       	nop
     a22:	0f 90       	pop	r0
     a24:	0f 90       	pop	r0
     a26:	0f 90       	pop	r0
     a28:	0f 90       	pop	r0
     a2a:	0f 90       	pop	r0
     a2c:	0f 90       	pop	r0
     a2e:	b9 c1       	rjmp	.+882    	; 0xda2 <LCD_menu_change_value+0x4be>

			_delay_ms(100);
			break;
			case 4:
			velocity_value_changer(1,plusz_minus);
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <velocity_value_changer>
			LCD_Command(0x01);
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_Command>
			LCD_String_xy (0, 0, "Green Velocity");
     a3c:	4b ec       	ldi	r20, 0xCB	; 203
     a3e:	5b e5       	ldi	r21, 0x5B	; 91
     a40:	60 e0       	ldi	r22, 0x00	; 0
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
			
			sprintf( buf, "%d", min_velocity[1]);
     a48:	80 91 0a 28 	lds	r24, 0x280A	; 0x80280a <min_velocity+0x2>
     a4c:	90 91 0b 28 	lds	r25, 0x280B	; 0x80280b <min_velocity+0x3>
     a50:	9f 93       	push	r25
     a52:	8f 93       	push	r24
     a54:	8f ea       	ldi	r24, 0xAF	; 175
     a56:	9b e5       	ldi	r25, 0x5B	; 91
     a58:	9f 93       	push	r25
     a5a:	8f 93       	push	r24
     a5c:	8e 01       	movw	r16, r28
     a5e:	0f 5f       	subi	r16, 0xFF	; 255
     a60:	1f 4f       	sbci	r17, 0xFF	; 255
     a62:	1f 93       	push	r17
     a64:	0f 93       	push	r16
     a66:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <sprintf>
			LCD_String_xy (1, 8, buf);
     a6a:	a8 01       	movw	r20, r16
     a6c:	68 e0       	ldi	r22, 0x08	; 8
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
     a74:	2f e7       	ldi	r18, 0x7F	; 127
     a76:	8a e1       	ldi	r24, 0x1A	; 26
     a78:	96 e0       	ldi	r25, 0x06	; 6
     a7a:	21 50       	subi	r18, 0x01	; 1
     a7c:	80 40       	sbci	r24, 0x00	; 0
     a7e:	90 40       	sbci	r25, 0x00	; 0
     a80:	e1 f7       	brne	.-8      	; 0xa7a <LCD_menu_change_value+0x196>
     a82:	00 c0       	rjmp	.+0      	; 0xa84 <LCD_menu_change_value+0x1a0>
     a84:	00 00       	nop
     a86:	0f 90       	pop	r0
     a88:	0f 90       	pop	r0
     a8a:	0f 90       	pop	r0
     a8c:	0f 90       	pop	r0
     a8e:	0f 90       	pop	r0
     a90:	0f 90       	pop	r0
     a92:	87 c1       	rjmp	.+782    	; 0xda2 <LCD_menu_change_value+0x4be>

			_delay_ms(100);
			break;
			case 5:
			note_value_changer(2,plusz_minus);
     a94:	82 e0       	ldi	r24, 0x02	; 2
     a96:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <note_value_changer>
			LCD_Command(0x01);
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_Command>
			LCD_String_xy (0, 4, "Orange Note");
     aa0:	4a ed       	ldi	r20, 0xDA	; 218
     aa2:	5b e5       	ldi	r21, 0x5B	; 91
     aa4:	64 e0       	ldi	r22, 0x04	; 4
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
			sprintf( buf, "%d", note_C[2]);
     aac:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <__data_start+0x2>
     ab0:	1f 92       	push	r1
     ab2:	8f 93       	push	r24
     ab4:	8f ea       	ldi	r24, 0xAF	; 175
     ab6:	9b e5       	ldi	r25, 0x5B	; 91
     ab8:	9f 93       	push	r25
     aba:	8f 93       	push	r24
     abc:	8e 01       	movw	r16, r28
     abe:	0f 5f       	subi	r16, 0xFF	; 255
     ac0:	1f 4f       	sbci	r17, 0xFF	; 255
     ac2:	1f 93       	push	r17
     ac4:	0f 93       	push	r16
     ac6:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <sprintf>
			LCD_String_xy (1, 8, buf);
     aca:	a8 01       	movw	r20, r16
     acc:	68 e0       	ldi	r22, 0x08	; 8
     ace:	81 e0       	ldi	r24, 0x01	; 1
     ad0:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
     ad4:	2f e7       	ldi	r18, 0x7F	; 127
     ad6:	8a e1       	ldi	r24, 0x1A	; 26
     ad8:	96 e0       	ldi	r25, 0x06	; 6
     ada:	21 50       	subi	r18, 0x01	; 1
     adc:	80 40       	sbci	r24, 0x00	; 0
     ade:	90 40       	sbci	r25, 0x00	; 0
     ae0:	e1 f7       	brne	.-8      	; 0xada <LCD_menu_change_value+0x1f6>
     ae2:	00 c0       	rjmp	.+0      	; 0xae4 <LCD_menu_change_value+0x200>
     ae4:	00 00       	nop
     ae6:	0f 90       	pop	r0
     ae8:	0f 90       	pop	r0
     aea:	0f 90       	pop	r0
     aec:	0f 90       	pop	r0
     aee:	0f 90       	pop	r0
     af0:	0f 90       	pop	r0
     af2:	57 c1       	rjmp	.+686    	; 0xda2 <LCD_menu_change_value+0x4be>

			_delay_ms(100);
			break;
			case 6:
			velocity_value_changer(2,plusz_minus);
     af4:	82 e0       	ldi	r24, 0x02	; 2
     af6:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <velocity_value_changer>
			LCD_Command(0x01);
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_Command>
			LCD_String_xy (0, 0, "Orange Velocity");
     b00:	46 ee       	ldi	r20, 0xE6	; 230
     b02:	5b e5       	ldi	r21, 0x5B	; 91
     b04:	60 e0       	ldi	r22, 0x00	; 0
     b06:	80 e0       	ldi	r24, 0x00	; 0
     b08:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
			
			sprintf( buf, "%d", min_velocity[2]);
     b0c:	80 91 0c 28 	lds	r24, 0x280C	; 0x80280c <min_velocity+0x4>
     b10:	90 91 0d 28 	lds	r25, 0x280D	; 0x80280d <min_velocity+0x5>
     b14:	9f 93       	push	r25
     b16:	8f 93       	push	r24
     b18:	8f ea       	ldi	r24, 0xAF	; 175
     b1a:	9b e5       	ldi	r25, 0x5B	; 91
     b1c:	9f 93       	push	r25
     b1e:	8f 93       	push	r24
     b20:	8e 01       	movw	r16, r28
     b22:	0f 5f       	subi	r16, 0xFF	; 255
     b24:	1f 4f       	sbci	r17, 0xFF	; 255
     b26:	1f 93       	push	r17
     b28:	0f 93       	push	r16
     b2a:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <sprintf>
			LCD_String_xy (1, 8, buf);
     b2e:	a8 01       	movw	r20, r16
     b30:	68 e0       	ldi	r22, 0x08	; 8
     b32:	81 e0       	ldi	r24, 0x01	; 1
     b34:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
     b38:	2f e7       	ldi	r18, 0x7F	; 127
     b3a:	8a e1       	ldi	r24, 0x1A	; 26
     b3c:	96 e0       	ldi	r25, 0x06	; 6
     b3e:	21 50       	subi	r18, 0x01	; 1
     b40:	80 40       	sbci	r24, 0x00	; 0
     b42:	90 40       	sbci	r25, 0x00	; 0
     b44:	e1 f7       	brne	.-8      	; 0xb3e <LCD_menu_change_value+0x25a>
     b46:	00 c0       	rjmp	.+0      	; 0xb48 <LCD_menu_change_value+0x264>
     b48:	00 00       	nop
     b4a:	0f 90       	pop	r0
     b4c:	0f 90       	pop	r0
     b4e:	0f 90       	pop	r0
     b50:	0f 90       	pop	r0
     b52:	0f 90       	pop	r0
     b54:	0f 90       	pop	r0
     b56:	25 c1       	rjmp	.+586    	; 0xda2 <LCD_menu_change_value+0x4be>

			_delay_ms(100);
			break;
			case 7:
			note_value_changer(3,plusz_minus);
     b58:	83 e0       	ldi	r24, 0x03	; 3
     b5a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <note_value_changer>
			LCD_Command(0x01);
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_Command>
			LCD_String_xy (0, 4, "Blue Note");
     b64:	46 ef       	ldi	r20, 0xF6	; 246
     b66:	5b e5       	ldi	r21, 0x5B	; 91
     b68:	64 e0       	ldi	r22, 0x04	; 4
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
			sprintf( buf, "%d", note_C[3]);
     b70:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <__data_start+0x3>
     b74:	1f 92       	push	r1
     b76:	8f 93       	push	r24
     b78:	8f ea       	ldi	r24, 0xAF	; 175
     b7a:	9b e5       	ldi	r25, 0x5B	; 91
     b7c:	9f 93       	push	r25
     b7e:	8f 93       	push	r24
     b80:	8e 01       	movw	r16, r28
     b82:	0f 5f       	subi	r16, 0xFF	; 255
     b84:	1f 4f       	sbci	r17, 0xFF	; 255
     b86:	1f 93       	push	r17
     b88:	0f 93       	push	r16
     b8a:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <sprintf>
			LCD_String_xy (1, 8, buf);
     b8e:	a8 01       	movw	r20, r16
     b90:	68 e0       	ldi	r22, 0x08	; 8
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
     b98:	2f e7       	ldi	r18, 0x7F	; 127
     b9a:	8a e1       	ldi	r24, 0x1A	; 26
     b9c:	96 e0       	ldi	r25, 0x06	; 6
     b9e:	21 50       	subi	r18, 0x01	; 1
     ba0:	80 40       	sbci	r24, 0x00	; 0
     ba2:	90 40       	sbci	r25, 0x00	; 0
     ba4:	e1 f7       	brne	.-8      	; 0xb9e <LCD_menu_change_value+0x2ba>
     ba6:	00 c0       	rjmp	.+0      	; 0xba8 <LCD_menu_change_value+0x2c4>
     ba8:	00 00       	nop
     baa:	0f 90       	pop	r0
     bac:	0f 90       	pop	r0
     bae:	0f 90       	pop	r0
     bb0:	0f 90       	pop	r0
     bb2:	0f 90       	pop	r0
     bb4:	0f 90       	pop	r0
     bb6:	f5 c0       	rjmp	.+490    	; 0xda2 <LCD_menu_change_value+0x4be>

			_delay_ms(100);
			break;
			case 8:
			velocity_value_changer(3,plusz_minus);
     bb8:	83 e0       	ldi	r24, 0x03	; 3
     bba:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <velocity_value_changer>
			LCD_Command(0x01);
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_Command>
			LCD_String_xy (0, 0, "Blue Velocity");
     bc4:	40 e0       	ldi	r20, 0x00	; 0
     bc6:	5c e5       	ldi	r21, 0x5C	; 92
     bc8:	60 e0       	ldi	r22, 0x00	; 0
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
			
			sprintf( buf, "%d", min_velocity[3]);
     bd0:	80 91 0e 28 	lds	r24, 0x280E	; 0x80280e <min_velocity+0x6>
     bd4:	90 91 0f 28 	lds	r25, 0x280F	; 0x80280f <min_velocity+0x7>
     bd8:	9f 93       	push	r25
     bda:	8f 93       	push	r24
     bdc:	8f ea       	ldi	r24, 0xAF	; 175
     bde:	9b e5       	ldi	r25, 0x5B	; 91
     be0:	9f 93       	push	r25
     be2:	8f 93       	push	r24
     be4:	8e 01       	movw	r16, r28
     be6:	0f 5f       	subi	r16, 0xFF	; 255
     be8:	1f 4f       	sbci	r17, 0xFF	; 255
     bea:	1f 93       	push	r17
     bec:	0f 93       	push	r16
     bee:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <sprintf>
			LCD_String_xy (1, 8, buf);
     bf2:	a8 01       	movw	r20, r16
     bf4:	68 e0       	ldi	r22, 0x08	; 8
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
     bfc:	2f e7       	ldi	r18, 0x7F	; 127
     bfe:	8a e1       	ldi	r24, 0x1A	; 26
     c00:	96 e0       	ldi	r25, 0x06	; 6
     c02:	21 50       	subi	r18, 0x01	; 1
     c04:	80 40       	sbci	r24, 0x00	; 0
     c06:	90 40       	sbci	r25, 0x00	; 0
     c08:	e1 f7       	brne	.-8      	; 0xc02 <LCD_menu_change_value+0x31e>
     c0a:	00 c0       	rjmp	.+0      	; 0xc0c <LCD_menu_change_value+0x328>
     c0c:	00 00       	nop
     c0e:	0f 90       	pop	r0
     c10:	0f 90       	pop	r0
     c12:	0f 90       	pop	r0
     c14:	0f 90       	pop	r0
     c16:	0f 90       	pop	r0
     c18:	0f 90       	pop	r0
     c1a:	c3 c0       	rjmp	.+390    	; 0xda2 <LCD_menu_change_value+0x4be>

			_delay_ms(100);
			break;
			case 9:
			note_value_changer(4,plusz_minus);
     c1c:	84 e0       	ldi	r24, 0x04	; 4
     c1e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <note_value_changer>
			LCD_Command(0x01);
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_Command>
			LCD_String_xy (0, 4, "Yellow Note");
     c28:	4e e0       	ldi	r20, 0x0E	; 14
     c2a:	5c e5       	ldi	r21, 0x5C	; 92
     c2c:	64 e0       	ldi	r22, 0x04	; 4
     c2e:	80 e0       	ldi	r24, 0x00	; 0
     c30:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
			sprintf( buf, "%d", note_C[4]);
     c34:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <__data_start+0x4>
     c38:	1f 92       	push	r1
     c3a:	8f 93       	push	r24
     c3c:	8f ea       	ldi	r24, 0xAF	; 175
     c3e:	9b e5       	ldi	r25, 0x5B	; 91
     c40:	9f 93       	push	r25
     c42:	8f 93       	push	r24
     c44:	8e 01       	movw	r16, r28
     c46:	0f 5f       	subi	r16, 0xFF	; 255
     c48:	1f 4f       	sbci	r17, 0xFF	; 255
     c4a:	1f 93       	push	r17
     c4c:	0f 93       	push	r16
     c4e:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <sprintf>
			LCD_String_xy (1, 8, buf);
     c52:	a8 01       	movw	r20, r16
     c54:	68 e0       	ldi	r22, 0x08	; 8
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
     c5c:	2f e7       	ldi	r18, 0x7F	; 127
     c5e:	8a e1       	ldi	r24, 0x1A	; 26
     c60:	96 e0       	ldi	r25, 0x06	; 6
     c62:	21 50       	subi	r18, 0x01	; 1
     c64:	80 40       	sbci	r24, 0x00	; 0
     c66:	90 40       	sbci	r25, 0x00	; 0
     c68:	e1 f7       	brne	.-8      	; 0xc62 <LCD_menu_change_value+0x37e>
     c6a:	00 c0       	rjmp	.+0      	; 0xc6c <LCD_menu_change_value+0x388>
     c6c:	00 00       	nop
     c6e:	0f 90       	pop	r0
     c70:	0f 90       	pop	r0
     c72:	0f 90       	pop	r0
     c74:	0f 90       	pop	r0
     c76:	0f 90       	pop	r0
     c78:	0f 90       	pop	r0
     c7a:	93 c0       	rjmp	.+294    	; 0xda2 <LCD_menu_change_value+0x4be>

			_delay_ms(100);
			break;
			case 10:
			velocity_value_changer(4,plusz_minus);
     c7c:	84 e0       	ldi	r24, 0x04	; 4
     c7e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <velocity_value_changer>
			LCD_Command(0x01);
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_Command>
			LCD_String_xy (0, 0, "Yellow Velocity");
     c88:	4a e1       	ldi	r20, 0x1A	; 26
     c8a:	5c e5       	ldi	r21, 0x5C	; 92
     c8c:	60 e0       	ldi	r22, 0x00	; 0
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
			
			sprintf( buf, "%d", min_velocity[4]);
     c94:	80 91 10 28 	lds	r24, 0x2810	; 0x802810 <min_velocity+0x8>
     c98:	90 91 11 28 	lds	r25, 0x2811	; 0x802811 <min_velocity+0x9>
     c9c:	9f 93       	push	r25
     c9e:	8f 93       	push	r24
     ca0:	8f ea       	ldi	r24, 0xAF	; 175
     ca2:	9b e5       	ldi	r25, 0x5B	; 91
     ca4:	9f 93       	push	r25
     ca6:	8f 93       	push	r24
     ca8:	8e 01       	movw	r16, r28
     caa:	0f 5f       	subi	r16, 0xFF	; 255
     cac:	1f 4f       	sbci	r17, 0xFF	; 255
     cae:	1f 93       	push	r17
     cb0:	0f 93       	push	r16
     cb2:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <sprintf>
			LCD_String_xy (1, 8, buf);
     cb6:	a8 01       	movw	r20, r16
     cb8:	68 e0       	ldi	r22, 0x08	; 8
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
     cc0:	2f e7       	ldi	r18, 0x7F	; 127
     cc2:	8a e1       	ldi	r24, 0x1A	; 26
     cc4:	96 e0       	ldi	r25, 0x06	; 6
     cc6:	21 50       	subi	r18, 0x01	; 1
     cc8:	80 40       	sbci	r24, 0x00	; 0
     cca:	90 40       	sbci	r25, 0x00	; 0
     ccc:	e1 f7       	brne	.-8      	; 0xcc6 <LCD_menu_change_value+0x3e2>
     cce:	00 c0       	rjmp	.+0      	; 0xcd0 <LCD_menu_change_value+0x3ec>
     cd0:	00 00       	nop
     cd2:	0f 90       	pop	r0
     cd4:	0f 90       	pop	r0
     cd6:	0f 90       	pop	r0
     cd8:	0f 90       	pop	r0
     cda:	0f 90       	pop	r0
     cdc:	0f 90       	pop	r0
     cde:	61 c0       	rjmp	.+194    	; 0xda2 <LCD_menu_change_value+0x4be>

			_delay_ms(100);
			break;
			case 11:
			note_value_changer(5,plusz_minus);
     ce0:	85 e0       	ldi	r24, 0x05	; 5
     ce2:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <note_value_changer>
			LCD_Command(0x01);
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_Command>
			LCD_String_xy (0, 4, "Red Note");
     cec:	4a e2       	ldi	r20, 0x2A	; 42
     cee:	5c e5       	ldi	r21, 0x5C	; 92
     cf0:	64 e0       	ldi	r22, 0x04	; 4
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
			sprintf( buf, "%d", note_C[5]);
     cf8:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <__data_start+0x5>
     cfc:	1f 92       	push	r1
     cfe:	8f 93       	push	r24
     d00:	8f ea       	ldi	r24, 0xAF	; 175
     d02:	9b e5       	ldi	r25, 0x5B	; 91
     d04:	9f 93       	push	r25
     d06:	8f 93       	push	r24
     d08:	8e 01       	movw	r16, r28
     d0a:	0f 5f       	subi	r16, 0xFF	; 255
     d0c:	1f 4f       	sbci	r17, 0xFF	; 255
     d0e:	1f 93       	push	r17
     d10:	0f 93       	push	r16
     d12:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <sprintf>
			LCD_String_xy (1, 8, buf);
     d16:	a8 01       	movw	r20, r16
     d18:	68 e0       	ldi	r22, 0x08	; 8
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
     d20:	2f e7       	ldi	r18, 0x7F	; 127
     d22:	8a e1       	ldi	r24, 0x1A	; 26
     d24:	96 e0       	ldi	r25, 0x06	; 6
     d26:	21 50       	subi	r18, 0x01	; 1
     d28:	80 40       	sbci	r24, 0x00	; 0
     d2a:	90 40       	sbci	r25, 0x00	; 0
     d2c:	e1 f7       	brne	.-8      	; 0xd26 <LCD_menu_change_value+0x442>
     d2e:	00 c0       	rjmp	.+0      	; 0xd30 <LCD_menu_change_value+0x44c>
     d30:	00 00       	nop
     d32:	0f 90       	pop	r0
     d34:	0f 90       	pop	r0
     d36:	0f 90       	pop	r0
     d38:	0f 90       	pop	r0
     d3a:	0f 90       	pop	r0
     d3c:	0f 90       	pop	r0
     d3e:	31 c0       	rjmp	.+98     	; 0xda2 <LCD_menu_change_value+0x4be>

			_delay_ms(100);
			break;
			case 12:
			velocity_value_changer(5,plusz_minus);
     d40:	85 e0       	ldi	r24, 0x05	; 5
     d42:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <velocity_value_changer>
			LCD_Command(0x01);
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_Command>
			LCD_String_xy (0, 0, "Red Velocity");
     d4c:	43 e3       	ldi	r20, 0x33	; 51
     d4e:	5c e5       	ldi	r21, 0x5C	; 92
     d50:	60 e0       	ldi	r22, 0x00	; 0
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
			
			sprintf( buf, "%d", min_velocity[5]);
     d58:	80 91 12 28 	lds	r24, 0x2812	; 0x802812 <min_velocity+0xa>
     d5c:	90 91 13 28 	lds	r25, 0x2813	; 0x802813 <min_velocity+0xb>
     d60:	9f 93       	push	r25
     d62:	8f 93       	push	r24
     d64:	8f ea       	ldi	r24, 0xAF	; 175
     d66:	9b e5       	ldi	r25, 0x5B	; 91
     d68:	9f 93       	push	r25
     d6a:	8f 93       	push	r24
     d6c:	8e 01       	movw	r16, r28
     d6e:	0f 5f       	subi	r16, 0xFF	; 255
     d70:	1f 4f       	sbci	r17, 0xFF	; 255
     d72:	1f 93       	push	r17
     d74:	0f 93       	push	r16
     d76:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <sprintf>
			LCD_String_xy (1, 8, buf);
     d7a:	a8 01       	movw	r20, r16
     d7c:	68 e0       	ldi	r22, 0x08	; 8
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
     d84:	2f e7       	ldi	r18, 0x7F	; 127
     d86:	8a e1       	ldi	r24, 0x1A	; 26
     d88:	96 e0       	ldi	r25, 0x06	; 6
     d8a:	21 50       	subi	r18, 0x01	; 1
     d8c:	80 40       	sbci	r24, 0x00	; 0
     d8e:	90 40       	sbci	r25, 0x00	; 0
     d90:	e1 f7       	brne	.-8      	; 0xd8a <LCD_menu_change_value+0x4a6>
     d92:	00 c0       	rjmp	.+0      	; 0xd94 <LCD_menu_change_value+0x4b0>
     d94:	00 00       	nop
     d96:	0f 90       	pop	r0
     d98:	0f 90       	pop	r0
     d9a:	0f 90       	pop	r0
     d9c:	0f 90       	pop	r0
     d9e:	0f 90       	pop	r0
     da0:	0f 90       	pop	r0

			_delay_ms(100);
			break;
			
		}
	}
     da2:	dc 5f       	subi	r29, 0xFC	; 252
     da4:	cd bf       	out	0x3d, r28	; 61
     da6:	de bf       	out	0x3e, r29	; 62
     da8:	df 91       	pop	r29
     daa:	cf 91       	pop	r28
     dac:	1f 91       	pop	r17
     dae:	0f 91       	pop	r16
     db0:	08 95       	ret

00000db2 <release_state>:
void release_state(uint8_t button)
{
	Button_Machines[button] = PushedDown_Wait;
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	fc 01       	movw	r30, r24
     db6:	ea 5d       	subi	r30, 0xDA	; 218
     db8:	f7 4d       	sbci	r31, 0xD7	; 215
     dba:	21 e0       	ldi	r18, 0x01	; 1
     dbc:	20 83       	st	Z, r18
	Button_Timers[button] = 200;
     dbe:	88 0f       	add	r24, r24
     dc0:	99 1f       	adc	r25, r25
     dc2:	fc 01       	movw	r30, r24
     dc4:	e6 5e       	subi	r30, 0xE6	; 230
     dc6:	f7 4d       	sbci	r31, 0xD7	; 215
     dc8:	88 ec       	ldi	r24, 0xC8	; 200
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	80 83       	st	Z, r24
     dce:	91 83       	std	Z+1, r25	; 0x01
     dd0:	08 95       	ret

00000dd2 <pusheddown_wait_state>:
}
void pusheddown_wait_state(uint8_t mask,char port, uint8_t button)
{
     dd2:	cf 93       	push	r28
	if (Button_Timers[0] < 1)
     dd4:	20 91 1a 28 	lds	r18, 0x281A	; 0x80281a <Button_Timers>
     dd8:	30 91 1b 28 	lds	r19, 0x281B	; 0x80281b <Button_Timers+0x1>
     ddc:	12 16       	cp	r1, r18
     dde:	13 06       	cpc	r1, r19
     de0:	b4 f0       	brlt	.+44     	; 0xe0e <pusheddown_wait_state+0x3c>
     de2:	c4 2f       	mov	r28, r20
			{
			if (button_down(mask, port))
     de4:	0e 94 88 00 	call	0x110	; 0x110 <button_down>
     de8:	88 23       	and	r24, r24
     dea:	61 f0       	breq	.+24     	; 0xe04 <pusheddown_wait_state+0x32>
				{
					Button_Machines[button] = PushedDown_DoingSomething;
     dec:	ec 2f       	mov	r30, r28
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	df 01       	movw	r26, r30
     df2:	aa 5d       	subi	r26, 0xDA	; 218
     df4:	b7 4d       	sbci	r27, 0xD7	; 215
     df6:	82 e0       	ldi	r24, 0x02	; 2
     df8:	8c 93       	st	X, r24
					BUTTON_FLAGS[button] = 1;
     dfa:	ee 5d       	subi	r30, 0xDE	; 222
     dfc:	f7 4d       	sbci	r31, 0xD7	; 215
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	80 83       	st	Z, r24
     e02:	05 c0       	rjmp	.+10     	; 0xe0e <pusheddown_wait_state+0x3c>
					
				}
				else
				{
					Button_Machines[button] = Released;
     e04:	ec 2f       	mov	r30, r28
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	ea 5d       	subi	r30, 0xDA	; 218
     e0a:	f7 4d       	sbci	r31, 0xD7	; 215
     e0c:	10 82       	st	Z, r1
					
				}
					
			}
}
     e0e:	cf 91       	pop	r28
     e10:	08 95       	ret

00000e12 <pusheddown_doingsomething_state>:
void pusheddown_doingsomething_state(uint8_t mask,char port, uint8_t button,char* State_Name )
{
     e12:	ff 92       	push	r15
     e14:	0f 93       	push	r16
     e16:	1f 93       	push	r17
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	08 2f       	mov	r16, r24
     e1e:	f6 2e       	mov	r15, r22
     e20:	14 2f       	mov	r17, r20
	if (BUTTON_FLAGS[button] == 1)
     e22:	c4 2f       	mov	r28, r20
     e24:	d0 e0       	ldi	r29, 0x00	; 0
     e26:	fe 01       	movw	r30, r28
     e28:	ee 5d       	subi	r30, 0xDE	; 222
     e2a:	f7 4d       	sbci	r31, 0xD7	; 215
     e2c:	80 81       	ld	r24, Z
     e2e:	81 30       	cpi	r24, 0x01	; 1
     e30:	89 f5       	brne	.+98     	; 0xe94 <pusheddown_doingsomething_state+0x82>
			{
				if(button == 0)
     e32:	41 11       	cpse	r20, r1
     e34:	0e c0       	rjmp	.+28     	; 0xe52 <pusheddown_doingsomething_state+0x40>
				{
					menu_state = (menu_state+1)%(13);
     e36:	80 91 37 28 	lds	r24, 0x2837	; 0x802837 <menu_state>
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	01 96       	adiw	r24, 0x01	; 1
     e3e:	6d e0       	ldi	r22, 0x0D	; 13
     e40:	70 e0       	ldi	r23, 0x00	; 0
     e42:	0e 94 ad 0a 	call	0x155a	; 0x155a <__divmodhi4>
     e46:	80 93 37 28 	sts	0x2837, r24	; 0x802837 <menu_state>
					LCD_menu(menu_state);
     e4a:	80 91 37 28 	lds	r24, 0x2837	; 0x802837 <menu_state>
     e4e:	0e 94 17 02 	call	0x42e	; 0x42e <LCD_menu>
					
				}
				if(button == 1)
     e52:	11 30       	cpi	r17, 0x01	; 1
     e54:	89 f4       	brne	.+34     	; 0xe78 <pusheddown_doingsomething_state+0x66>
				{
					if (menu_state>0)
     e56:	80 91 37 28 	lds	r24, 0x2837	; 0x802837 <menu_state>
     e5a:	88 23       	and	r24, r24
     e5c:	31 f0       	breq	.+12     	; 0xe6a <pusheddown_doingsomething_state+0x58>
					{
						menu_state = menu_state -1;
     e5e:	80 91 37 28 	lds	r24, 0x2837	; 0x802837 <menu_state>
     e62:	81 50       	subi	r24, 0x01	; 1
     e64:	80 93 37 28 	sts	0x2837, r24	; 0x802837 <menu_state>
     e68:	03 c0       	rjmp	.+6      	; 0xe70 <pusheddown_doingsomething_state+0x5e>
					}
					else
					{
						menu_state = 13;
     e6a:	8d e0       	ldi	r24, 0x0D	; 13
     e6c:	80 93 37 28 	sts	0x2837, r24	; 0x802837 <menu_state>
					}
					
					LCD_menu(menu_state);
     e70:	80 91 37 28 	lds	r24, 0x2837	; 0x802837 <menu_state>
     e74:	0e 94 17 02 	call	0x42e	; 0x42e <LCD_menu>
					
				}
				if (button == 2)
     e78:	12 30       	cpi	r17, 0x02	; 2
     e7a:	29 f4       	brne	.+10     	; 0xe86 <pusheddown_doingsomething_state+0x74>
				{
					LCD_menu_change_value(menu_state,0);
     e7c:	80 91 37 28 	lds	r24, 0x2837	; 0x802837 <menu_state>
     e80:	60 e0       	ldi	r22, 0x00	; 0
     e82:	0e 94 72 04 	call	0x8e4	; 0x8e4 <LCD_menu_change_value>
				}
				if (button == 3)
     e86:	13 30       	cpi	r17, 0x03	; 3
     e88:	29 f4       	brne	.+10     	; 0xe94 <pusheddown_doingsomething_state+0x82>
				{
					LCD_menu_change_value(menu_state,1);
     e8a:	80 91 37 28 	lds	r24, 0x2837	; 0x802837 <menu_state>
     e8e:	61 e0       	ldi	r22, 0x01	; 1
     e90:	0e 94 72 04 	call	0x8e4	; 0x8e4 <LCD_menu_change_value>
				}
			}
			BUTTON_FLAGS[button] = 0;
     e94:	fe 01       	movw	r30, r28
     e96:	ee 5d       	subi	r30, 0xDE	; 222
     e98:	f7 4d       	sbci	r31, 0xD7	; 215
     e9a:	10 82       	st	Z, r1
			if (!(button_down(mask, port)))
     e9c:	6f 2d       	mov	r22, r15
     e9e:	80 2f       	mov	r24, r16
     ea0:	0e 94 88 00 	call	0x110	; 0x110 <button_down>
     ea4:	81 11       	cpse	r24, r1
     ea6:	0d c0       	rjmp	.+26     	; 0xec2 <pusheddown_doingsomething_state+0xb0>
			{
				Button_Timers[button] = 200;
     ea8:	fe 01       	movw	r30, r28
     eaa:	ee 0f       	add	r30, r30
     eac:	ff 1f       	adc	r31, r31
     eae:	e6 5e       	subi	r30, 0xE6	; 230
     eb0:	f7 4d       	sbci	r31, 0xD7	; 215
     eb2:	88 ec       	ldi	r24, 0xC8	; 200
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	80 83       	st	Z, r24
     eb8:	91 83       	std	Z+1, r25	; 0x01
				Button_Machines[button] = Released_Wait;
     eba:	ca 5d       	subi	r28, 0xDA	; 218
     ebc:	d7 4d       	sbci	r29, 0xD7	; 215
     ebe:	83 e0       	ldi	r24, 0x03	; 3
     ec0:	88 83       	st	Y, r24
			}
}
     ec2:	df 91       	pop	r29
     ec4:	cf 91       	pop	r28
     ec6:	1f 91       	pop	r17
     ec8:	0f 91       	pop	r16
     eca:	ff 90       	pop	r15
     ecc:	08 95       	ret

00000ece <released_wait_state>:
void released_wait_state(uint8_t mask,char port, uint8_t button)
{
     ece:	cf 93       	push	r28
     ed0:	df 93       	push	r29
	if (Button_Timers[button] < 1)
     ed2:	c4 2f       	mov	r28, r20
     ed4:	d0 e0       	ldi	r29, 0x00	; 0
     ed6:	fe 01       	movw	r30, r28
     ed8:	ee 0f       	add	r30, r30
     eda:	ff 1f       	adc	r31, r31
     edc:	e6 5e       	subi	r30, 0xE6	; 230
     ede:	f7 4d       	sbci	r31, 0xD7	; 215
     ee0:	20 81       	ld	r18, Z
     ee2:	31 81       	ldd	r19, Z+1	; 0x01
     ee4:	12 16       	cp	r1, r18
     ee6:	13 06       	cpc	r1, r19
     ee8:	64 f0       	brlt	.+24     	; 0xf02 <released_wait_state+0x34>
			{
				if (button_down(mask, port))
     eea:	0e 94 88 00 	call	0x110	; 0x110 <button_down>
     eee:	88 23       	and	r24, r24
     ef0:	29 f0       	breq	.+10     	; 0xefc <released_wait_state+0x2e>
				{
					Button_Machines[button] = PushedDown_DoingSomething;
     ef2:	ca 5d       	subi	r28, 0xDA	; 218
     ef4:	d7 4d       	sbci	r29, 0xD7	; 215
     ef6:	82 e0       	ldi	r24, 0x02	; 2
     ef8:	88 83       	st	Y, r24
     efa:	03 c0       	rjmp	.+6      	; 0xf02 <released_wait_state+0x34>
				}
				else
				{
					Button_Machines[button] = Released;
     efc:	ca 5d       	subi	r28, 0xDA	; 218
     efe:	d7 4d       	sbci	r29, 0xD7	; 215
     f00:	18 82       	st	Y, r1
				}
			}
}
     f02:	df 91       	pop	r29
     f04:	cf 91       	pop	r28
     f06:	08 95       	ret

00000f08 <main>:
enum states{Default_state, There_was_hit};
enum states state[6] = {Default_state,Default_state,Default_state,Default_state,Default_state,Default_state};
int main(void)
{
	// Init clock source.
	ccp_write_io((uint8_t*)&CLKCTRL.MCLKCTRLB, 0x00);
     f08:	60 e0       	ldi	r22, 0x00	; 0
     f0a:	81 e6       	ldi	r24, 0x61	; 97
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <ccp_write_io>
	
	// Set PORTMUX.
	PORTMUX.USARTROUTEA |= PORTMUX_USART3_ALT1_gc;
     f12:	e0 ee       	ldi	r30, 0xE0	; 224
     f14:	f5 e0       	ldi	r31, 0x05	; 5
     f16:	82 81       	ldd	r24, Z+2	; 0x02
     f18:	80 64       	ori	r24, 0x40	; 64
     f1a:	82 83       	std	Z+2, r24	; 0x02
	
	// Set port directions.
	PORTB.DIR = PIN4_bm;
     f1c:	80 e1       	ldi	r24, 0x10	; 16
     f1e:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <__TEXT_REGION_LENGTH__+0x7f4420>
	//PORTD.DIR = PIN6_bm;
	/* Replace with your application code */
	PORTD.OUT = 0x00;
     f22:	00 e6       	ldi	r16, 0x60	; 96
     f24:	14 e0       	ldi	r17, 0x04	; 4
     f26:	f8 01       	movw	r30, r16
     f28:	14 82       	std	Z+4, r1	; 0x04
	
	// Init UART.
	USART3.BAUD = 313;
     f2a:	e0 e6       	ldi	r30, 0x60	; 96
     f2c:	f8 e0       	ldi	r31, 0x08	; 8
     f2e:	89 e3       	ldi	r24, 0x39	; 57
     f30:	91 e0       	ldi	r25, 0x01	; 1
     f32:	80 87       	std	Z+8, r24	; 0x08
     f34:	91 87       	std	Z+9, r25	; 0x09
	USART3.CTRLB = USART_TXEN_bm;
     f36:	80 e4       	ldi	r24, 0x40	; 64
     f38:	86 83       	std	Z+6, r24	; 0x06
	
	// Init TCB0 timer.
	TCB0.INTCTRL = TCB_CAPT_bm;
     f3a:	e0 e8       	ldi	r30, 0x80	; 128
     f3c:	fa e0       	ldi	r31, 0x0A	; 10
     f3e:	c1 e0       	ldi	r28, 0x01	; 1
     f40:	c5 83       	std	Z+5, r28	; 0x05
	TCB0.CNT = 0;
     f42:	12 86       	std	Z+10, r1	; 0x0a
     f44:	13 86       	std	Z+11, r1	; 0x0b
	TCB0.CCMP = 330;
     f46:	8a e4       	ldi	r24, 0x4A	; 74
     f48:	91 e0       	ldi	r25, 0x01	; 1
     f4a:	84 87       	std	Z+12, r24	; 0x0c
     f4c:	95 87       	std	Z+13, r25	; 0x0d
	TCB0.CTRLA = TCB_ENABLE_bm;
     f4e:	c0 83       	st	Z, r28
	
	//Print HELLO LCD
	LCD_Init();
     f50:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_Init>
	LCD_String("hello");
     f54:	80 e4       	ldi	r24, 0x40	; 64
     f56:	9c e5       	ldi	r25, 0x5C	; 92
     f58:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_String>
	LCD_Command(0x01);              /* Clear display screen*/
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_Command>
	LCD_String_xy (0, 5, "hello");
     f62:	40 e4       	ldi	r20, 0x40	; 64
     f64:	5c e5       	ldi	r21, 0x5C	; 92
     f66:	65 e0       	ldi	r22, 0x05	; 5
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
	LCD_String_xy (1, 5, "world");
     f6e:	46 e4       	ldi	r20, 0x46	; 70
     f70:	5c e5       	ldi	r21, 0x5C	; 92
     f72:	65 e0       	ldi	r22, 0x05	; 5
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_String_xy>
	LCD_Command(0x01); 
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_Command>
	//LCD_Command(0x01);              /* Clear display screen*/
	//BUTTON INIC
	debounce_init();
     f80:	0e 94 99 00 	call	0x132	; 0x132 <debounce_init>
	//ADC
	//VDD 1 << 4
	PORTD.PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;
     f84:	84 e0       	ldi	r24, 0x04	; 4
     f86:	f8 01       	movw	r30, r16
     f88:	80 8b       	std	Z+16, r24	; 0x10
	PORTD.PIN1CTRL = PORT_ISC_INPUT_DISABLE_gc;
     f8a:	81 8b       	std	Z+17, r24	; 0x11
	ADC0.CTRLC = ADC_SAMPCAP_bm | ADC_REFSEL0_bm | ADC_PRESC_DIV16_gc;
     f8c:	e0 e0       	ldi	r30, 0x00	; 0
     f8e:	f6 e0       	ldi	r31, 0x06	; 6
     f90:	83 e5       	ldi	r24, 0x53	; 83
     f92:	82 83       	std	Z+2, r24	; 0x02
	ADC0.MUXPOS = ADC_MUXPOS_AIN0_gc;
     f94:	16 82       	std	Z+6, r1	; 0x06
	ADC0.INTCTRL = ADC_RESRDY_bm;
     f96:	c2 87       	std	Z+10, r28	; 0x0a
	ADC0.CTRLA = ADC_ENABLE_bm;
     f98:	c0 83       	st	Z, r28

	//ADC0.CTRLC = ADC_REFSEL0_bm; 
	// Enable global interrupts
    sei();
     f9a:	78 94       	sei
		//IDe hívom a gombot
		//ELsõ állapt az TIMER állítása
		//GOMB lenyomva/Vissza
		//Utolsó állapot a TIMER ÁLLÍtása
		//GOmb felengedve/vissza
		switch(Button_Machines[0])
     f9c:	80 91 26 28 	lds	r24, 0x2826	; 0x802826 <Button_Machines>
     fa0:	81 30       	cpi	r24, 0x01	; 1
     fa2:	81 f0       	breq	.+32     	; 0xfc4 <main+0xbc>
     fa4:	28 f0       	brcs	.+10     	; 0xfb0 <main+0xa8>
     fa6:	82 30       	cpi	r24, 0x02	; 2
     fa8:	99 f0       	breq	.+38     	; 0xfd0 <main+0xc8>
     faa:	83 30       	cpi	r24, 0x03	; 3
     fac:	c9 f0       	breq	.+50     	; 0xfe0 <main+0xd8>
     fae:	1d c0       	rjmp	.+58     	; 0xfea <main+0xe2>
		{			
			case Released:
			if (button_down(BUTTON1_MASK, 'E'))
     fb0:	65 e4       	ldi	r22, 0x45	; 69
     fb2:	84 e0       	ldi	r24, 0x04	; 4
     fb4:	0e 94 88 00 	call	0x110	; 0x110 <button_down>
     fb8:	88 23       	and	r24, r24
     fba:	c9 f0       	breq	.+50     	; 0xfee <main+0xe6>
			{      
				release_state(0);
     fbc:	80 e0       	ldi	r24, 0x00	; 0
     fbe:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <release_state>
     fc2:	15 c0       	rjmp	.+42     	; 0xfee <main+0xe6>
			}
			break;
			case PushedDown_Wait:
			pusheddown_wait_state(BUTTON1_MASK,'E',0);
     fc4:	40 e0       	ldi	r20, 0x00	; 0
     fc6:	65 e4       	ldi	r22, 0x45	; 69
     fc8:	84 e0       	ldi	r24, 0x04	; 4
     fca:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <pusheddown_wait_state>
			break;
     fce:	0f c0       	rjmp	.+30     	; 0xfee <main+0xe6>
			case PushedDown_DoingSomething:
			pusheddown_doingsomething_state(BUTTON1_MASK, 'E', 0,"Left" );
     fd0:	2c e4       	ldi	r18, 0x4C	; 76
     fd2:	3c e5       	ldi	r19, 0x5C	; 92
     fd4:	40 e0       	ldi	r20, 0x00	; 0
     fd6:	65 e4       	ldi	r22, 0x45	; 69
     fd8:	84 e0       	ldi	r24, 0x04	; 4
     fda:	0e 94 09 07 	call	0xe12	; 0xe12 <pusheddown_doingsomething_state>
			break;
     fde:	07 c0       	rjmp	.+14     	; 0xfee <main+0xe6>
			case Released_Wait:
			released_wait_state(BUTTON1_MASK,'E', 0);
     fe0:	40 e0       	ldi	r20, 0x00	; 0
     fe2:	65 e4       	ldi	r22, 0x45	; 69
     fe4:	84 e0       	ldi	r24, 0x04	; 4
     fe6:	0e 94 67 07 	call	0xece	; 0xece <released_wait_state>
			default:
			Button_Machines[0] = Released;
     fea:	10 92 26 28 	sts	0x2826, r1	; 0x802826 <Button_Machines>
			break;
				
		}
	
		switch(Button_Machines[1])
     fee:	80 91 27 28 	lds	r24, 0x2827	; 0x802827 <Button_Machines+0x1>
     ff2:	81 30       	cpi	r24, 0x01	; 1
     ff4:	81 f0       	breq	.+32     	; 0x1016 <main+0x10e>
     ff6:	28 f0       	brcs	.+10     	; 0x1002 <main+0xfa>
     ff8:	82 30       	cpi	r24, 0x02	; 2
     ffa:	99 f0       	breq	.+38     	; 0x1022 <main+0x11a>
     ffc:	83 30       	cpi	r24, 0x03	; 3
     ffe:	c9 f0       	breq	.+50     	; 0x1032 <main+0x12a>
    1000:	1d c0       	rjmp	.+58     	; 0x103c <main+0x134>
		{			
			case Released:
			if (button_down(BUTTON2_MASK, 'E'))
    1002:	65 e4       	ldi	r22, 0x45	; 69
    1004:	82 e0       	ldi	r24, 0x02	; 2
    1006:	0e 94 88 00 	call	0x110	; 0x110 <button_down>
    100a:	88 23       	and	r24, r24
    100c:	c9 f0       	breq	.+50     	; 0x1040 <main+0x138>
			{      
				release_state(1);
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <release_state>
    1014:	15 c0       	rjmp	.+42     	; 0x1040 <main+0x138>
			}
			break;
			case PushedDown_Wait:
			pusheddown_wait_state(BUTTON2_MASK,'E',1);
    1016:	41 e0       	ldi	r20, 0x01	; 1
    1018:	65 e4       	ldi	r22, 0x45	; 69
    101a:	82 e0       	ldi	r24, 0x02	; 2
    101c:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <pusheddown_wait_state>
			break;
    1020:	0f c0       	rjmp	.+30     	; 0x1040 <main+0x138>
			case PushedDown_DoingSomething:
			pusheddown_doingsomething_state(BUTTON2_MASK, 'E', 1,"Right" );
    1022:	21 e5       	ldi	r18, 0x51	; 81
    1024:	3c e5       	ldi	r19, 0x5C	; 92
    1026:	41 e0       	ldi	r20, 0x01	; 1
    1028:	65 e4       	ldi	r22, 0x45	; 69
    102a:	82 e0       	ldi	r24, 0x02	; 2
    102c:	0e 94 09 07 	call	0xe12	; 0xe12 <pusheddown_doingsomething_state>
			break;
    1030:	07 c0       	rjmp	.+14     	; 0x1040 <main+0x138>
			case Released_Wait:
			released_wait_state(BUTTON2_MASK,'E', 1);
    1032:	41 e0       	ldi	r20, 0x01	; 1
    1034:	65 e4       	ldi	r22, 0x45	; 69
    1036:	82 e0       	ldi	r24, 0x02	; 2
    1038:	0e 94 67 07 	call	0xece	; 0xece <released_wait_state>
			default:
			Button_Machines[1] = Released;
    103c:	10 92 27 28 	sts	0x2827, r1	; 0x802827 <Button_Machines+0x1>
			break;
				
		}
		switch(Button_Machines[2])
    1040:	80 91 28 28 	lds	r24, 0x2828	; 0x802828 <Button_Machines+0x2>
    1044:	81 30       	cpi	r24, 0x01	; 1
    1046:	81 f0       	breq	.+32     	; 0x1068 <main+0x160>
    1048:	28 f0       	brcs	.+10     	; 0x1054 <main+0x14c>
    104a:	82 30       	cpi	r24, 0x02	; 2
    104c:	99 f0       	breq	.+38     	; 0x1074 <main+0x16c>
    104e:	83 30       	cpi	r24, 0x03	; 3
    1050:	c9 f0       	breq	.+50     	; 0x1084 <main+0x17c>
    1052:	1d c0       	rjmp	.+58     	; 0x108e <main+0x186>
		{			
			case Released:
			if (button_down(BUTTON3_MASK, 'E'))
    1054:	65 e4       	ldi	r22, 0x45	; 69
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	0e 94 88 00 	call	0x110	; 0x110 <button_down>
    105c:	88 23       	and	r24, r24
    105e:	c9 f0       	breq	.+50     	; 0x1092 <main+0x18a>
			{      
				release_state(2);
    1060:	82 e0       	ldi	r24, 0x02	; 2
    1062:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <release_state>
    1066:	15 c0       	rjmp	.+42     	; 0x1092 <main+0x18a>
			}
			break;
			case PushedDown_Wait:
			pusheddown_wait_state(BUTTON3_MASK,'E',2);
    1068:	42 e0       	ldi	r20, 0x02	; 2
    106a:	65 e4       	ldi	r22, 0x45	; 69
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <pusheddown_wait_state>
			break;
    1072:	0f c0       	rjmp	.+30     	; 0x1092 <main+0x18a>
			case PushedDown_DoingSomething:
			pusheddown_doingsomething_state(BUTTON3_MASK, 'E', 2,"Down" );
    1074:	27 e5       	ldi	r18, 0x57	; 87
    1076:	3c e5       	ldi	r19, 0x5C	; 92
    1078:	42 e0       	ldi	r20, 0x02	; 2
    107a:	65 e4       	ldi	r22, 0x45	; 69
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	0e 94 09 07 	call	0xe12	; 0xe12 <pusheddown_doingsomething_state>
			break;
    1082:	07 c0       	rjmp	.+14     	; 0x1092 <main+0x18a>
			case Released_Wait:
			released_wait_state(BUTTON2_MASK,'E', 2);
    1084:	42 e0       	ldi	r20, 0x02	; 2
    1086:	65 e4       	ldi	r22, 0x45	; 69
    1088:	82 e0       	ldi	r24, 0x02	; 2
    108a:	0e 94 67 07 	call	0xece	; 0xece <released_wait_state>
			default:
			Button_Machines[2] = Released;
    108e:	10 92 28 28 	sts	0x2828, r1	; 0x802828 <Button_Machines+0x2>
			break;
				
		}
		switch(Button_Machines[3])
    1092:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <Button_Machines+0x3>
    1096:	81 30       	cpi	r24, 0x01	; 1
    1098:	89 f0       	breq	.+34     	; 0x10bc <main+0x1b4>
    109a:	28 f0       	brcs	.+10     	; 0x10a6 <main+0x19e>
    109c:	82 30       	cpi	r24, 0x02	; 2
    109e:	a1 f0       	breq	.+40     	; 0x10c8 <main+0x1c0>
    10a0:	83 30       	cpi	r24, 0x03	; 3
    10a2:	d1 f0       	breq	.+52     	; 0x10d8 <main+0x1d0>
    10a4:	1e c0       	rjmp	.+60     	; 0x10e2 <main+0x1da>
		{			
			case Released:
			if (button_down(BUTTON4_MASK, 'B'))
    10a6:	62 e4       	ldi	r22, 0x42	; 66
    10a8:	82 e0       	ldi	r24, 0x02	; 2
    10aa:	0e 94 88 00 	call	0x110	; 0x110 <button_down>
    10ae:	88 23       	and	r24, r24
    10b0:	09 f4       	brne	.+2      	; 0x10b4 <main+0x1ac>
    10b2:	74 cf       	rjmp	.-280    	; 0xf9c <main+0x94>
			{      
				release_state(3);
    10b4:	83 e0       	ldi	r24, 0x03	; 3
    10b6:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <release_state>
    10ba:	70 cf       	rjmp	.-288    	; 0xf9c <main+0x94>
			}
			break;
			case PushedDown_Wait:
			pusheddown_wait_state(BUTTON4_MASK, 'B',3);
    10bc:	43 e0       	ldi	r20, 0x03	; 3
    10be:	62 e4       	ldi	r22, 0x42	; 66
    10c0:	82 e0       	ldi	r24, 0x02	; 2
    10c2:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <pusheddown_wait_state>
			break;
    10c6:	6a cf       	rjmp	.-300    	; 0xf9c <main+0x94>
			case PushedDown_DoingSomething:
			pusheddown_doingsomething_state(BUTTON4_MASK, 'B',3,"Up" );
    10c8:	2c e5       	ldi	r18, 0x5C	; 92
    10ca:	3c e5       	ldi	r19, 0x5C	; 92
    10cc:	43 e0       	ldi	r20, 0x03	; 3
    10ce:	62 e4       	ldi	r22, 0x42	; 66
    10d0:	82 e0       	ldi	r24, 0x02	; 2
    10d2:	0e 94 09 07 	call	0xe12	; 0xe12 <pusheddown_doingsomething_state>
			break;
    10d6:	62 cf       	rjmp	.-316    	; 0xf9c <main+0x94>
			case Released_Wait:
			released_wait_state(BUTTON4_MASK, 'B',3);
    10d8:	43 e0       	ldi	r20, 0x03	; 3
    10da:	62 e4       	ldi	r22, 0x42	; 66
    10dc:	82 e0       	ldi	r24, 0x02	; 2
    10de:	0e 94 67 07 	call	0xece	; 0xece <released_wait_state>
			default:
			Button_Machines[3] = Released;
    10e2:	10 92 29 28 	sts	0x2829, r1	; 0x802829 <Button_Machines+0x3>
			break;
    10e6:	5a cf       	rjmp	.-332    	; 0xf9c <main+0x94>

000010e8 <__vector_12>:
		
	}
	
}

ISR(TCB0_INT_vect){
    10e8:	1f 92       	push	r1
    10ea:	0f 92       	push	r0
    10ec:	0f b6       	in	r0, 0x3f	; 63
    10ee:	0f 92       	push	r0
    10f0:	11 24       	eor	r1, r1
    10f2:	8f 93       	push	r24
    10f4:	9f 93       	push	r25
    10f6:	ef 93       	push	r30
    10f8:	ff 93       	push	r31
	TCB0.INTFLAGS = TCB_CAPT_bm;
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__TEXT_REGION_LENGTH__+0x7f4a86>
	if (Button_Timers[0]>0)
    1100:	80 91 1a 28 	lds	r24, 0x281A	; 0x80281a <Button_Timers>
    1104:	90 91 1b 28 	lds	r25, 0x281B	; 0x80281b <Button_Timers+0x1>
    1108:	18 16       	cp	r1, r24
    110a:	19 06       	cpc	r1, r25
    110c:	3c f4       	brge	.+14     	; 0x111c <__vector_12+0x34>
	{
		Button_Timers[0] --;
    110e:	ea e1       	ldi	r30, 0x1A	; 26
    1110:	f8 e2       	ldi	r31, 0x28	; 40
    1112:	80 81       	ld	r24, Z
    1114:	91 81       	ldd	r25, Z+1	; 0x01
    1116:	01 97       	sbiw	r24, 0x01	; 1
    1118:	80 83       	st	Z, r24
    111a:	91 83       	std	Z+1, r25	; 0x01
	}
	if (Button_Timers[1]>0)
    111c:	80 91 1c 28 	lds	r24, 0x281C	; 0x80281c <Button_Timers+0x2>
    1120:	90 91 1d 28 	lds	r25, 0x281D	; 0x80281d <Button_Timers+0x3>
    1124:	18 16       	cp	r1, r24
    1126:	19 06       	cpc	r1, r25
    1128:	3c f4       	brge	.+14     	; 0x1138 <__vector_12+0x50>
	{
		Button_Timers[1] --;
    112a:	ea e1       	ldi	r30, 0x1A	; 26
    112c:	f8 e2       	ldi	r31, 0x28	; 40
    112e:	82 81       	ldd	r24, Z+2	; 0x02
    1130:	93 81       	ldd	r25, Z+3	; 0x03
    1132:	01 97       	sbiw	r24, 0x01	; 1
    1134:	82 83       	std	Z+2, r24	; 0x02
    1136:	93 83       	std	Z+3, r25	; 0x03
	}
	if (Button_Timers[2]>0)
    1138:	80 91 1e 28 	lds	r24, 0x281E	; 0x80281e <Button_Timers+0x4>
    113c:	90 91 1f 28 	lds	r25, 0x281F	; 0x80281f <Button_Timers+0x5>
    1140:	18 16       	cp	r1, r24
    1142:	19 06       	cpc	r1, r25
    1144:	3c f4       	brge	.+14     	; 0x1154 <__vector_12+0x6c>
	{
		Button_Timers[2] --;
    1146:	ea e1       	ldi	r30, 0x1A	; 26
    1148:	f8 e2       	ldi	r31, 0x28	; 40
    114a:	84 81       	ldd	r24, Z+4	; 0x04
    114c:	95 81       	ldd	r25, Z+5	; 0x05
    114e:	01 97       	sbiw	r24, 0x01	; 1
    1150:	84 83       	std	Z+4, r24	; 0x04
    1152:	95 83       	std	Z+5, r25	; 0x05
	}
	if (Button_Timers[3]>0)
    1154:	80 91 20 28 	lds	r24, 0x2820	; 0x802820 <Button_Timers+0x6>
    1158:	90 91 21 28 	lds	r25, 0x2821	; 0x802821 <Button_Timers+0x7>
    115c:	18 16       	cp	r1, r24
    115e:	19 06       	cpc	r1, r25
    1160:	3c f4       	brge	.+14     	; 0x1170 <__vector_12+0x88>
	{
		Button_Timers[3] --;
    1162:	ea e1       	ldi	r30, 0x1A	; 26
    1164:	f8 e2       	ldi	r31, 0x28	; 40
    1166:	86 81       	ldd	r24, Z+6	; 0x06
    1168:	97 81       	ldd	r25, Z+7	; 0x07
    116a:	01 97       	sbiw	r24, 0x01	; 1
    116c:	86 83       	std	Z+6, r24	; 0x06
    116e:	97 83       	std	Z+7, r25	; 0x07
	}
	switch(channel_looker)
    1170:	80 91 36 28 	lds	r24, 0x2836	; 0x802836 <channel_looker>
    1174:	88 23       	and	r24, r24
    1176:	19 f0       	breq	.+6      	; 0x117e <__vector_12+0x96>
    1178:	81 30       	cpi	r24, 0x01	; 1
    117a:	21 f0       	breq	.+8      	; 0x1184 <__vector_12+0x9c>
    117c:	06 c0       	rjmp	.+12     	; 0x118a <__vector_12+0xa2>
	{
		case 0:
		ADC0.MUXPOS = ADC_MUXPOS_AIN0_gc;
    117e:	10 92 06 06 	sts	0x0606, r1	; 0x800606 <__TEXT_REGION_LENGTH__+0x7f4606>
		
		break;
    1182:	03 c0       	rjmp	.+6      	; 0x118a <__vector_12+0xa2>
		
		case 1:
		ADC0.MUXPOS = ADC_MUXPOS_AIN1_gc;
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7f4606>
		//ADC0.MUXPOS = ADC_MUXPOS_AIN5_gc;
		break;
		
		//Ide egy iemr változó mindegyik gombra És ezt a Timert csökkentem de 0 alá ne menjen
	}
	ADC0.COMMAND = ADC_STCONV_bm;
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f4608>
}
    1190:	ff 91       	pop	r31
    1192:	ef 91       	pop	r30
    1194:	9f 91       	pop	r25
    1196:	8f 91       	pop	r24
    1198:	0f 90       	pop	r0
    119a:	0f be       	out	0x3f, r0	; 63
    119c:	0f 90       	pop	r0
    119e:	1f 90       	pop	r1
    11a0:	18 95       	reti

000011a2 <put_to_buffer>:
	}
	USART3.TXDATAL = note_volume;
}*/

void put_to_buffer(uint8_t note_switch,uint8_t note_NOTE,uint8_t note_volume)
{
    11a2:	cf 93       	push	r28
    11a4:	c6 2f       	mov	r28, r22
	if(bufferLength + 3 > SIZE_OF_BUFFER)
    11a6:	20 91 3a 28 	lds	r18, 0x283A	; 0x80283a <bufferLength>
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	2d 5f       	subi	r18, 0xFD	; 253
    11ae:	3f 4f       	sbci	r19, 0xFF	; 255
    11b0:	26 31       	cpi	r18, 0x16	; 22
    11b2:	31 05       	cpc	r19, r1
    11b4:	cc f5       	brge	.+114    	; 0x1228 <put_to_buffer+0x86>
	 {
		 return;
	 }
	 
	 buffer[writeIndex] = note_switch;
    11b6:	e0 91 38 28 	lds	r30, 0x2838	; 0x802838 <writeIndex>
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	e3 52       	subi	r30, 0x23	; 35
    11be:	f6 4d       	sbci	r31, 0xD6	; 214
    11c0:	80 83       	st	Z, r24
	 writeIndex = (writeIndex + 1)%(SIZE_OF_BUFFER);
    11c2:	80 91 38 28 	lds	r24, 0x2838	; 0x802838 <writeIndex>
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	01 96       	adiw	r24, 0x01	; 1
    11ca:	25 e1       	ldi	r18, 0x15	; 21
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	b9 01       	movw	r22, r18
    11d0:	0e 94 ad 0a 	call	0x155a	; 0x155a <__divmodhi4>
    11d4:	80 93 38 28 	sts	0x2838, r24	; 0x802838 <writeIndex>
	 buffer[writeIndex] = note_NOTE;
    11d8:	e0 91 38 28 	lds	r30, 0x2838	; 0x802838 <writeIndex>
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	e3 52       	subi	r30, 0x23	; 35
    11e0:	f6 4d       	sbci	r31, 0xD6	; 214
    11e2:	c0 83       	st	Z, r28
	 writeIndex = (writeIndex + 1)%(SIZE_OF_BUFFER);
    11e4:	80 91 38 28 	lds	r24, 0x2838	; 0x802838 <writeIndex>
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	01 96       	adiw	r24, 0x01	; 1
    11ec:	b9 01       	movw	r22, r18
    11ee:	0e 94 ad 0a 	call	0x155a	; 0x155a <__divmodhi4>
    11f2:	80 93 38 28 	sts	0x2838, r24	; 0x802838 <writeIndex>
	 buffer[writeIndex] = note_volume;
    11f6:	e0 91 38 28 	lds	r30, 0x2838	; 0x802838 <writeIndex>
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	e3 52       	subi	r30, 0x23	; 35
    11fe:	f6 4d       	sbci	r31, 0xD6	; 214
    1200:	40 83       	st	Z, r20
	 writeIndex = (writeIndex + 1)%(SIZE_OF_BUFFER);
    1202:	80 91 38 28 	lds	r24, 0x2838	; 0x802838 <writeIndex>
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	01 96       	adiw	r24, 0x01	; 1
    120a:	b9 01       	movw	r22, r18
    120c:	0e 94 ad 0a 	call	0x155a	; 0x155a <__divmodhi4>
    1210:	80 93 38 28 	sts	0x2838, r24	; 0x802838 <writeIndex>
	 bufferLength += 3;
    1214:	80 91 3a 28 	lds	r24, 0x283A	; 0x80283a <bufferLength>
    1218:	8d 5f       	subi	r24, 0xFD	; 253
    121a:	80 93 3a 28 	sts	0x283A, r24	; 0x80283a <bufferLength>
	 USART3.CTRLA |= USART_DREIE_bm; 
    121e:	e0 e6       	ldi	r30, 0x60	; 96
    1220:	f8 e0       	ldi	r31, 0x08	; 8
    1222:	85 81       	ldd	r24, Z+5	; 0x05
    1224:	80 62       	ori	r24, 0x20	; 32
    1226:	85 83       	std	Z+5, r24	; 0x05
}
    1228:	cf 91       	pop	r28
    122a:	08 95       	ret

0000122c <__vector_22>:
		//Ide egy iemr változó mindegyik gombra És ezt a Timert csökkentem de 0 alá ne menjen
	}
	ADC0.COMMAND = ADC_STCONV_bm;
}
ISR(ADC0_RESRDY_vect)
{
    122c:	1f 92       	push	r1
    122e:	0f 92       	push	r0
    1230:	0f b6       	in	r0, 0x3f	; 63
    1232:	0f 92       	push	r0
    1234:	11 24       	eor	r1, r1
    1236:	2f 93       	push	r18
    1238:	3f 93       	push	r19
    123a:	4f 93       	push	r20
    123c:	5f 93       	push	r21
    123e:	6f 93       	push	r22
    1240:	7f 93       	push	r23
    1242:	8f 93       	push	r24
    1244:	9f 93       	push	r25
    1246:	af 93       	push	r26
    1248:	bf 93       	push	r27
    124a:	ef 93       	push	r30
    124c:	ff 93       	push	r31
	
	uint16_t sample = ADC0.RES;
    124e:	20 91 10 06 	lds	r18, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7f4610>
    1252:	30 91 11 06 	lds	r19, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7f4611>
	}
	else
	{
		n = 0;
	}*/
	switch(state[channel_looker])
    1256:	e0 91 36 28 	lds	r30, 0x2836	; 0x802836 <channel_looker>
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	ec 5e       	subi	r30, 0xEC	; 236
    125e:	f7 4d       	sbci	r31, 0xD7	; 215
    1260:	80 81       	ld	r24, Z
    1262:	88 23       	and	r24, r24
    1264:	21 f0       	breq	.+8      	; 0x126e <__vector_22+0x42>
    1266:	81 30       	cpi	r24, 0x01	; 1
    1268:	09 f4       	brne	.+2      	; 0x126c <__vector_22+0x40>
    126a:	ab c0       	rjmp	.+342    	; 0x13c2 <__vector_22+0x196>
    126c:	28 c1       	rjmp	.+592    	; 0x14be <__vector_22+0x292>
	{
		case Default_state:
		if (sample > min_velocity[channel_looker]){
    126e:	e0 91 36 28 	lds	r30, 0x2836	; 0x802836 <channel_looker>
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	ee 0f       	add	r30, r30
    1276:	ff 1f       	adc	r31, r31
    1278:	e8 5f       	subi	r30, 0xF8	; 248
    127a:	f7 4d       	sbci	r31, 0xD7	; 215
    127c:	80 81       	ld	r24, Z
    127e:	91 81       	ldd	r25, Z+1	; 0x01
    1280:	82 17       	cp	r24, r18
    1282:	93 07       	cpc	r25, r19
    1284:	88 f4       	brcc	.+34     	; 0x12a8 <__vector_22+0x7c>
			actual_max_velo[channel_looker] = sample;
    1286:	e0 91 36 28 	lds	r30, 0x2836	; 0x802836 <channel_looker>
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	ee 0f       	add	r30, r30
    128e:	ff 1f       	adc	r31, r31
    1290:	e5 53       	subi	r30, 0x35	; 53
    1292:	f6 4d       	sbci	r31, 0xD6	; 214
    1294:	20 83       	st	Z, r18
    1296:	31 83       	std	Z+1, r19	; 0x01
			state[channel_looker] = There_was_hit;
    1298:	e0 91 36 28 	lds	r30, 0x2836	; 0x802836 <channel_looker>
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	ec 5e       	subi	r30, 0xEC	; 236
    12a0:	f7 4d       	sbci	r31, 0xD7	; 215
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	80 83       	st	Z, r24
    12a6:	0e c0       	rjmp	.+28     	; 0x12c4 <__vector_22+0x98>
		}
		else
		{
			channel_looker = (channel_looker+1)%(2);
    12a8:	80 91 36 28 	lds	r24, 0x2836	; 0x802836 <channel_looker>
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	01 96       	adiw	r24, 0x01	; 1
    12b0:	81 70       	andi	r24, 0x01	; 1
    12b2:	90 78       	andi	r25, 0x80	; 128
    12b4:	99 23       	and	r25, r25
    12b6:	24 f4       	brge	.+8      	; 0x12c0 <__vector_22+0x94>
    12b8:	01 97       	sbiw	r24, 0x01	; 1
    12ba:	8e 6f       	ori	r24, 0xFE	; 254
    12bc:	9f 6f       	ori	r25, 0xFF	; 255
    12be:	01 96       	adiw	r24, 0x01	; 1
    12c0:	80 93 36 28 	sts	0x2836, r24	; 0x802836 <channel_looker>
		}
		//Növeli a hit timert, ha már volt ütés
		if (hit_couter[channel_looker] < time_note && hit_couter[channel_looker] > 0)
    12c4:	e0 91 36 28 	lds	r30, 0x2836	; 0x802836 <channel_looker>
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	ee 0f       	add	r30, r30
    12cc:	ff 1f       	adc	r31, r31
    12ce:	e6 5d       	subi	r30, 0xD6	; 214
    12d0:	f7 4d       	sbci	r31, 0xD7	; 215
    12d2:	20 81       	ld	r18, Z
    12d4:	31 81       	ldd	r19, Z+1	; 0x01
    12d6:	80 91 06 28 	lds	r24, 0x2806	; 0x802806 <time_note>
    12da:	90 91 07 28 	lds	r25, 0x2807	; 0x802807 <time_note+0x1>
    12de:	28 17       	cp	r18, r24
    12e0:	39 07       	cpc	r19, r25
    12e2:	b8 f4       	brcc	.+46     	; 0x1312 <__vector_22+0xe6>
    12e4:	e0 91 36 28 	lds	r30, 0x2836	; 0x802836 <channel_looker>
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	ee 0f       	add	r30, r30
    12ec:	ff 1f       	adc	r31, r31
    12ee:	e6 5d       	subi	r30, 0xD6	; 214
    12f0:	f7 4d       	sbci	r31, 0xD7	; 215
    12f2:	80 81       	ld	r24, Z
    12f4:	91 81       	ldd	r25, Z+1	; 0x01
    12f6:	89 2b       	or	r24, r25
    12f8:	61 f0       	breq	.+24     	; 0x1312 <__vector_22+0xe6>
		{
			hit_couter[channel_looker] ++;
    12fa:	e0 91 36 28 	lds	r30, 0x2836	; 0x802836 <channel_looker>
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	ee 0f       	add	r30, r30
    1302:	ff 1f       	adc	r31, r31
    1304:	e6 5d       	subi	r30, 0xD6	; 214
    1306:	f7 4d       	sbci	r31, 0xD7	; 215
    1308:	80 81       	ld	r24, Z
    130a:	91 81       	ldd	r25, Z+1	; 0x01
    130c:	01 96       	adiw	r24, 0x01	; 1
    130e:	80 83       	st	Z, r24
    1310:	91 83       	std	Z+1, r25	; 0x01
		}
		//belelír, ha volt ütés és lejárt az idõ
		if(hit_couter[channel_looker] > time_note)
    1312:	e0 91 36 28 	lds	r30, 0x2836	; 0x802836 <channel_looker>
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	ee 0f       	add	r30, r30
    131a:	ff 1f       	adc	r31, r31
    131c:	e6 5d       	subi	r30, 0xD6	; 214
    131e:	f7 4d       	sbci	r31, 0xD7	; 215
    1320:	20 81       	ld	r18, Z
    1322:	31 81       	ldd	r19, Z+1	; 0x01
    1324:	80 91 06 28 	lds	r24, 0x2806	; 0x802806 <time_note>
    1328:	90 91 07 28 	lds	r25, 0x2807	; 0x802807 <time_note+0x1>
    132c:	82 17       	cp	r24, r18
    132e:	93 07       	cpc	r25, r19
    1330:	08 f0       	brcs	.+2      	; 0x1334 <__vector_22+0x108>
    1332:	c5 c0       	rjmp	.+394    	; 0x14be <__vector_22+0x292>
		{
			note_velocity[channel_looker] = (uint8_t)actual_max_velo[channel_looker];
    1334:	e0 91 36 28 	lds	r30, 0x2836	; 0x802836 <channel_looker>
    1338:	8e 2f       	mov	r24, r30
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	e0 91 36 28 	lds	r30, 0x2836	; 0x802836 <channel_looker>
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	ee 0f       	add	r30, r30
    1344:	ff 1f       	adc	r31, r31
    1346:	e5 53       	subi	r30, 0x35	; 53
    1348:	f6 4d       	sbci	r31, 0xD6	; 214
    134a:	20 81       	ld	r18, Z
    134c:	31 81       	ldd	r19, Z+1	; 0x01
    134e:	fc 01       	movw	r30, r24
    1350:	e9 52       	subi	r30, 0x29	; 41
    1352:	f6 4d       	sbci	r31, 0xD6	; 214
    1354:	20 83       	st	Z, r18
			if(note_velocity[channel_looker] > 127)
    1356:	e0 91 36 28 	lds	r30, 0x2836	; 0x802836 <channel_looker>
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	e9 52       	subi	r30, 0x29	; 41
    135e:	f6 4d       	sbci	r31, 0xD6	; 214
    1360:	80 81       	ld	r24, Z
    1362:	88 23       	and	r24, r24
    1364:	3c f4       	brge	.+14     	; 0x1374 <__vector_22+0x148>
			{
				note_velocity[channel_looker] = 127;
    1366:	e0 91 36 28 	lds	r30, 0x2836	; 0x802836 <channel_looker>
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	e9 52       	subi	r30, 0x29	; 41
    136e:	f6 4d       	sbci	r31, 0xD6	; 214
    1370:	8f e7       	ldi	r24, 0x7F	; 127
    1372:	80 83       	st	Z, r24
			}
				put_to_buffer(note_on,note_C[channel_looker],note_velocity[channel_looker]);
    1374:	e0 91 36 28 	lds	r30, 0x2836	; 0x802836 <channel_looker>
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	e9 52       	subi	r30, 0x29	; 41
    137c:	f6 4d       	sbci	r31, 0xD6	; 214
    137e:	40 81       	ld	r20, Z
    1380:	e0 91 36 28 	lds	r30, 0x2836	; 0x802836 <channel_looker>
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	e0 50       	subi	r30, 0x00	; 0
    1388:	f8 4d       	sbci	r31, 0xD8	; 216
    138a:	60 81       	ld	r22, Z
    138c:	80 e9       	ldi	r24, 0x90	; 144
    138e:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <put_to_buffer>
			
			//GND-t mérni váltások között TÖRÖLN
			/*ADC0.MUXPOS = ADC_MUXPOS_GND_gc;
			sample = ADC0.RES;*/
			//////////////////////////////////////////////////////////////////////////////////////////////////////////////
			hit_couter[channel_looker] = 0;
    1392:	e0 91 36 28 	lds	r30, 0x2836	; 0x802836 <channel_looker>
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	ee 0f       	add	r30, r30
    139a:	ff 1f       	adc	r31, r31
    139c:	e6 5d       	subi	r30, 0xD6	; 214
    139e:	f7 4d       	sbci	r31, 0xD7	; 215
    13a0:	10 82       	st	Z, r1
    13a2:	11 82       	std	Z+1, r1	; 0x01
			//Channel change
			channel_looker = (channel_looker+1)%(2);
    13a4:	80 91 36 28 	lds	r24, 0x2836	; 0x802836 <channel_looker>
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	01 96       	adiw	r24, 0x01	; 1
    13ac:	81 70       	andi	r24, 0x01	; 1
    13ae:	90 78       	andi	r25, 0x80	; 128
    13b0:	99 23       	and	r25, r25
    13b2:	24 f4       	brge	.+8      	; 0x13bc <__vector_22+0x190>
    13b4:	01 97       	sbiw	r24, 0x01	; 1
    13b6:	8e 6f       	ori	r24, 0xFE	; 254
    13b8:	9f 6f       	ori	r25, 0xFF	; 255
    13ba:	01 96       	adiw	r24, 0x01	; 1
    13bc:	80 93 36 28 	sts	0x2836, r24	; 0x802836 <channel_looker>
    13c0:	7e c0       	rjmp	.+252    	; 0x14be <__vector_22+0x292>
		}
		break;
		case There_was_hit:
		if (actual_max_velo[channel_looker] < sample)
    13c2:	e0 91 36 28 	lds	r30, 0x2836	; 0x802836 <channel_looker>
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	ee 0f       	add	r30, r30
    13ca:	ff 1f       	adc	r31, r31
    13cc:	e5 53       	subi	r30, 0x35	; 53
    13ce:	f6 4d       	sbci	r31, 0xD6	; 214
    13d0:	80 81       	ld	r24, Z
    13d2:	91 81       	ldd	r25, Z+1	; 0x01
    13d4:	82 17       	cp	r24, r18
    13d6:	93 07       	cpc	r25, r19
    13d8:	48 f4       	brcc	.+18     	; 0x13ec <__vector_22+0x1c0>
		{
			actual_max_velo[channel_looker] = sample;
    13da:	e0 91 36 28 	lds	r30, 0x2836	; 0x802836 <channel_looker>
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	ee 0f       	add	r30, r30
    13e2:	ff 1f       	adc	r31, r31
    13e4:	e5 53       	subi	r30, 0x35	; 53
    13e6:	f6 4d       	sbci	r31, 0xD6	; 214
    13e8:	20 83       	st	Z, r18
    13ea:	31 83       	std	Z+1, r19	; 0x01
		}
		if (hit_couter[channel_looker] < time_note)
    13ec:	e0 91 36 28 	lds	r30, 0x2836	; 0x802836 <channel_looker>
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	ee 0f       	add	r30, r30
    13f4:	ff 1f       	adc	r31, r31
    13f6:	e6 5d       	subi	r30, 0xD6	; 214
    13f8:	f7 4d       	sbci	r31, 0xD7	; 215
    13fa:	20 81       	ld	r18, Z
    13fc:	31 81       	ldd	r19, Z+1	; 0x01
    13fe:	80 91 06 28 	lds	r24, 0x2806	; 0x802806 <time_note>
    1402:	90 91 07 28 	lds	r25, 0x2807	; 0x802807 <time_note+0x1>
    1406:	28 17       	cp	r18, r24
    1408:	39 07       	cpc	r19, r25
    140a:	68 f4       	brcc	.+26     	; 0x1426 <__vector_22+0x1fa>
		{
			hit_couter[channel_looker] ++;
    140c:	e0 91 36 28 	lds	r30, 0x2836	; 0x802836 <channel_looker>
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	ee 0f       	add	r30, r30
    1414:	ff 1f       	adc	r31, r31
    1416:	e6 5d       	subi	r30, 0xD6	; 214
    1418:	f7 4d       	sbci	r31, 0xD7	; 215
    141a:	80 81       	ld	r24, Z
    141c:	91 81       	ldd	r25, Z+1	; 0x01
    141e:	01 96       	adiw	r24, 0x01	; 1
    1420:	80 83       	st	Z, r24
    1422:	91 83       	std	Z+1, r25	; 0x01
    1424:	4c c0       	rjmp	.+152    	; 0x14be <__vector_22+0x292>
		}
		else
		{
			
			note_velocity[channel_looker] = (uint8_t)actual_max_velo[channel_looker];
    1426:	e0 91 36 28 	lds	r30, 0x2836	; 0x802836 <channel_looker>
    142a:	8e 2f       	mov	r24, r30
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	e0 91 36 28 	lds	r30, 0x2836	; 0x802836 <channel_looker>
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	ee 0f       	add	r30, r30
    1436:	ff 1f       	adc	r31, r31
    1438:	e5 53       	subi	r30, 0x35	; 53
    143a:	f6 4d       	sbci	r31, 0xD6	; 214
    143c:	20 81       	ld	r18, Z
    143e:	31 81       	ldd	r19, Z+1	; 0x01
    1440:	fc 01       	movw	r30, r24
    1442:	e9 52       	subi	r30, 0x29	; 41
    1444:	f6 4d       	sbci	r31, 0xD6	; 214
    1446:	20 83       	st	Z, r18
			if(note_velocity[channel_looker] > 127)
    1448:	e0 91 36 28 	lds	r30, 0x2836	; 0x802836 <channel_looker>
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	e9 52       	subi	r30, 0x29	; 41
    1450:	f6 4d       	sbci	r31, 0xD6	; 214
    1452:	80 81       	ld	r24, Z
    1454:	88 23       	and	r24, r24
    1456:	3c f4       	brge	.+14     	; 0x1466 <__vector_22+0x23a>
			{
				note_velocity[channel_looker] = 127;
    1458:	e0 91 36 28 	lds	r30, 0x2836	; 0x802836 <channel_looker>
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	e9 52       	subi	r30, 0x29	; 41
    1460:	f6 4d       	sbci	r31, 0xD6	; 214
    1462:	8f e7       	ldi	r24, 0x7F	; 127
    1464:	80 83       	st	Z, r24
			}
				put_to_buffer(note_on,note_C[channel_looker],note_velocity[channel_looker]);
    1466:	e0 91 36 28 	lds	r30, 0x2836	; 0x802836 <channel_looker>
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	e9 52       	subi	r30, 0x29	; 41
    146e:	f6 4d       	sbci	r31, 0xD6	; 214
    1470:	40 81       	ld	r20, Z
    1472:	e0 91 36 28 	lds	r30, 0x2836	; 0x802836 <channel_looker>
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	e0 50       	subi	r30, 0x00	; 0
    147a:	f8 4d       	sbci	r31, 0xD8	; 216
    147c:	60 81       	ld	r22, Z
    147e:	80 e9       	ldi	r24, 0x90	; 144
    1480:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <put_to_buffer>
			
			//GND-t mérni váltások között TÖRÖLN
			/*ADC0.MUXPOS = ADC_MUXPOS_GND_gc;
			sample = ADC0.RES;*/
			//////////////////////////////////////////////////////////////////////////////////////////////////////////////
			hit_couter[channel_looker] = 0;
    1484:	e0 91 36 28 	lds	r30, 0x2836	; 0x802836 <channel_looker>
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	ee 0f       	add	r30, r30
    148c:	ff 1f       	adc	r31, r31
    148e:	e6 5d       	subi	r30, 0xD6	; 214
    1490:	f7 4d       	sbci	r31, 0xD7	; 215
    1492:	10 82       	st	Z, r1
    1494:	11 82       	std	Z+1, r1	; 0x01
			state[channel_looker] = Default_state;
    1496:	e0 91 36 28 	lds	r30, 0x2836	; 0x802836 <channel_looker>
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	ec 5e       	subi	r30, 0xEC	; 236
    149e:	f7 4d       	sbci	r31, 0xD7	; 215
    14a0:	10 82       	st	Z, r1
			channel_looker = (channel_looker+1)%(2);
    14a2:	80 91 36 28 	lds	r24, 0x2836	; 0x802836 <channel_looker>
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	01 96       	adiw	r24, 0x01	; 1
    14aa:	81 70       	andi	r24, 0x01	; 1
    14ac:	90 78       	andi	r25, 0x80	; 128
    14ae:	99 23       	and	r25, r25
    14b0:	24 f4       	brge	.+8      	; 0x14ba <__vector_22+0x28e>
    14b2:	01 97       	sbiw	r24, 0x01	; 1
    14b4:	8e 6f       	ori	r24, 0xFE	; 254
    14b6:	9f 6f       	ori	r25, 0xFF	; 255
    14b8:	01 96       	adiw	r24, 0x01	; 1
    14ba:	80 93 36 28 	sts	0x2836, r24	; 0x802836 <channel_looker>
	}
	
	
	
	
}
    14be:	ff 91       	pop	r31
    14c0:	ef 91       	pop	r30
    14c2:	bf 91       	pop	r27
    14c4:	af 91       	pop	r26
    14c6:	9f 91       	pop	r25
    14c8:	8f 91       	pop	r24
    14ca:	7f 91       	pop	r23
    14cc:	6f 91       	pop	r22
    14ce:	5f 91       	pop	r21
    14d0:	4f 91       	pop	r20
    14d2:	3f 91       	pop	r19
    14d4:	2f 91       	pop	r18
    14d6:	0f 90       	pop	r0
    14d8:	0f be       	out	0x3f, r0	; 63
    14da:	0f 90       	pop	r0
    14dc:	1f 90       	pop	r1
    14de:	18 95       	reti

000014e0 <__vector_38>:
	 bufferLength += 3;
	 USART3.CTRLA |= USART_DREIE_bm; 
}
 
ISR(USART3_DRE_vect)
{
    14e0:	1f 92       	push	r1
    14e2:	0f 92       	push	r0
    14e4:	0f b6       	in	r0, 0x3f	; 63
    14e6:	0f 92       	push	r0
    14e8:	11 24       	eor	r1, r1
    14ea:	5f 93       	push	r21
    14ec:	6f 93       	push	r22
    14ee:	7f 93       	push	r23
    14f0:	8f 93       	push	r24
    14f2:	9f 93       	push	r25
    14f4:	af 93       	push	r26
    14f6:	bf 93       	push	r27
    14f8:	ef 93       	push	r30
    14fa:	ff 93       	push	r31
	
	if(bufferLength == 0)
    14fc:	80 91 3a 28 	lds	r24, 0x283A	; 0x80283a <bufferLength>
    1500:	81 11       	cpse	r24, r1
    1502:	06 c0       	rjmp	.+12     	; 0x1510 <__vector_38+0x30>
	{
		USART3.CTRLA &= ~USART_DREIE_bm;
    1504:	e0 e6       	ldi	r30, 0x60	; 96
    1506:	f8 e0       	ldi	r31, 0x08	; 8
    1508:	85 81       	ldd	r24, Z+5	; 0x05
    150a:	8f 7d       	andi	r24, 0xDF	; 223
    150c:	85 83       	std	Z+5, r24	; 0x05
    150e:	17 c0       	rjmp	.+46     	; 0x153e <__vector_38+0x5e>
		
	}
	else
	{
		USART3.TXDATAL = buffer[readIndex];
    1510:	e0 91 39 28 	lds	r30, 0x2839	; 0x802839 <readIndex>
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	e3 52       	subi	r30, 0x23	; 35
    1518:	f6 4d       	sbci	r31, 0xD6	; 214
    151a:	80 81       	ld	r24, Z
    151c:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7f4862>
		readIndex = (readIndex + 1)%(SIZE_OF_BUFFER);
    1520:	80 91 39 28 	lds	r24, 0x2839	; 0x802839 <readIndex>
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	01 96       	adiw	r24, 0x01	; 1
    1528:	65 e1       	ldi	r22, 0x15	; 21
    152a:	70 e0       	ldi	r23, 0x00	; 0
    152c:	0e 94 ad 0a 	call	0x155a	; 0x155a <__divmodhi4>
    1530:	80 93 39 28 	sts	0x2839, r24	; 0x802839 <readIndex>
		bufferLength --;
    1534:	80 91 3a 28 	lds	r24, 0x283A	; 0x80283a <bufferLength>
    1538:	81 50       	subi	r24, 0x01	; 1
    153a:	80 93 3a 28 	sts	0x283A, r24	; 0x80283a <bufferLength>
	}
    153e:	ff 91       	pop	r31
    1540:	ef 91       	pop	r30
    1542:	bf 91       	pop	r27
    1544:	af 91       	pop	r26
    1546:	9f 91       	pop	r25
    1548:	8f 91       	pop	r24
    154a:	7f 91       	pop	r23
    154c:	6f 91       	pop	r22
    154e:	5f 91       	pop	r21
    1550:	0f 90       	pop	r0
    1552:	0f be       	out	0x3f, r0	; 63
    1554:	0f 90       	pop	r0
    1556:	1f 90       	pop	r1
    1558:	18 95       	reti

0000155a <__divmodhi4>:
    155a:	97 fb       	bst	r25, 7
    155c:	07 2e       	mov	r0, r23
    155e:	16 f4       	brtc	.+4      	; 0x1564 <__divmodhi4+0xa>
    1560:	00 94       	com	r0
    1562:	07 d0       	rcall	.+14     	; 0x1572 <__divmodhi4_neg1>
    1564:	77 fd       	sbrc	r23, 7
    1566:	09 d0       	rcall	.+18     	; 0x157a <__divmodhi4_neg2>
    1568:	0e 94 c7 0a 	call	0x158e	; 0x158e <__udivmodhi4>
    156c:	07 fc       	sbrc	r0, 7
    156e:	05 d0       	rcall	.+10     	; 0x157a <__divmodhi4_neg2>
    1570:	3e f4       	brtc	.+14     	; 0x1580 <__divmodhi4_exit>

00001572 <__divmodhi4_neg1>:
    1572:	90 95       	com	r25
    1574:	81 95       	neg	r24
    1576:	9f 4f       	sbci	r25, 0xFF	; 255
    1578:	08 95       	ret

0000157a <__divmodhi4_neg2>:
    157a:	70 95       	com	r23
    157c:	61 95       	neg	r22
    157e:	7f 4f       	sbci	r23, 0xFF	; 255

00001580 <__divmodhi4_exit>:
    1580:	08 95       	ret

00001582 <__tablejump2__>:
    1582:	ee 0f       	add	r30, r30
    1584:	ff 1f       	adc	r31, r31
    1586:	05 90       	lpm	r0, Z+
    1588:	f4 91       	lpm	r31, Z
    158a:	e0 2d       	mov	r30, r0
    158c:	09 94       	ijmp

0000158e <__udivmodhi4>:
    158e:	aa 1b       	sub	r26, r26
    1590:	bb 1b       	sub	r27, r27
    1592:	51 e1       	ldi	r21, 0x11	; 17
    1594:	07 c0       	rjmp	.+14     	; 0x15a4 <__udivmodhi4_ep>

00001596 <__udivmodhi4_loop>:
    1596:	aa 1f       	adc	r26, r26
    1598:	bb 1f       	adc	r27, r27
    159a:	a6 17       	cp	r26, r22
    159c:	b7 07       	cpc	r27, r23
    159e:	10 f0       	brcs	.+4      	; 0x15a4 <__udivmodhi4_ep>
    15a0:	a6 1b       	sub	r26, r22
    15a2:	b7 0b       	sbc	r27, r23

000015a4 <__udivmodhi4_ep>:
    15a4:	88 1f       	adc	r24, r24
    15a6:	99 1f       	adc	r25, r25
    15a8:	5a 95       	dec	r21
    15aa:	a9 f7       	brne	.-22     	; 0x1596 <__udivmodhi4_loop>
    15ac:	80 95       	com	r24
    15ae:	90 95       	com	r25
    15b0:	bc 01       	movw	r22, r24
    15b2:	cd 01       	movw	r24, r26
    15b4:	08 95       	ret

000015b6 <sprintf>:
    15b6:	ae e0       	ldi	r26, 0x0E	; 14
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	e1 ee       	ldi	r30, 0xE1	; 225
    15bc:	fa e0       	ldi	r31, 0x0A	; 10
    15be:	0c 94 a2 0d 	jmp	0x1b44	; 0x1b44 <__prologue_saves__+0x1c>
    15c2:	0d 89       	ldd	r16, Y+21	; 0x15
    15c4:	1e 89       	ldd	r17, Y+22	; 0x16
    15c6:	86 e0       	ldi	r24, 0x06	; 6
    15c8:	8c 83       	std	Y+4, r24	; 0x04
    15ca:	09 83       	std	Y+1, r16	; 0x01
    15cc:	1a 83       	std	Y+2, r17	; 0x02
    15ce:	8f ef       	ldi	r24, 0xFF	; 255
    15d0:	9f e7       	ldi	r25, 0x7F	; 127
    15d2:	8d 83       	std	Y+5, r24	; 0x05
    15d4:	9e 83       	std	Y+6, r25	; 0x06
    15d6:	ae 01       	movw	r20, r28
    15d8:	47 5e       	subi	r20, 0xE7	; 231
    15da:	5f 4f       	sbci	r21, 0xFF	; 255
    15dc:	6f 89       	ldd	r22, Y+23	; 0x17
    15de:	78 8d       	ldd	r23, Y+24	; 0x18
    15e0:	ce 01       	movw	r24, r28
    15e2:	01 96       	adiw	r24, 0x01	; 1
    15e4:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <vfprintf>
    15e8:	ef 81       	ldd	r30, Y+7	; 0x07
    15ea:	f8 85       	ldd	r31, Y+8	; 0x08
    15ec:	e0 0f       	add	r30, r16
    15ee:	f1 1f       	adc	r31, r17
    15f0:	10 82       	st	Z, r1
    15f2:	2e 96       	adiw	r28, 0x0e	; 14
    15f4:	e4 e0       	ldi	r30, 0x04	; 4
    15f6:	0c 94 bb 0d 	jmp	0x1b76	; 0x1b76 <__epilogue_restores__+0x1c>

000015fa <vfprintf>:
    15fa:	ab e0       	ldi	r26, 0x0B	; 11
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	e3 e0       	ldi	r30, 0x03	; 3
    1600:	fb e0       	ldi	r31, 0x0B	; 11
    1602:	0c 94 94 0d 	jmp	0x1b28	; 0x1b28 <__prologue_saves__>
    1606:	6c 01       	movw	r12, r24
    1608:	7b 01       	movw	r14, r22
    160a:	8a 01       	movw	r16, r20
    160c:	fc 01       	movw	r30, r24
    160e:	16 82       	std	Z+6, r1	; 0x06
    1610:	17 82       	std	Z+7, r1	; 0x07
    1612:	83 81       	ldd	r24, Z+3	; 0x03
    1614:	81 ff       	sbrs	r24, 1
    1616:	cc c1       	rjmp	.+920    	; 0x19b0 <__DATA_REGION_LENGTH__+0x1b0>
    1618:	ce 01       	movw	r24, r28
    161a:	01 96       	adiw	r24, 0x01	; 1
    161c:	3c 01       	movw	r6, r24
    161e:	f6 01       	movw	r30, r12
    1620:	93 81       	ldd	r25, Z+3	; 0x03
    1622:	f7 01       	movw	r30, r14
    1624:	93 fd       	sbrc	r25, 3
    1626:	85 91       	lpm	r24, Z+
    1628:	93 ff       	sbrs	r25, 3
    162a:	81 91       	ld	r24, Z+
    162c:	7f 01       	movw	r14, r30
    162e:	88 23       	and	r24, r24
    1630:	09 f4       	brne	.+2      	; 0x1634 <vfprintf+0x3a>
    1632:	ba c1       	rjmp	.+884    	; 0x19a8 <__DATA_REGION_LENGTH__+0x1a8>
    1634:	85 32       	cpi	r24, 0x25	; 37
    1636:	39 f4       	brne	.+14     	; 0x1646 <vfprintf+0x4c>
    1638:	93 fd       	sbrc	r25, 3
    163a:	85 91       	lpm	r24, Z+
    163c:	93 ff       	sbrs	r25, 3
    163e:	81 91       	ld	r24, Z+
    1640:	7f 01       	movw	r14, r30
    1642:	85 32       	cpi	r24, 0x25	; 37
    1644:	29 f4       	brne	.+10     	; 0x1650 <vfprintf+0x56>
    1646:	b6 01       	movw	r22, r12
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <fputc>
    164e:	e7 cf       	rjmp	.-50     	; 0x161e <vfprintf+0x24>
    1650:	91 2c       	mov	r9, r1
    1652:	21 2c       	mov	r2, r1
    1654:	31 2c       	mov	r3, r1
    1656:	ff e1       	ldi	r31, 0x1F	; 31
    1658:	f3 15       	cp	r31, r3
    165a:	d8 f0       	brcs	.+54     	; 0x1692 <vfprintf+0x98>
    165c:	8b 32       	cpi	r24, 0x2B	; 43
    165e:	79 f0       	breq	.+30     	; 0x167e <vfprintf+0x84>
    1660:	38 f4       	brcc	.+14     	; 0x1670 <vfprintf+0x76>
    1662:	80 32       	cpi	r24, 0x20	; 32
    1664:	79 f0       	breq	.+30     	; 0x1684 <vfprintf+0x8a>
    1666:	83 32       	cpi	r24, 0x23	; 35
    1668:	a1 f4       	brne	.+40     	; 0x1692 <vfprintf+0x98>
    166a:	23 2d       	mov	r18, r3
    166c:	20 61       	ori	r18, 0x10	; 16
    166e:	1d c0       	rjmp	.+58     	; 0x16aa <vfprintf+0xb0>
    1670:	8d 32       	cpi	r24, 0x2D	; 45
    1672:	61 f0       	breq	.+24     	; 0x168c <vfprintf+0x92>
    1674:	80 33       	cpi	r24, 0x30	; 48
    1676:	69 f4       	brne	.+26     	; 0x1692 <vfprintf+0x98>
    1678:	23 2d       	mov	r18, r3
    167a:	21 60       	ori	r18, 0x01	; 1
    167c:	16 c0       	rjmp	.+44     	; 0x16aa <vfprintf+0xb0>
    167e:	83 2d       	mov	r24, r3
    1680:	82 60       	ori	r24, 0x02	; 2
    1682:	38 2e       	mov	r3, r24
    1684:	e3 2d       	mov	r30, r3
    1686:	e4 60       	ori	r30, 0x04	; 4
    1688:	3e 2e       	mov	r3, r30
    168a:	2a c0       	rjmp	.+84     	; 0x16e0 <vfprintf+0xe6>
    168c:	f3 2d       	mov	r31, r3
    168e:	f8 60       	ori	r31, 0x08	; 8
    1690:	1d c0       	rjmp	.+58     	; 0x16cc <vfprintf+0xd2>
    1692:	37 fc       	sbrc	r3, 7
    1694:	2d c0       	rjmp	.+90     	; 0x16f0 <vfprintf+0xf6>
    1696:	20 ed       	ldi	r18, 0xD0	; 208
    1698:	28 0f       	add	r18, r24
    169a:	2a 30       	cpi	r18, 0x0A	; 10
    169c:	40 f0       	brcs	.+16     	; 0x16ae <vfprintf+0xb4>
    169e:	8e 32       	cpi	r24, 0x2E	; 46
    16a0:	b9 f4       	brne	.+46     	; 0x16d0 <vfprintf+0xd6>
    16a2:	36 fc       	sbrc	r3, 6
    16a4:	81 c1       	rjmp	.+770    	; 0x19a8 <__DATA_REGION_LENGTH__+0x1a8>
    16a6:	23 2d       	mov	r18, r3
    16a8:	20 64       	ori	r18, 0x40	; 64
    16aa:	32 2e       	mov	r3, r18
    16ac:	19 c0       	rjmp	.+50     	; 0x16e0 <vfprintf+0xe6>
    16ae:	36 fe       	sbrs	r3, 6
    16b0:	06 c0       	rjmp	.+12     	; 0x16be <vfprintf+0xc4>
    16b2:	8a e0       	ldi	r24, 0x0A	; 10
    16b4:	98 9e       	mul	r9, r24
    16b6:	20 0d       	add	r18, r0
    16b8:	11 24       	eor	r1, r1
    16ba:	92 2e       	mov	r9, r18
    16bc:	11 c0       	rjmp	.+34     	; 0x16e0 <vfprintf+0xe6>
    16be:	ea e0       	ldi	r30, 0x0A	; 10
    16c0:	2e 9e       	mul	r2, r30
    16c2:	20 0d       	add	r18, r0
    16c4:	11 24       	eor	r1, r1
    16c6:	22 2e       	mov	r2, r18
    16c8:	f3 2d       	mov	r31, r3
    16ca:	f0 62       	ori	r31, 0x20	; 32
    16cc:	3f 2e       	mov	r3, r31
    16ce:	08 c0       	rjmp	.+16     	; 0x16e0 <vfprintf+0xe6>
    16d0:	8c 36       	cpi	r24, 0x6C	; 108
    16d2:	21 f4       	brne	.+8      	; 0x16dc <vfprintf+0xe2>
    16d4:	83 2d       	mov	r24, r3
    16d6:	80 68       	ori	r24, 0x80	; 128
    16d8:	38 2e       	mov	r3, r24
    16da:	02 c0       	rjmp	.+4      	; 0x16e0 <vfprintf+0xe6>
    16dc:	88 36       	cpi	r24, 0x68	; 104
    16de:	41 f4       	brne	.+16     	; 0x16f0 <vfprintf+0xf6>
    16e0:	f7 01       	movw	r30, r14
    16e2:	93 fd       	sbrc	r25, 3
    16e4:	85 91       	lpm	r24, Z+
    16e6:	93 ff       	sbrs	r25, 3
    16e8:	81 91       	ld	r24, Z+
    16ea:	7f 01       	movw	r14, r30
    16ec:	81 11       	cpse	r24, r1
    16ee:	b3 cf       	rjmp	.-154    	; 0x1656 <vfprintf+0x5c>
    16f0:	98 2f       	mov	r25, r24
    16f2:	9f 7d       	andi	r25, 0xDF	; 223
    16f4:	95 54       	subi	r25, 0x45	; 69
    16f6:	93 30       	cpi	r25, 0x03	; 3
    16f8:	28 f4       	brcc	.+10     	; 0x1704 <vfprintf+0x10a>
    16fa:	0c 5f       	subi	r16, 0xFC	; 252
    16fc:	1f 4f       	sbci	r17, 0xFF	; 255
    16fe:	9f e3       	ldi	r25, 0x3F	; 63
    1700:	99 83       	std	Y+1, r25	; 0x01
    1702:	0d c0       	rjmp	.+26     	; 0x171e <vfprintf+0x124>
    1704:	83 36       	cpi	r24, 0x63	; 99
    1706:	31 f0       	breq	.+12     	; 0x1714 <vfprintf+0x11a>
    1708:	83 37       	cpi	r24, 0x73	; 115
    170a:	71 f0       	breq	.+28     	; 0x1728 <vfprintf+0x12e>
    170c:	83 35       	cpi	r24, 0x53	; 83
    170e:	09 f0       	breq	.+2      	; 0x1712 <vfprintf+0x118>
    1710:	59 c0       	rjmp	.+178    	; 0x17c4 <vfprintf+0x1ca>
    1712:	21 c0       	rjmp	.+66     	; 0x1756 <vfprintf+0x15c>
    1714:	f8 01       	movw	r30, r16
    1716:	80 81       	ld	r24, Z
    1718:	89 83       	std	Y+1, r24	; 0x01
    171a:	0e 5f       	subi	r16, 0xFE	; 254
    171c:	1f 4f       	sbci	r17, 0xFF	; 255
    171e:	88 24       	eor	r8, r8
    1720:	83 94       	inc	r8
    1722:	91 2c       	mov	r9, r1
    1724:	53 01       	movw	r10, r6
    1726:	13 c0       	rjmp	.+38     	; 0x174e <vfprintf+0x154>
    1728:	28 01       	movw	r4, r16
    172a:	f2 e0       	ldi	r31, 0x02	; 2
    172c:	4f 0e       	add	r4, r31
    172e:	51 1c       	adc	r5, r1
    1730:	f8 01       	movw	r30, r16
    1732:	a0 80       	ld	r10, Z
    1734:	b1 80       	ldd	r11, Z+1	; 0x01
    1736:	36 fe       	sbrs	r3, 6
    1738:	03 c0       	rjmp	.+6      	; 0x1740 <vfprintf+0x146>
    173a:	69 2d       	mov	r22, r9
    173c:	70 e0       	ldi	r23, 0x00	; 0
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <vfprintf+0x14a>
    1740:	6f ef       	ldi	r22, 0xFF	; 255
    1742:	7f ef       	ldi	r23, 0xFF	; 255
    1744:	c5 01       	movw	r24, r10
    1746:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <strnlen>
    174a:	4c 01       	movw	r8, r24
    174c:	82 01       	movw	r16, r4
    174e:	f3 2d       	mov	r31, r3
    1750:	ff 77       	andi	r31, 0x7F	; 127
    1752:	3f 2e       	mov	r3, r31
    1754:	16 c0       	rjmp	.+44     	; 0x1782 <vfprintf+0x188>
    1756:	28 01       	movw	r4, r16
    1758:	22 e0       	ldi	r18, 0x02	; 2
    175a:	42 0e       	add	r4, r18
    175c:	51 1c       	adc	r5, r1
    175e:	f8 01       	movw	r30, r16
    1760:	a0 80       	ld	r10, Z
    1762:	b1 80       	ldd	r11, Z+1	; 0x01
    1764:	36 fe       	sbrs	r3, 6
    1766:	03 c0       	rjmp	.+6      	; 0x176e <vfprintf+0x174>
    1768:	69 2d       	mov	r22, r9
    176a:	70 e0       	ldi	r23, 0x00	; 0
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <vfprintf+0x178>
    176e:	6f ef       	ldi	r22, 0xFF	; 255
    1770:	7f ef       	ldi	r23, 0xFF	; 255
    1772:	c5 01       	movw	r24, r10
    1774:	0e 94 de 0c 	call	0x19bc	; 0x19bc <strnlen_P>
    1778:	4c 01       	movw	r8, r24
    177a:	f3 2d       	mov	r31, r3
    177c:	f0 68       	ori	r31, 0x80	; 128
    177e:	3f 2e       	mov	r3, r31
    1780:	82 01       	movw	r16, r4
    1782:	33 fc       	sbrc	r3, 3
    1784:	1b c0       	rjmp	.+54     	; 0x17bc <vfprintf+0x1c2>
    1786:	82 2d       	mov	r24, r2
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	88 16       	cp	r8, r24
    178c:	99 06       	cpc	r9, r25
    178e:	b0 f4       	brcc	.+44     	; 0x17bc <vfprintf+0x1c2>
    1790:	b6 01       	movw	r22, r12
    1792:	80 e2       	ldi	r24, 0x20	; 32
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <fputc>
    179a:	2a 94       	dec	r2
    179c:	f4 cf       	rjmp	.-24     	; 0x1786 <vfprintf+0x18c>
    179e:	f5 01       	movw	r30, r10
    17a0:	37 fc       	sbrc	r3, 7
    17a2:	85 91       	lpm	r24, Z+
    17a4:	37 fe       	sbrs	r3, 7
    17a6:	81 91       	ld	r24, Z+
    17a8:	5f 01       	movw	r10, r30
    17aa:	b6 01       	movw	r22, r12
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <fputc>
    17b2:	21 10       	cpse	r2, r1
    17b4:	2a 94       	dec	r2
    17b6:	21 e0       	ldi	r18, 0x01	; 1
    17b8:	82 1a       	sub	r8, r18
    17ba:	91 08       	sbc	r9, r1
    17bc:	81 14       	cp	r8, r1
    17be:	91 04       	cpc	r9, r1
    17c0:	71 f7       	brne	.-36     	; 0x179e <vfprintf+0x1a4>
    17c2:	e8 c0       	rjmp	.+464    	; 0x1994 <__DATA_REGION_LENGTH__+0x194>
    17c4:	84 36       	cpi	r24, 0x64	; 100
    17c6:	11 f0       	breq	.+4      	; 0x17cc <vfprintf+0x1d2>
    17c8:	89 36       	cpi	r24, 0x69	; 105
    17ca:	41 f5       	brne	.+80     	; 0x181c <__DATA_REGION_LENGTH__+0x1c>
    17cc:	f8 01       	movw	r30, r16
    17ce:	37 fe       	sbrs	r3, 7
    17d0:	07 c0       	rjmp	.+14     	; 0x17e0 <vfprintf+0x1e6>
    17d2:	60 81       	ld	r22, Z
    17d4:	71 81       	ldd	r23, Z+1	; 0x01
    17d6:	82 81       	ldd	r24, Z+2	; 0x02
    17d8:	93 81       	ldd	r25, Z+3	; 0x03
    17da:	0c 5f       	subi	r16, 0xFC	; 252
    17dc:	1f 4f       	sbci	r17, 0xFF	; 255
    17de:	08 c0       	rjmp	.+16     	; 0x17f0 <vfprintf+0x1f6>
    17e0:	60 81       	ld	r22, Z
    17e2:	71 81       	ldd	r23, Z+1	; 0x01
    17e4:	07 2e       	mov	r0, r23
    17e6:	00 0c       	add	r0, r0
    17e8:	88 0b       	sbc	r24, r24
    17ea:	99 0b       	sbc	r25, r25
    17ec:	0e 5f       	subi	r16, 0xFE	; 254
    17ee:	1f 4f       	sbci	r17, 0xFF	; 255
    17f0:	f3 2d       	mov	r31, r3
    17f2:	ff 76       	andi	r31, 0x6F	; 111
    17f4:	3f 2e       	mov	r3, r31
    17f6:	97 ff       	sbrs	r25, 7
    17f8:	09 c0       	rjmp	.+18     	; 0x180c <__DATA_REGION_LENGTH__+0xc>
    17fa:	90 95       	com	r25
    17fc:	80 95       	com	r24
    17fe:	70 95       	com	r23
    1800:	61 95       	neg	r22
    1802:	7f 4f       	sbci	r23, 0xFF	; 255
    1804:	8f 4f       	sbci	r24, 0xFF	; 255
    1806:	9f 4f       	sbci	r25, 0xFF	; 255
    1808:	f0 68       	ori	r31, 0x80	; 128
    180a:	3f 2e       	mov	r3, r31
    180c:	2a e0       	ldi	r18, 0x0A	; 10
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	a3 01       	movw	r20, r6
    1812:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__ultoa_invert>
    1816:	88 2e       	mov	r8, r24
    1818:	86 18       	sub	r8, r6
    181a:	45 c0       	rjmp	.+138    	; 0x18a6 <__DATA_REGION_LENGTH__+0xa6>
    181c:	85 37       	cpi	r24, 0x75	; 117
    181e:	31 f4       	brne	.+12     	; 0x182c <__DATA_REGION_LENGTH__+0x2c>
    1820:	23 2d       	mov	r18, r3
    1822:	2f 7e       	andi	r18, 0xEF	; 239
    1824:	b2 2e       	mov	r11, r18
    1826:	2a e0       	ldi	r18, 0x0A	; 10
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	25 c0       	rjmp	.+74     	; 0x1876 <__DATA_REGION_LENGTH__+0x76>
    182c:	93 2d       	mov	r25, r3
    182e:	99 7f       	andi	r25, 0xF9	; 249
    1830:	b9 2e       	mov	r11, r25
    1832:	8f 36       	cpi	r24, 0x6F	; 111
    1834:	c1 f0       	breq	.+48     	; 0x1866 <__DATA_REGION_LENGTH__+0x66>
    1836:	18 f4       	brcc	.+6      	; 0x183e <__DATA_REGION_LENGTH__+0x3e>
    1838:	88 35       	cpi	r24, 0x58	; 88
    183a:	79 f0       	breq	.+30     	; 0x185a <__DATA_REGION_LENGTH__+0x5a>
    183c:	b5 c0       	rjmp	.+362    	; 0x19a8 <__DATA_REGION_LENGTH__+0x1a8>
    183e:	80 37       	cpi	r24, 0x70	; 112
    1840:	19 f0       	breq	.+6      	; 0x1848 <__DATA_REGION_LENGTH__+0x48>
    1842:	88 37       	cpi	r24, 0x78	; 120
    1844:	21 f0       	breq	.+8      	; 0x184e <__DATA_REGION_LENGTH__+0x4e>
    1846:	b0 c0       	rjmp	.+352    	; 0x19a8 <__DATA_REGION_LENGTH__+0x1a8>
    1848:	e9 2f       	mov	r30, r25
    184a:	e0 61       	ori	r30, 0x10	; 16
    184c:	be 2e       	mov	r11, r30
    184e:	b4 fe       	sbrs	r11, 4
    1850:	0d c0       	rjmp	.+26     	; 0x186c <__DATA_REGION_LENGTH__+0x6c>
    1852:	fb 2d       	mov	r31, r11
    1854:	f4 60       	ori	r31, 0x04	; 4
    1856:	bf 2e       	mov	r11, r31
    1858:	09 c0       	rjmp	.+18     	; 0x186c <__DATA_REGION_LENGTH__+0x6c>
    185a:	34 fe       	sbrs	r3, 4
    185c:	0a c0       	rjmp	.+20     	; 0x1872 <__DATA_REGION_LENGTH__+0x72>
    185e:	29 2f       	mov	r18, r25
    1860:	26 60       	ori	r18, 0x06	; 6
    1862:	b2 2e       	mov	r11, r18
    1864:	06 c0       	rjmp	.+12     	; 0x1872 <__DATA_REGION_LENGTH__+0x72>
    1866:	28 e0       	ldi	r18, 0x08	; 8
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	05 c0       	rjmp	.+10     	; 0x1876 <__DATA_REGION_LENGTH__+0x76>
    186c:	20 e1       	ldi	r18, 0x10	; 16
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	02 c0       	rjmp	.+4      	; 0x1876 <__DATA_REGION_LENGTH__+0x76>
    1872:	20 e1       	ldi	r18, 0x10	; 16
    1874:	32 e0       	ldi	r19, 0x02	; 2
    1876:	f8 01       	movw	r30, r16
    1878:	b7 fe       	sbrs	r11, 7
    187a:	07 c0       	rjmp	.+14     	; 0x188a <__DATA_REGION_LENGTH__+0x8a>
    187c:	60 81       	ld	r22, Z
    187e:	71 81       	ldd	r23, Z+1	; 0x01
    1880:	82 81       	ldd	r24, Z+2	; 0x02
    1882:	93 81       	ldd	r25, Z+3	; 0x03
    1884:	0c 5f       	subi	r16, 0xFC	; 252
    1886:	1f 4f       	sbci	r17, 0xFF	; 255
    1888:	06 c0       	rjmp	.+12     	; 0x1896 <__DATA_REGION_LENGTH__+0x96>
    188a:	60 81       	ld	r22, Z
    188c:	71 81       	ldd	r23, Z+1	; 0x01
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	0e 5f       	subi	r16, 0xFE	; 254
    1894:	1f 4f       	sbci	r17, 0xFF	; 255
    1896:	a3 01       	movw	r20, r6
    1898:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__ultoa_invert>
    189c:	88 2e       	mov	r8, r24
    189e:	86 18       	sub	r8, r6
    18a0:	fb 2d       	mov	r31, r11
    18a2:	ff 77       	andi	r31, 0x7F	; 127
    18a4:	3f 2e       	mov	r3, r31
    18a6:	36 fe       	sbrs	r3, 6
    18a8:	0d c0       	rjmp	.+26     	; 0x18c4 <__DATA_REGION_LENGTH__+0xc4>
    18aa:	23 2d       	mov	r18, r3
    18ac:	2e 7f       	andi	r18, 0xFE	; 254
    18ae:	a2 2e       	mov	r10, r18
    18b0:	89 14       	cp	r8, r9
    18b2:	58 f4       	brcc	.+22     	; 0x18ca <__DATA_REGION_LENGTH__+0xca>
    18b4:	34 fe       	sbrs	r3, 4
    18b6:	0b c0       	rjmp	.+22     	; 0x18ce <__DATA_REGION_LENGTH__+0xce>
    18b8:	32 fc       	sbrc	r3, 2
    18ba:	09 c0       	rjmp	.+18     	; 0x18ce <__DATA_REGION_LENGTH__+0xce>
    18bc:	83 2d       	mov	r24, r3
    18be:	8e 7e       	andi	r24, 0xEE	; 238
    18c0:	a8 2e       	mov	r10, r24
    18c2:	05 c0       	rjmp	.+10     	; 0x18ce <__DATA_REGION_LENGTH__+0xce>
    18c4:	b8 2c       	mov	r11, r8
    18c6:	a3 2c       	mov	r10, r3
    18c8:	03 c0       	rjmp	.+6      	; 0x18d0 <__DATA_REGION_LENGTH__+0xd0>
    18ca:	b8 2c       	mov	r11, r8
    18cc:	01 c0       	rjmp	.+2      	; 0x18d0 <__DATA_REGION_LENGTH__+0xd0>
    18ce:	b9 2c       	mov	r11, r9
    18d0:	a4 fe       	sbrs	r10, 4
    18d2:	0f c0       	rjmp	.+30     	; 0x18f2 <__DATA_REGION_LENGTH__+0xf2>
    18d4:	fe 01       	movw	r30, r28
    18d6:	e8 0d       	add	r30, r8
    18d8:	f1 1d       	adc	r31, r1
    18da:	80 81       	ld	r24, Z
    18dc:	80 33       	cpi	r24, 0x30	; 48
    18de:	21 f4       	brne	.+8      	; 0x18e8 <__DATA_REGION_LENGTH__+0xe8>
    18e0:	9a 2d       	mov	r25, r10
    18e2:	99 7e       	andi	r25, 0xE9	; 233
    18e4:	a9 2e       	mov	r10, r25
    18e6:	09 c0       	rjmp	.+18     	; 0x18fa <__DATA_REGION_LENGTH__+0xfa>
    18e8:	a2 fe       	sbrs	r10, 2
    18ea:	06 c0       	rjmp	.+12     	; 0x18f8 <__DATA_REGION_LENGTH__+0xf8>
    18ec:	b3 94       	inc	r11
    18ee:	b3 94       	inc	r11
    18f0:	04 c0       	rjmp	.+8      	; 0x18fa <__DATA_REGION_LENGTH__+0xfa>
    18f2:	8a 2d       	mov	r24, r10
    18f4:	86 78       	andi	r24, 0x86	; 134
    18f6:	09 f0       	breq	.+2      	; 0x18fa <__DATA_REGION_LENGTH__+0xfa>
    18f8:	b3 94       	inc	r11
    18fa:	a3 fc       	sbrc	r10, 3
    18fc:	11 c0       	rjmp	.+34     	; 0x1920 <__DATA_REGION_LENGTH__+0x120>
    18fe:	a0 fe       	sbrs	r10, 0
    1900:	06 c0       	rjmp	.+12     	; 0x190e <__DATA_REGION_LENGTH__+0x10e>
    1902:	b2 14       	cp	r11, r2
    1904:	88 f4       	brcc	.+34     	; 0x1928 <__DATA_REGION_LENGTH__+0x128>
    1906:	28 0c       	add	r2, r8
    1908:	92 2c       	mov	r9, r2
    190a:	9b 18       	sub	r9, r11
    190c:	0e c0       	rjmp	.+28     	; 0x192a <__DATA_REGION_LENGTH__+0x12a>
    190e:	b2 14       	cp	r11, r2
    1910:	60 f4       	brcc	.+24     	; 0x192a <__DATA_REGION_LENGTH__+0x12a>
    1912:	b6 01       	movw	r22, r12
    1914:	80 e2       	ldi	r24, 0x20	; 32
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <fputc>
    191c:	b3 94       	inc	r11
    191e:	f7 cf       	rjmp	.-18     	; 0x190e <__DATA_REGION_LENGTH__+0x10e>
    1920:	b2 14       	cp	r11, r2
    1922:	18 f4       	brcc	.+6      	; 0x192a <__DATA_REGION_LENGTH__+0x12a>
    1924:	2b 18       	sub	r2, r11
    1926:	02 c0       	rjmp	.+4      	; 0x192c <__DATA_REGION_LENGTH__+0x12c>
    1928:	98 2c       	mov	r9, r8
    192a:	21 2c       	mov	r2, r1
    192c:	a4 fe       	sbrs	r10, 4
    192e:	10 c0       	rjmp	.+32     	; 0x1950 <__DATA_REGION_LENGTH__+0x150>
    1930:	b6 01       	movw	r22, r12
    1932:	80 e3       	ldi	r24, 0x30	; 48
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <fputc>
    193a:	a2 fe       	sbrs	r10, 2
    193c:	17 c0       	rjmp	.+46     	; 0x196c <__DATA_REGION_LENGTH__+0x16c>
    193e:	a1 fc       	sbrc	r10, 1
    1940:	03 c0       	rjmp	.+6      	; 0x1948 <__DATA_REGION_LENGTH__+0x148>
    1942:	88 e7       	ldi	r24, 0x78	; 120
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	02 c0       	rjmp	.+4      	; 0x194c <__DATA_REGION_LENGTH__+0x14c>
    1948:	88 e5       	ldi	r24, 0x58	; 88
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	b6 01       	movw	r22, r12
    194e:	0c c0       	rjmp	.+24     	; 0x1968 <__DATA_REGION_LENGTH__+0x168>
    1950:	8a 2d       	mov	r24, r10
    1952:	86 78       	andi	r24, 0x86	; 134
    1954:	59 f0       	breq	.+22     	; 0x196c <__DATA_REGION_LENGTH__+0x16c>
    1956:	a1 fe       	sbrs	r10, 1
    1958:	02 c0       	rjmp	.+4      	; 0x195e <__DATA_REGION_LENGTH__+0x15e>
    195a:	8b e2       	ldi	r24, 0x2B	; 43
    195c:	01 c0       	rjmp	.+2      	; 0x1960 <__DATA_REGION_LENGTH__+0x160>
    195e:	80 e2       	ldi	r24, 0x20	; 32
    1960:	a7 fc       	sbrc	r10, 7
    1962:	8d e2       	ldi	r24, 0x2D	; 45
    1964:	b6 01       	movw	r22, r12
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <fputc>
    196c:	89 14       	cp	r8, r9
    196e:	38 f4       	brcc	.+14     	; 0x197e <__DATA_REGION_LENGTH__+0x17e>
    1970:	b6 01       	movw	r22, r12
    1972:	80 e3       	ldi	r24, 0x30	; 48
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <fputc>
    197a:	9a 94       	dec	r9
    197c:	f7 cf       	rjmp	.-18     	; 0x196c <__DATA_REGION_LENGTH__+0x16c>
    197e:	8a 94       	dec	r8
    1980:	f3 01       	movw	r30, r6
    1982:	e8 0d       	add	r30, r8
    1984:	f1 1d       	adc	r31, r1
    1986:	80 81       	ld	r24, Z
    1988:	b6 01       	movw	r22, r12
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <fputc>
    1990:	81 10       	cpse	r8, r1
    1992:	f5 cf       	rjmp	.-22     	; 0x197e <__DATA_REGION_LENGTH__+0x17e>
    1994:	22 20       	and	r2, r2
    1996:	09 f4       	brne	.+2      	; 0x199a <__DATA_REGION_LENGTH__+0x19a>
    1998:	42 ce       	rjmp	.-892    	; 0x161e <vfprintf+0x24>
    199a:	b6 01       	movw	r22, r12
    199c:	80 e2       	ldi	r24, 0x20	; 32
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <fputc>
    19a4:	2a 94       	dec	r2
    19a6:	f6 cf       	rjmp	.-20     	; 0x1994 <__DATA_REGION_LENGTH__+0x194>
    19a8:	f6 01       	movw	r30, r12
    19aa:	86 81       	ldd	r24, Z+6	; 0x06
    19ac:	97 81       	ldd	r25, Z+7	; 0x07
    19ae:	02 c0       	rjmp	.+4      	; 0x19b4 <__DATA_REGION_LENGTH__+0x1b4>
    19b0:	8f ef       	ldi	r24, 0xFF	; 255
    19b2:	9f ef       	ldi	r25, 0xFF	; 255
    19b4:	2b 96       	adiw	r28, 0x0b	; 11
    19b6:	e2 e1       	ldi	r30, 0x12	; 18
    19b8:	0c 94 ad 0d 	jmp	0x1b5a	; 0x1b5a <__epilogue_restores__>

000019bc <strnlen_P>:
    19bc:	fc 01       	movw	r30, r24
    19be:	05 90       	lpm	r0, Z+
    19c0:	61 50       	subi	r22, 0x01	; 1
    19c2:	70 40       	sbci	r23, 0x00	; 0
    19c4:	01 10       	cpse	r0, r1
    19c6:	d8 f7       	brcc	.-10     	; 0x19be <strnlen_P+0x2>
    19c8:	80 95       	com	r24
    19ca:	90 95       	com	r25
    19cc:	8e 0f       	add	r24, r30
    19ce:	9f 1f       	adc	r25, r31
    19d0:	08 95       	ret

000019d2 <strnlen>:
    19d2:	fc 01       	movw	r30, r24
    19d4:	61 50       	subi	r22, 0x01	; 1
    19d6:	70 40       	sbci	r23, 0x00	; 0
    19d8:	01 90       	ld	r0, Z+
    19da:	01 10       	cpse	r0, r1
    19dc:	d8 f7       	brcc	.-10     	; 0x19d4 <strnlen+0x2>
    19de:	80 95       	com	r24
    19e0:	90 95       	com	r25
    19e2:	8e 0f       	add	r24, r30
    19e4:	9f 1f       	adc	r25, r31
    19e6:	08 95       	ret

000019e8 <fputc>:
    19e8:	0f 93       	push	r16
    19ea:	1f 93       	push	r17
    19ec:	cf 93       	push	r28
    19ee:	df 93       	push	r29
    19f0:	fb 01       	movw	r30, r22
    19f2:	23 81       	ldd	r18, Z+3	; 0x03
    19f4:	21 fd       	sbrc	r18, 1
    19f6:	03 c0       	rjmp	.+6      	; 0x19fe <fputc+0x16>
    19f8:	8f ef       	ldi	r24, 0xFF	; 255
    19fa:	9f ef       	ldi	r25, 0xFF	; 255
    19fc:	2c c0       	rjmp	.+88     	; 0x1a56 <fputc+0x6e>
    19fe:	22 ff       	sbrs	r18, 2
    1a00:	16 c0       	rjmp	.+44     	; 0x1a2e <fputc+0x46>
    1a02:	46 81       	ldd	r20, Z+6	; 0x06
    1a04:	57 81       	ldd	r21, Z+7	; 0x07
    1a06:	24 81       	ldd	r18, Z+4	; 0x04
    1a08:	35 81       	ldd	r19, Z+5	; 0x05
    1a0a:	42 17       	cp	r20, r18
    1a0c:	53 07       	cpc	r21, r19
    1a0e:	44 f4       	brge	.+16     	; 0x1a20 <fputc+0x38>
    1a10:	a0 81       	ld	r26, Z
    1a12:	b1 81       	ldd	r27, Z+1	; 0x01
    1a14:	9d 01       	movw	r18, r26
    1a16:	2f 5f       	subi	r18, 0xFF	; 255
    1a18:	3f 4f       	sbci	r19, 0xFF	; 255
    1a1a:	20 83       	st	Z, r18
    1a1c:	31 83       	std	Z+1, r19	; 0x01
    1a1e:	8c 93       	st	X, r24
    1a20:	26 81       	ldd	r18, Z+6	; 0x06
    1a22:	37 81       	ldd	r19, Z+7	; 0x07
    1a24:	2f 5f       	subi	r18, 0xFF	; 255
    1a26:	3f 4f       	sbci	r19, 0xFF	; 255
    1a28:	26 83       	std	Z+6, r18	; 0x06
    1a2a:	37 83       	std	Z+7, r19	; 0x07
    1a2c:	14 c0       	rjmp	.+40     	; 0x1a56 <fputc+0x6e>
    1a2e:	8b 01       	movw	r16, r22
    1a30:	ec 01       	movw	r28, r24
    1a32:	fb 01       	movw	r30, r22
    1a34:	00 84       	ldd	r0, Z+8	; 0x08
    1a36:	f1 85       	ldd	r31, Z+9	; 0x09
    1a38:	e0 2d       	mov	r30, r0
    1a3a:	09 95       	icall
    1a3c:	89 2b       	or	r24, r25
    1a3e:	e1 f6       	brne	.-72     	; 0x19f8 <fputc+0x10>
    1a40:	d8 01       	movw	r26, r16
    1a42:	16 96       	adiw	r26, 0x06	; 6
    1a44:	8d 91       	ld	r24, X+
    1a46:	9c 91       	ld	r25, X
    1a48:	17 97       	sbiw	r26, 0x07	; 7
    1a4a:	01 96       	adiw	r24, 0x01	; 1
    1a4c:	16 96       	adiw	r26, 0x06	; 6
    1a4e:	8d 93       	st	X+, r24
    1a50:	9c 93       	st	X, r25
    1a52:	17 97       	sbiw	r26, 0x07	; 7
    1a54:	ce 01       	movw	r24, r28
    1a56:	df 91       	pop	r29
    1a58:	cf 91       	pop	r28
    1a5a:	1f 91       	pop	r17
    1a5c:	0f 91       	pop	r16
    1a5e:	08 95       	ret

00001a60 <__ultoa_invert>:
    1a60:	fa 01       	movw	r30, r20
    1a62:	aa 27       	eor	r26, r26
    1a64:	28 30       	cpi	r18, 0x08	; 8
    1a66:	51 f1       	breq	.+84     	; 0x1abc <__ultoa_invert+0x5c>
    1a68:	20 31       	cpi	r18, 0x10	; 16
    1a6a:	81 f1       	breq	.+96     	; 0x1acc <__ultoa_invert+0x6c>
    1a6c:	e8 94       	clt
    1a6e:	6f 93       	push	r22
    1a70:	6e 7f       	andi	r22, 0xFE	; 254
    1a72:	6e 5f       	subi	r22, 0xFE	; 254
    1a74:	7f 4f       	sbci	r23, 0xFF	; 255
    1a76:	8f 4f       	sbci	r24, 0xFF	; 255
    1a78:	9f 4f       	sbci	r25, 0xFF	; 255
    1a7a:	af 4f       	sbci	r26, 0xFF	; 255
    1a7c:	b1 e0       	ldi	r27, 0x01	; 1
    1a7e:	3e d0       	rcall	.+124    	; 0x1afc <__ultoa_invert+0x9c>
    1a80:	b4 e0       	ldi	r27, 0x04	; 4
    1a82:	3c d0       	rcall	.+120    	; 0x1afc <__ultoa_invert+0x9c>
    1a84:	67 0f       	add	r22, r23
    1a86:	78 1f       	adc	r23, r24
    1a88:	89 1f       	adc	r24, r25
    1a8a:	9a 1f       	adc	r25, r26
    1a8c:	a1 1d       	adc	r26, r1
    1a8e:	68 0f       	add	r22, r24
    1a90:	79 1f       	adc	r23, r25
    1a92:	8a 1f       	adc	r24, r26
    1a94:	91 1d       	adc	r25, r1
    1a96:	a1 1d       	adc	r26, r1
    1a98:	6a 0f       	add	r22, r26
    1a9a:	71 1d       	adc	r23, r1
    1a9c:	81 1d       	adc	r24, r1
    1a9e:	91 1d       	adc	r25, r1
    1aa0:	a1 1d       	adc	r26, r1
    1aa2:	20 d0       	rcall	.+64     	; 0x1ae4 <__ultoa_invert+0x84>
    1aa4:	09 f4       	brne	.+2      	; 0x1aa8 <__ultoa_invert+0x48>
    1aa6:	68 94       	set
    1aa8:	3f 91       	pop	r19
    1aaa:	2a e0       	ldi	r18, 0x0A	; 10
    1aac:	26 9f       	mul	r18, r22
    1aae:	11 24       	eor	r1, r1
    1ab0:	30 19       	sub	r19, r0
    1ab2:	30 5d       	subi	r19, 0xD0	; 208
    1ab4:	31 93       	st	Z+, r19
    1ab6:	de f6       	brtc	.-74     	; 0x1a6e <__ultoa_invert+0xe>
    1ab8:	cf 01       	movw	r24, r30
    1aba:	08 95       	ret
    1abc:	46 2f       	mov	r20, r22
    1abe:	47 70       	andi	r20, 0x07	; 7
    1ac0:	40 5d       	subi	r20, 0xD0	; 208
    1ac2:	41 93       	st	Z+, r20
    1ac4:	b3 e0       	ldi	r27, 0x03	; 3
    1ac6:	0f d0       	rcall	.+30     	; 0x1ae6 <__ultoa_invert+0x86>
    1ac8:	c9 f7       	brne	.-14     	; 0x1abc <__ultoa_invert+0x5c>
    1aca:	f6 cf       	rjmp	.-20     	; 0x1ab8 <__ultoa_invert+0x58>
    1acc:	46 2f       	mov	r20, r22
    1ace:	4f 70       	andi	r20, 0x0F	; 15
    1ad0:	40 5d       	subi	r20, 0xD0	; 208
    1ad2:	4a 33       	cpi	r20, 0x3A	; 58
    1ad4:	18 f0       	brcs	.+6      	; 0x1adc <__ultoa_invert+0x7c>
    1ad6:	49 5d       	subi	r20, 0xD9	; 217
    1ad8:	31 fd       	sbrc	r19, 1
    1ada:	40 52       	subi	r20, 0x20	; 32
    1adc:	41 93       	st	Z+, r20
    1ade:	02 d0       	rcall	.+4      	; 0x1ae4 <__ultoa_invert+0x84>
    1ae0:	a9 f7       	brne	.-22     	; 0x1acc <__ultoa_invert+0x6c>
    1ae2:	ea cf       	rjmp	.-44     	; 0x1ab8 <__ultoa_invert+0x58>
    1ae4:	b4 e0       	ldi	r27, 0x04	; 4
    1ae6:	a6 95       	lsr	r26
    1ae8:	97 95       	ror	r25
    1aea:	87 95       	ror	r24
    1aec:	77 95       	ror	r23
    1aee:	67 95       	ror	r22
    1af0:	ba 95       	dec	r27
    1af2:	c9 f7       	brne	.-14     	; 0x1ae6 <__ultoa_invert+0x86>
    1af4:	00 97       	sbiw	r24, 0x00	; 0
    1af6:	61 05       	cpc	r22, r1
    1af8:	71 05       	cpc	r23, r1
    1afa:	08 95       	ret
    1afc:	9b 01       	movw	r18, r22
    1afe:	ac 01       	movw	r20, r24
    1b00:	0a 2e       	mov	r0, r26
    1b02:	06 94       	lsr	r0
    1b04:	57 95       	ror	r21
    1b06:	47 95       	ror	r20
    1b08:	37 95       	ror	r19
    1b0a:	27 95       	ror	r18
    1b0c:	ba 95       	dec	r27
    1b0e:	c9 f7       	brne	.-14     	; 0x1b02 <__ultoa_invert+0xa2>
    1b10:	62 0f       	add	r22, r18
    1b12:	73 1f       	adc	r23, r19
    1b14:	84 1f       	adc	r24, r20
    1b16:	95 1f       	adc	r25, r21
    1b18:	a0 1d       	adc	r26, r0
    1b1a:	08 95       	ret

00001b1c <ccp_write_io>:
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	28 ed       	ldi	r18, 0xD8	; 216
    1b20:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x7f4034>
    1b24:	6c 93       	st	X, r22
    1b26:	08 95       	ret

00001b28 <__prologue_saves__>:
    1b28:	2f 92       	push	r2
    1b2a:	3f 92       	push	r3
    1b2c:	4f 92       	push	r4
    1b2e:	5f 92       	push	r5
    1b30:	6f 92       	push	r6
    1b32:	7f 92       	push	r7
    1b34:	8f 92       	push	r8
    1b36:	9f 92       	push	r9
    1b38:	af 92       	push	r10
    1b3a:	bf 92       	push	r11
    1b3c:	cf 92       	push	r12
    1b3e:	df 92       	push	r13
    1b40:	ef 92       	push	r14
    1b42:	ff 92       	push	r15
    1b44:	0f 93       	push	r16
    1b46:	1f 93       	push	r17
    1b48:	cf 93       	push	r28
    1b4a:	df 93       	push	r29
    1b4c:	cd b7       	in	r28, 0x3d	; 61
    1b4e:	de b7       	in	r29, 0x3e	; 62
    1b50:	ca 1b       	sub	r28, r26
    1b52:	db 0b       	sbc	r29, r27
    1b54:	cd bf       	out	0x3d, r28	; 61
    1b56:	de bf       	out	0x3e, r29	; 62
    1b58:	09 94       	ijmp

00001b5a <__epilogue_restores__>:
    1b5a:	2a 88       	ldd	r2, Y+18	; 0x12
    1b5c:	39 88       	ldd	r3, Y+17	; 0x11
    1b5e:	48 88       	ldd	r4, Y+16	; 0x10
    1b60:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b62:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b64:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b66:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b68:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b6a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b6c:	b9 84       	ldd	r11, Y+9	; 0x09
    1b6e:	c8 84       	ldd	r12, Y+8	; 0x08
    1b70:	df 80       	ldd	r13, Y+7	; 0x07
    1b72:	ee 80       	ldd	r14, Y+6	; 0x06
    1b74:	fd 80       	ldd	r15, Y+5	; 0x05
    1b76:	0c 81       	ldd	r16, Y+4	; 0x04
    1b78:	1b 81       	ldd	r17, Y+3	; 0x03
    1b7a:	aa 81       	ldd	r26, Y+2	; 0x02
    1b7c:	b9 81       	ldd	r27, Y+1	; 0x01
    1b7e:	ce 0f       	add	r28, r30
    1b80:	d1 1d       	adc	r29, r1
    1b82:	cd bf       	out	0x3d, r28	; 61
    1b84:	de bf       	out	0x3e, r29	; 62
    1b86:	ed 01       	movw	r28, r26
    1b88:	08 95       	ret

00001b8a <_exit>:
    1b8a:	f8 94       	cli

00001b8c <__stop_program>:
    1b8c:	ff cf       	rjmp	.-2      	; 0x1b8c <__stop_program>
