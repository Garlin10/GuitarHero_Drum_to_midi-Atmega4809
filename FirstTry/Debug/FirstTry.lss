
FirstTry.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00802800  00001034  000010e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001000  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  00005000  00001000  000010b4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000001cf  00802804  00802804  000010ec  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  000010ec  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001148  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000000d8  00000000  00000000  00001188  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000406a  00000000  00000000  00001260  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000028a8  00000000  00000000  000052ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000c14  00000000  00000000  00007b72  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000218  00000000  00000000  00008788  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000193f  00000000  00000000  000089a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a0b  00000000  00000000  0000a2df  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000088  00000000  00000000  0000acea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__ctors_end>
       4:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
       8:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
       c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      10:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      14:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      18:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      1c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      20:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      24:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      28:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      2c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      30:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__vector_12>
      34:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      38:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      3c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      40:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      44:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      48:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      4c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      50:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      54:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      58:	0c 94 61 03 	jmp	0x6c2	; 0x6c2 <__vector_22>
      5c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      60:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      64:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      68:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      6c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      70:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      74:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      78:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      7c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      80:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      84:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      88:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      8c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      90:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      94:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      98:	0c 94 af 04 	jmp	0x95e	; 0x95e <__vector_38>
      9c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>

000000a0 <__ctors_end>:
      a0:	11 24       	eor	r1, r1
      a2:	1f be       	out	0x3f, r1	; 63
      a4:	cf ef       	ldi	r28, 0xFF	; 255
      a6:	cd bf       	out	0x3d, r28	; 61
      a8:	df e3       	ldi	r29, 0x3F	; 63
      aa:	de bf       	out	0x3e, r29	; 62

000000ac <__do_copy_data>:
      ac:	18 e2       	ldi	r17, 0x28	; 40
      ae:	a0 e0       	ldi	r26, 0x00	; 0
      b0:	b8 e2       	ldi	r27, 0x28	; 40
      b2:	e4 e3       	ldi	r30, 0x34	; 52
      b4:	f0 e1       	ldi	r31, 0x10	; 16
      b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x10>
      b8:	05 90       	lpm	r0, Z+
      ba:	0d 92       	st	X+, r0
      bc:	a4 30       	cpi	r26, 0x04	; 4
      be:	b1 07       	cpc	r27, r17
      c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0xc>

000000c2 <__do_clear_bss>:
      c2:	29 e2       	ldi	r18, 0x29	; 41
      c4:	a4 e0       	ldi	r26, 0x04	; 4
      c6:	b8 e2       	ldi	r27, 0x28	; 40
      c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
      ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
      cc:	a3 3d       	cpi	r26, 0xD3	; 211
      ce:	b2 07       	cpc	r27, r18
      d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>
      d2:	0e 94 cf 01 	call	0x39e	; 0x39e <main>
      d6:	0c 94 fe 07 	jmp	0xffc	; 0xffc <_exit>

000000da <__bad_interrupt>:
      da:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000de <button_down>:
// Return non-zero if a button matching mask is pressed.
//button_mask-ot kivenni
//20ms várok utána váltok csak állapotot
uint8_t button_down(uint8_t button_mask, char port)
{
	uint8_t PORT_INFO  = PORTE.IN;
      de:	90 91 88 04 	lds	r25, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
	switch(port)
      e2:	62 34       	cpi	r22, 0x42	; 66
      e4:	29 f0       	breq	.+10     	; 0xf0 <button_down+0x12>
      e6:	65 34       	cpi	r22, 0x45	; 69
      e8:	29 f4       	brne	.+10     	; 0xf4 <button_down+0x16>
	{
		case 'E':
		PORT_INFO = PORTE.IN;	
      ea:	90 91 88 04 	lds	r25, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
		break;
      ee:	02 c0       	rjmp	.+4      	; 0xf4 <button_down+0x16>
		case 'B':
		PORT_INFO = PORTB.IN;
      f0:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <__TEXT_REGION_LENGTH__+0x7f4428>
		break;
	}
    
	PORT_INFO &= (button_mask);
      f4:	89 23       	and	r24, r25
	if(PORT_INFO)
      f6:	11 f0       	breq	.+4      	; 0xfc <button_down+0x1e>
	{
		return 0;
      f8:	80 e0       	ldi	r24, 0x00	; 0
      fa:	08 95       	ret
	}
	else
	{
		return 1;
      fc:	81 e0       	ldi	r24, 0x01	; 1
	}
	
}
      fe:	08 95       	ret

00000100 <debounce_init>:

void debounce_init(void)
{	
    // Enable pullup on buttons
	//Bal
	E2_PORT |= (BUTTON1_MASK);
     100:	e0 e8       	ldi	r30, 0x80	; 128
     102:	f4 e0       	ldi	r31, 0x04	; 4
     104:	80 85       	ldd	r24, Z+8	; 0x08
     106:	84 60       	ori	r24, 0x04	; 4
     108:	80 87       	std	Z+8, r24	; 0x08
	E1_PORT |= (BUTTON2_MASK);
     10a:	80 85       	ldd	r24, Z+8	; 0x08
     10c:	82 60       	ori	r24, 0x02	; 2
     10e:	80 87       	std	Z+8, r24	; 0x08
	E0_PORT	|= (BUTTON3_MASK);
     110:	80 85       	ldd	r24, Z+8	; 0x08
     112:	81 60       	ori	r24, 0x01	; 1
     114:	80 87       	std	Z+8, r24	; 0x08
	
    B1_PORT |= (BUTTON4_MASK);
     116:	a0 e2       	ldi	r26, 0x20	; 32
     118:	b4 e0       	ldi	r27, 0x04	; 4
     11a:	18 96       	adiw	r26, 0x08	; 8
     11c:	8c 91       	ld	r24, X
     11e:	18 97       	sbiw	r26, 0x08	; 8
     120:	82 60       	ori	r24, 0x02	; 2
     122:	18 96       	adiw	r26, 0x08	; 8
     124:	8c 93       	st	X, r24
     126:	18 97       	sbiw	r26, 0x08	; 8
	
	PORTE.PIN2CTRL = PORT_PULLUPEN_bm;
     128:	88 e0       	ldi	r24, 0x08	; 8
     12a:	82 8b       	std	Z+18, r24	; 0x12
	PORTE.PIN1CTRL = PORT_PULLUPEN_bm;
     12c:	81 8b       	std	Z+17, r24	; 0x11
	PORTE.PIN0CTRL = PORT_PULLUPEN_bm;
     12e:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_PULLUPEN_bm;
     130:	51 96       	adiw	r26, 0x11	; 17
     132:	8c 93       	st	X, r24
     134:	08 95       	ret

00000136 <DATA_OUT>:
#define RS 0				/* .kbv Define Register Select pin */
#define EN 5 				/* .kbv Define Enable signal pin */

void DATA_OUT(unsigned char CMND)
{
	D4_PORT &= ~(1<<D4_PIN);
     136:	e0 e4       	ldi	r30, 0x40	; 64
     138:	f4 e0       	ldi	r31, 0x04	; 4
     13a:	94 81       	ldd	r25, Z+4	; 0x04
     13c:	9f 7b       	andi	r25, 0xBF	; 191
     13e:	94 83       	std	Z+4, r25	; 0x04
	D5_PORT &= ~(1<<D5_PIN);
     140:	e0 e2       	ldi	r30, 0x20	; 32
     142:	f4 e0       	ldi	r31, 0x04	; 4
     144:	94 81       	ldd	r25, Z+4	; 0x04
     146:	9b 7f       	andi	r25, 0xFB	; 251
     148:	94 83       	std	Z+4, r25	; 0x04
	D6_PORT &= ~(1<<D6_PIN);
     14a:	e0 ea       	ldi	r30, 0xA0	; 160
     14c:	f4 e0       	ldi	r31, 0x04	; 4
     14e:	94 81       	ldd	r25, Z+4	; 0x04
     150:	9f 7e       	andi	r25, 0xEF	; 239
     152:	94 83       	std	Z+4, r25	; 0x04
	D7_PORT &= ~(1<<D7_PIN);
     154:	e0 e0       	ldi	r30, 0x00	; 0
     156:	f4 e0       	ldi	r31, 0x04	; 4
     158:	94 81       	ldd	r25, Z+4	; 0x04
     15a:	9d 7f       	andi	r25, 0xFD	; 253
     15c:	94 83       	std	Z+4, r25	; 0x04
	if(CMND & (1<<4))
     15e:	84 ff       	sbrs	r24, 4
     160:	05 c0       	rjmp	.+10     	; 0x16c <DATA_OUT+0x36>
	{
		D4_PORT |= (1<<D4_PIN);
     162:	e0 e4       	ldi	r30, 0x40	; 64
     164:	f4 e0       	ldi	r31, 0x04	; 4
     166:	94 81       	ldd	r25, Z+4	; 0x04
     168:	90 64       	ori	r25, 0x40	; 64
     16a:	94 83       	std	Z+4, r25	; 0x04
	}
	if(CMND & (1<<5))
     16c:	85 ff       	sbrs	r24, 5
     16e:	05 c0       	rjmp	.+10     	; 0x17a <DATA_OUT+0x44>
	{
		D5_PORT |= (1<<D5_PIN);
     170:	e0 e2       	ldi	r30, 0x20	; 32
     172:	f4 e0       	ldi	r31, 0x04	; 4
     174:	94 81       	ldd	r25, Z+4	; 0x04
     176:	94 60       	ori	r25, 0x04	; 4
     178:	94 83       	std	Z+4, r25	; 0x04
	}
	if(CMND & (1<<6))
     17a:	86 ff       	sbrs	r24, 6
     17c:	05 c0       	rjmp	.+10     	; 0x188 <DATA_OUT+0x52>
	{
		D6_PORT |= (1<<D6_PIN);
     17e:	e0 ea       	ldi	r30, 0xA0	; 160
     180:	f4 e0       	ldi	r31, 0x04	; 4
     182:	94 81       	ldd	r25, Z+4	; 0x04
     184:	90 61       	ori	r25, 0x10	; 16
     186:	94 83       	std	Z+4, r25	; 0x04
	}
	if(CMND & (1<<7))
     188:	88 23       	and	r24, r24
     18a:	2c f4       	brge	.+10     	; 0x196 <DATA_OUT+0x60>
	{
		D7_PORT |= (1<<D7_PIN);
     18c:	e0 e0       	ldi	r30, 0x00	; 0
     18e:	f4 e0       	ldi	r31, 0x04	; 4
     190:	84 81       	ldd	r24, Z+4	; 0x04
     192:	82 60       	ori	r24, 0x02	; 2
     194:	84 83       	std	Z+4, r24	; 0x04
     196:	08 95       	ret

00000198 <LCD_Command>:
	}
}

void LCD_Command( unsigned char cmnd )
{ 
     198:	1f 93       	push	r17
     19a:	cf 93       	push	r28
     19c:	df 93       	push	r29
     19e:	18 2f       	mov	r17, r24
	DATA_OUT(cmnd & 0xF0);	/* sending upper nibble */
     1a0:	80 7f       	andi	r24, 0xF0	; 240
     1a2:	0e 94 9b 00 	call	0x136	; 0x136 <DATA_OUT>
	RS_PORT &= ~ (1<<RS);		/* RS=0, command reg. */
     1a6:	e0 e0       	ldi	r30, 0x00	; 0
     1a8:	f4 e0       	ldi	r31, 0x04	; 4
     1aa:	84 81       	ldd	r24, Z+4	; 0x04
     1ac:	8e 7f       	andi	r24, 0xFE	; 254
     1ae:	84 83       	std	Z+4, r24	; 0x04
	EN_PORT |= (1<<EN);		/* Enable pulse */
     1b0:	c0 ea       	ldi	r28, 0xA0	; 160
     1b2:	d4 e0       	ldi	r29, 0x04	; 4
     1b4:	8c 81       	ldd	r24, Y+4	; 0x04
     1b6:	80 62       	ori	r24, 0x20	; 32
     1b8:	8c 83       	std	Y+4, r24	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1ba:	86 e0       	ldi	r24, 0x06	; 6
     1bc:	8a 95       	dec	r24
     1be:	f1 f7       	brne	.-4      	; 0x1bc <LCD_Command+0x24>
     1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <LCD_Command+0x2a>
	_delay_us(1);
	EN_PORT &= ~ (1<<EN);
     1c2:	8c 81       	ldd	r24, Y+4	; 0x04
     1c4:	8f 7d       	andi	r24, 0xDF	; 223
     1c6:	8c 83       	std	Y+4, r24	; 0x04
     1c8:	87 ee       	ldi	r24, 0xE7	; 231
     1ca:	93 e0       	ldi	r25, 0x03	; 3
     1cc:	01 97       	sbiw	r24, 0x01	; 1
     1ce:	f1 f7       	brne	.-4      	; 0x1cc <LCD_Command+0x34>
     1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <LCD_Command+0x3a>
     1d2:	00 00       	nop

	_delay_us(200);

	DATA_OUT(cmnd << 4); 	/* sending upper nibble */
     1d4:	81 2f       	mov	r24, r17
     1d6:	82 95       	swap	r24
     1d8:	80 7f       	andi	r24, 0xF0	; 240
     1da:	0e 94 9b 00 	call	0x136	; 0x136 <DATA_OUT>
	EN_PORT |= (1<<EN);
     1de:	8c 81       	ldd	r24, Y+4	; 0x04
     1e0:	80 62       	ori	r24, 0x20	; 32
     1e2:	8c 83       	std	Y+4, r24	; 0x04
     1e4:	96 e0       	ldi	r25, 0x06	; 6
     1e6:	9a 95       	dec	r25
     1e8:	f1 f7       	brne	.-4      	; 0x1e6 <LCD_Command+0x4e>
     1ea:	00 c0       	rjmp	.+0      	; 0x1ec <LCD_Command+0x54>
	_delay_us(1);
	EN_PORT &= ~ (1<<EN);
     1ec:	8c 81       	ldd	r24, Y+4	; 0x04
     1ee:	8f 7d       	andi	r24, 0xDF	; 223
     1f0:	8c 83       	std	Y+4, r24	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1f2:	8f e0       	ldi	r24, 0x0F	; 15
     1f4:	97 e2       	ldi	r25, 0x27	; 39
     1f6:	01 97       	sbiw	r24, 0x01	; 1
     1f8:	f1 f7       	brne	.-4      	; 0x1f6 <LCD_Command+0x5e>
     1fa:	00 c0       	rjmp	.+0      	; 0x1fc <LCD_Command+0x64>
     1fc:	00 00       	nop
	_delay_ms(2);
}
     1fe:	df 91       	pop	r29
     200:	cf 91       	pop	r28
     202:	1f 91       	pop	r17
     204:	08 95       	ret

00000206 <LCD_Char>:


void LCD_Char( unsigned char data )
{
     206:	1f 93       	push	r17
     208:	cf 93       	push	r28
     20a:	df 93       	push	r29
     20c:	18 2f       	mov	r17, r24
	DATA_OUT(data & 0xF0); /* sending upper nibble */
     20e:	80 7f       	andi	r24, 0xF0	; 240
     210:	0e 94 9b 00 	call	0x136	; 0x136 <DATA_OUT>
	RS_PORT |= (1<<RS);		/* RS=1, data reg. */
     214:	e0 e0       	ldi	r30, 0x00	; 0
     216:	f4 e0       	ldi	r31, 0x04	; 4
     218:	84 81       	ldd	r24, Z+4	; 0x04
     21a:	81 60       	ori	r24, 0x01	; 1
     21c:	84 83       	std	Z+4, r24	; 0x04
	EN_PORT|= (1<<EN);
     21e:	c0 ea       	ldi	r28, 0xA0	; 160
     220:	d4 e0       	ldi	r29, 0x04	; 4
     222:	8c 81       	ldd	r24, Y+4	; 0x04
     224:	80 62       	ori	r24, 0x20	; 32
     226:	8c 83       	std	Y+4, r24	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     228:	86 e0       	ldi	r24, 0x06	; 6
     22a:	8a 95       	dec	r24
     22c:	f1 f7       	brne	.-4      	; 0x22a <LCD_Char+0x24>
     22e:	00 c0       	rjmp	.+0      	; 0x230 <LCD_Char+0x2a>
	_delay_us(1);
	EN_PORT &= ~ (1<<EN);
     230:	8c 81       	ldd	r24, Y+4	; 0x04
     232:	8f 7d       	andi	r24, 0xDF	; 223
     234:	8c 83       	std	Y+4, r24	; 0x04
     236:	87 ee       	ldi	r24, 0xE7	; 231
     238:	93 e0       	ldi	r25, 0x03	; 3
     23a:	01 97       	sbiw	r24, 0x01	; 1
     23c:	f1 f7       	brne	.-4      	; 0x23a <LCD_Char+0x34>
     23e:	00 c0       	rjmp	.+0      	; 0x240 <LCD_Char+0x3a>
     240:	00 00       	nop

	_delay_us(200);

	DATA_OUT(data << 4); /* sending lower nibble */
     242:	81 2f       	mov	r24, r17
     244:	82 95       	swap	r24
     246:	80 7f       	andi	r24, 0xF0	; 240
     248:	0e 94 9b 00 	call	0x136	; 0x136 <DATA_OUT>
	EN_PORT |= (1<<EN);
     24c:	8c 81       	ldd	r24, Y+4	; 0x04
     24e:	80 62       	ori	r24, 0x20	; 32
     250:	8c 83       	std	Y+4, r24	; 0x04
     252:	96 e0       	ldi	r25, 0x06	; 6
     254:	9a 95       	dec	r25
     256:	f1 f7       	brne	.-4      	; 0x254 <LCD_Char+0x4e>
     258:	00 c0       	rjmp	.+0      	; 0x25a <LCD_Char+0x54>
	_delay_us(1);
	EN_PORT &= ~ (1<<EN);
     25a:	8c 81       	ldd	r24, Y+4	; 0x04
     25c:	8f 7d       	andi	r24, 0xDF	; 223
     25e:	8c 83       	std	Y+4, r24	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     260:	8f e0       	ldi	r24, 0x0F	; 15
     262:	97 e2       	ldi	r25, 0x27	; 39
     264:	01 97       	sbiw	r24, 0x01	; 1
     266:	f1 f7       	brne	.-4      	; 0x264 <LCD_Char+0x5e>
     268:	00 c0       	rjmp	.+0      	; 0x26a <LCD_Char+0x64>
     26a:	00 00       	nop
	_delay_ms(2);
}
     26c:	df 91       	pop	r29
     26e:	cf 91       	pop	r28
     270:	1f 91       	pop	r17
     272:	08 95       	ret

00000274 <LCD_Init>:

void LCD_Init (void)			/* LCD Initialize function */
{
     274:	cf 93       	push	r28
     276:	df 93       	push	r29
	
	RS_DIR |= (1<<RS);
     278:	e0 e0       	ldi	r30, 0x00	; 0
     27a:	f4 e0       	ldi	r31, 0x04	; 4
     27c:	80 81       	ld	r24, Z
     27e:	81 60       	ori	r24, 0x01	; 1
     280:	80 83       	st	Z, r24
	EN_DIR |= (1 << EN);			/* Make LCD port direction as o/p */
     282:	a0 ea       	ldi	r26, 0xA0	; 160
     284:	b4 e0       	ldi	r27, 0x04	; 4
     286:	8c 91       	ld	r24, X
     288:	80 62       	ori	r24, 0x20	; 32
     28a:	8c 93       	st	X, r24
	D4_DIR |= (1 << D4_PIN);
     28c:	80 e4       	ldi	r24, 0x40	; 64
     28e:	94 e0       	ldi	r25, 0x04	; 4
     290:	ec 01       	movw	r28, r24
     292:	28 81       	ld	r18, Y
     294:	20 64       	ori	r18, 0x40	; 64
     296:	28 83       	st	Y, r18
	D5_DIR |= (1 << D5_PIN);
     298:	40 e2       	ldi	r20, 0x20	; 32
     29a:	54 e0       	ldi	r21, 0x04	; 4
     29c:	ea 01       	movw	r28, r20
     29e:	28 81       	ld	r18, Y
     2a0:	24 60       	ori	r18, 0x04	; 4
     2a2:	28 83       	st	Y, r18
	D6_DIR |= (1 << D6_PIN);
     2a4:	2c 91       	ld	r18, X
     2a6:	20 61       	ori	r18, 0x10	; 16
     2a8:	2c 93       	st	X, r18
	D7_DIR |= (1 << D7_PIN);
     2aa:	20 81       	ld	r18, Z
     2ac:	22 60       	ori	r18, 0x02	; 2
     2ae:	20 83       	st	Z, r18
	RS_PORT &= ~(1<<RS);
     2b0:	24 81       	ldd	r18, Z+4	; 0x04
     2b2:	2e 7f       	andi	r18, 0xFE	; 254
     2b4:	24 83       	std	Z+4, r18	; 0x04
	EN_PORT &= ~(1<<EN);
     2b6:	14 96       	adiw	r26, 0x04	; 4
     2b8:	2c 91       	ld	r18, X
     2ba:	14 97       	sbiw	r26, 0x04	; 4
     2bc:	2f 7d       	andi	r18, 0xDF	; 223
     2be:	14 96       	adiw	r26, 0x04	; 4
     2c0:	2c 93       	st	X, r18
     2c2:	14 97       	sbiw	r26, 0x04	; 4
	D4_PORT &= ~(1 << D4_PIN);
     2c4:	ec 01       	movw	r28, r24
     2c6:	2c 81       	ldd	r18, Y+4	; 0x04
     2c8:	2f 7b       	andi	r18, 0xBF	; 191
     2ca:	2c 83       	std	Y+4, r18	; 0x04
	D5_PORT &= ~(1 << D5_PIN);
     2cc:	ea 01       	movw	r28, r20
     2ce:	8c 81       	ldd	r24, Y+4	; 0x04
     2d0:	8b 7f       	andi	r24, 0xFB	; 251
     2d2:	8c 83       	std	Y+4, r24	; 0x04
	D6_PORT &= ~(1 << D6_PIN);
     2d4:	14 96       	adiw	r26, 0x04	; 4
     2d6:	8c 91       	ld	r24, X
     2d8:	14 97       	sbiw	r26, 0x04	; 4
     2da:	8f 7e       	andi	r24, 0xEF	; 239
     2dc:	14 96       	adiw	r26, 0x04	; 4
     2de:	8c 93       	st	X, r24
	D7_PORT &= ~(1 << D7_PIN);
     2e0:	84 81       	ldd	r24, Z+4	; 0x04
     2e2:	8d 7f       	andi	r24, 0xFD	; 253
     2e4:	84 83       	std	Z+4, r24	; 0x04
     2e6:	df eb       	ldi	r29, 0xBF	; 191
     2e8:	24 ed       	ldi	r18, 0xD4	; 212
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	d1 50       	subi	r29, 0x01	; 1
     2ee:	20 40       	sbci	r18, 0x00	; 0
     2f0:	80 40       	sbci	r24, 0x00	; 0
     2f2:	e1 f7       	brne	.-8      	; 0x2ec <LCD_Init+0x78>
     2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <LCD_Init+0x82>
     2f6:	00 00       	nop
	_delay_ms(30);			/* .kbv 30ms is safer with Curiosity voltage control */
	LCD_Command(0x33);		/* .kbv sets regular 8-bit mode */
     2f8:	83 e3       	ldi	r24, 0x33	; 51
     2fa:	0e 94 cc 00 	call	0x198	; 0x198 <LCD_Command>
     2fe:	c7 ea       	ldi	r28, 0xA7	; 167
     300:	d1 e6       	ldi	r29, 0x61	; 97
     302:	21 97       	sbiw	r28, 0x01	; 1
     304:	f1 f7       	brne	.-4      	; 0x302 <LCD_Init+0x8e>
     306:	00 c0       	rjmp	.+0      	; 0x308 <LCD_Init+0x94>
     308:	00 00       	nop
	_delay_ms(5);           /* .kbv needs delay */
	LCD_Command(0x32);		/* .kbv 4 bit initialization of LCD  */
     30a:	82 e3       	ldi	r24, 0x32	; 50
     30c:	0e 94 cc 00 	call	0x198	; 0x198 <LCD_Command>
	LCD_Command(0x28);              /* 2 line, 5*7 matrix in 4-bit mode */
     310:	88 e2       	ldi	r24, 0x28	; 40
     312:	0e 94 cc 00 	call	0x198	; 0x198 <LCD_Command>
	LCD_Command(0x0c);              /* Display on cursor off*/
     316:	8c e0       	ldi	r24, 0x0C	; 12
     318:	0e 94 cc 00 	call	0x198	; 0x198 <LCD_Command>
	LCD_Command(0x06);              /* Increment cursor (shift cursor to right)*/
     31c:	86 e0       	ldi	r24, 0x06	; 6
     31e:	0e 94 cc 00 	call	0x198	; 0x198 <LCD_Command>
	LCD_Command(0x01);              /* Clear display screen*/
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	0e 94 cc 00 	call	0x198	; 0x198 <LCD_Command>
     328:	8f e0       	ldi	r24, 0x0F	; 15
     32a:	97 e2       	ldi	r25, 0x27	; 39
     32c:	01 97       	sbiw	r24, 0x01	; 1
     32e:	f1 f7       	brne	.-4      	; 0x32c <LCD_Init+0xb8>
     330:	00 c0       	rjmp	.+0      	; 0x332 <LCD_Init+0xbe>
     332:	00 00       	nop
	_delay_ms(2);
}
     334:	df 91       	pop	r29
     336:	cf 91       	pop	r28
     338:	08 95       	ret

0000033a <LCD_String>:


void LCD_String (char *str)		/* Send string to LCD function */
{
     33a:	0f 93       	push	r16
     33c:	1f 93       	push	r17
     33e:	cf 93       	push	r28
     340:	df 93       	push	r29
     342:	8c 01       	movw	r16, r24
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
     344:	c0 e0       	ldi	r28, 0x00	; 0
     346:	d0 e0       	ldi	r29, 0x00	; 0
     348:	03 c0       	rjmp	.+6      	; 0x350 <LCD_String+0x16>
	{
		LCD_Char (str[i]);
     34a:	0e 94 03 01 	call	0x206	; 0x206 <LCD_Char>


void LCD_String (char *str)		/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
     34e:	21 96       	adiw	r28, 0x01	; 1
     350:	f8 01       	movw	r30, r16
     352:	ec 0f       	add	r30, r28
     354:	fd 1f       	adc	r31, r29
     356:	80 81       	ld	r24, Z
     358:	81 11       	cpse	r24, r1
     35a:	f7 cf       	rjmp	.-18     	; 0x34a <LCD_String+0x10>
	{
		LCD_Char (str[i]);
	}
}
     35c:	df 91       	pop	r29
     35e:	cf 91       	pop	r28
     360:	1f 91       	pop	r17
     362:	0f 91       	pop	r16
     364:	08 95       	ret

00000366 <LCD_String_xy>:

void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD with xy position */
{
     366:	cf 93       	push	r28
     368:	df 93       	push	r29
     36a:	ea 01       	movw	r28, r20
	if (row == 0 && pos<16)
     36c:	81 11       	cpse	r24, r1
     36e:	08 c0       	rjmp	.+16     	; 0x380 <LCD_String_xy+0x1a>
     370:	60 31       	cpi	r22, 0x10	; 16
     372:	30 f4       	brcc	.+12     	; 0x380 <LCD_String_xy+0x1a>
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
     374:	86 2f       	mov	r24, r22
     376:	8f 70       	andi	r24, 0x0F	; 15
     378:	80 68       	ori	r24, 0x80	; 128
     37a:	0e 94 cc 00 	call	0x198	; 0x198 <LCD_Command>
     37e:	09 c0       	rjmp	.+18     	; 0x392 <LCD_String_xy+0x2c>
	else if (row == 1 && pos<16)
     380:	81 30       	cpi	r24, 0x01	; 1
     382:	39 f4       	brne	.+14     	; 0x392 <LCD_String_xy+0x2c>
     384:	60 31       	cpi	r22, 0x10	; 16
     386:	28 f4       	brcc	.+10     	; 0x392 <LCD_String_xy+0x2c>
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
     388:	86 2f       	mov	r24, r22
     38a:	8f 70       	andi	r24, 0x0F	; 15
     38c:	80 6c       	ori	r24, 0xC0	; 192
     38e:	0e 94 cc 00 	call	0x198	; 0x198 <LCD_Command>
	LCD_String(str);		/* Call LCD string function */
     392:	ce 01       	movw	r24, r28
     394:	0e 94 9d 01 	call	0x33a	; 0x33a <LCD_String>
}
     398:	df 91       	pop	r29
     39a:	cf 91       	pop	r28
     39c:	08 95       	ret

0000039e <main>:
volatile int Button_Timer = 0;

enum states{Default_state, There_was_hit};
enum states state[6] = {Default_state,Default_state,Default_state,Default_state,Default_state,Default_state};
int main(void)
{
     39e:	cf 93       	push	r28
     3a0:	df 93       	push	r29
     3a2:	cd b7       	in	r28, 0x3d	; 61
     3a4:	de b7       	in	r29, 0x3e	; 62
     3a6:	d4 50       	subi	r29, 0x04	; 4
     3a8:	cd bf       	out	0x3d, r28	; 61
     3aa:	de bf       	out	0x3e, r29	; 62
	// Init clock source.
	ccp_write_io((uint8_t*)&CLKCTRL.MCLKCTRLB, 0x00);
     3ac:	60 e0       	ldi	r22, 0x00	; 0
     3ae:	81 e6       	ldi	r24, 0x61	; 97
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	0e 94 c7 07 	call	0xf8e	; 0xf8e <ccp_write_io>
	
	// Set PORTMUX.
	PORTMUX.USARTROUTEA |= PORTMUX_USART3_ALT1_gc;
     3b6:	e0 ee       	ldi	r30, 0xE0	; 224
     3b8:	f5 e0       	ldi	r31, 0x05	; 5
     3ba:	82 81       	ldd	r24, Z+2	; 0x02
     3bc:	80 64       	ori	r24, 0x40	; 64
     3be:	82 83       	std	Z+2, r24	; 0x02
	
	// Set port directions.
	PORTB.DIR = PIN4_bm;
     3c0:	80 e1       	ldi	r24, 0x10	; 16
     3c2:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <__TEXT_REGION_LENGTH__+0x7f4420>
	//PORTD.DIR = PIN6_bm;
	/* Replace with your application code */
	PORTD.OUT = 0x00;
     3c6:	10 92 64 04 	sts	0x0464, r1	; 0x800464 <__TEXT_REGION_LENGTH__+0x7f4464>
	
	//Print HELLO LCD
	LCD_Init();
     3ca:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_Init>
	LCD_String("hello");
     3ce:	80 e0       	ldi	r24, 0x00	; 0
     3d0:	90 e5       	ldi	r25, 0x50	; 80
     3d2:	0e 94 9d 01 	call	0x33a	; 0x33a <LCD_String>
	LCD_Command(0x01);              /* Clear display screen*/
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	0e 94 cc 00 	call	0x198	; 0x198 <LCD_Command>
	LCD_String_xy (0, 5, "hello");
     3dc:	40 e0       	ldi	r20, 0x00	; 0
     3de:	50 e5       	ldi	r21, 0x50	; 80
     3e0:	65 e0       	ldi	r22, 0x05	; 5
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	0e 94 b3 01 	call	0x366	; 0x366 <LCD_String_xy>
	LCD_String_xy (1, 5, "world");
     3e8:	46 e0       	ldi	r20, 0x06	; 6
     3ea:	50 e5       	ldi	r21, 0x50	; 80
     3ec:	65 e0       	ldi	r22, 0x05	; 5
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	0e 94 b3 01 	call	0x366	; 0x366 <LCD_String_xy>
	LCD_Command(0x01); 
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	0e 94 cc 00 	call	0x198	; 0x198 <LCD_Command>
	//LCD_Command(0x01);              /* Clear display screen*/
	//BUTTON INIC
	debounce_init();
     3fa:	0e 94 80 00 	call	0x100	; 0x100 <debounce_init>
	int SZAM =0;
     3fe:	00 e0       	ldi	r16, 0x00	; 0
     400:	10 e0       	ldi	r17, 0x00	; 0
		//IDe hívom a gombot
		//ELsõ állapt az TIMER állítása
		//GOMB lenyomva/Vissza
		//Utolsó állapot a TIMER ÁLLÍtása
		//GOmb felengedve/vissza
		if (button_down(BUTTON1_MASK, 'E')){
     402:	65 e4       	ldi	r22, 0x45	; 69
     404:	84 e0       	ldi	r24, 0x04	; 4
     406:	0e 94 6f 00 	call	0xde	; 0xde <button_down>
     40a:	88 23       	and	r24, r24
     40c:	09 f4       	brne	.+2      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     40e:	80 c0       	rjmp	.+256    	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
		switch(Left_Button_Machine)
     410:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     414:	81 30       	cpi	r24, 0x01	; 1
     416:	c1 f0       	breq	.+48     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     418:	30 f0       	brcs	.+12     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     41a:	82 30       	cpi	r24, 0x02	; 2
     41c:	51 f1       	breq	.+84     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     41e:	83 30       	cpi	r24, 0x03	; 3
     420:	09 f4       	brne	.+2      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     422:	63 c0       	rjmp	.+198    	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
     424:	75 c0       	rjmp	.+234    	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
		{
			case Released:
			if (button_down(BUTTON1_MASK, 'E'))
     426:	65 e4       	ldi	r22, 0x45	; 69
     428:	84 e0       	ldi	r24, 0x04	; 4
     42a:	0e 94 6f 00 	call	0xde	; 0xde <button_down>
     42e:	88 23       	and	r24, r24
     430:	09 f4       	brne	.+2      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     432:	6e c0       	rjmp	.+220    	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
			{
				Left_Button_Machine = PushedDown_Wait;
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
				Button_Timer = 1000;
     43a:	88 ee       	ldi	r24, 0xE8	; 232
     43c:	93 e0       	ldi	r25, 0x03	; 3
     43e:	80 93 0a 28 	sts	0x280A, r24	; 0x80280a <Button_Timer>
     442:	90 93 0b 28 	sts	0x280B, r25	; 0x80280b <Button_Timer+0x1>
     446:	64 c0       	rjmp	.+200    	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
			}
			break;
			case PushedDown_Wait:
			if (Button_Timer < 1)
     448:	80 91 0a 28 	lds	r24, 0x280A	; 0x80280a <Button_Timer>
     44c:	90 91 0b 28 	lds	r25, 0x280B	; 0x80280b <Button_Timer+0x1>
     450:	18 16       	cp	r1, r24
     452:	19 06       	cpc	r1, r25
     454:	0c f4       	brge	.+2      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     456:	5c c0       	rjmp	.+184    	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
			{
				if (button_down(BUTTON1_MASK, 'E'))
     458:	65 e4       	ldi	r22, 0x45	; 69
     45a:	84 e0       	ldi	r24, 0x04	; 4
     45c:	0e 94 6f 00 	call	0xde	; 0xde <button_down>
     460:	88 23       	and	r24, r24
     462:	21 f0       	breq	.+8      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
				{
					Left_Button_Machine = PushedDown_DoingSomething;
     464:	82 e0       	ldi	r24, 0x02	; 2
     466:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
     46a:	52 c0       	rjmp	.+164    	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
				}
				else
				{
					Left_Button_Machine = Released;
     46c:	10 92 00 28 	sts	0x2800, r1	; 0x802800 <__DATA_REGION_ORIGIN__>
     470:	4f c0       	rjmp	.+158    	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
				}
			}
			break;
			case PushedDown_DoingSomething:
			LCD_Command(0x01);
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	0e 94 cc 00 	call	0x198	; 0x198 <LCD_Command>
			LCD_String_xy (0, 5, "LEFT");
     478:	4c e0       	ldi	r20, 0x0C	; 12
     47a:	50 e5       	ldi	r21, 0x50	; 80
     47c:	65 e0       	ldi	r22, 0x05	; 5
     47e:	80 e0       	ldi	r24, 0x00	; 0
     480:	0e 94 b3 01 	call	0x366	; 0x366 <LCD_String_xy>
			char buf[ 1024];
				sprintf( buf, "%d", SZAM);
     484:	1f 93       	push	r17
     486:	0f 93       	push	r16
     488:	81 e1       	ldi	r24, 0x11	; 17
     48a:	90 e5       	ldi	r25, 0x50	; 80
     48c:	9f 93       	push	r25
     48e:	8f 93       	push	r24
     490:	ce 01       	movw	r24, r28
     492:	01 96       	adiw	r24, 0x01	; 1
     494:	7c 01       	movw	r14, r24
     496:	9f 93       	push	r25
     498:	8f 93       	push	r24
     49a:	0e 94 14 05 	call	0xa28	; 0xa28 <sprintf>
				LCD_String_xy (1, 5, buf);
     49e:	a7 01       	movw	r20, r14
     4a0:	65 e0       	ldi	r22, 0x05	; 5
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	0e 94 b3 01 	call	0x366	; 0x366 <LCD_String_xy>
     4a8:	9f e7       	ldi	r25, 0x7F	; 127
     4aa:	2a e1       	ldi	r18, 0x1A	; 26
     4ac:	86 e0       	ldi	r24, 0x06	; 6
     4ae:	91 50       	subi	r25, 0x01	; 1
     4b0:	20 40       	sbci	r18, 0x00	; 0
     4b2:	80 40       	sbci	r24, 0x00	; 0
     4b4:	e1 f7       	brne	.-8      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
     4b8:	00 00       	nop
			_delay_ms(100);
			SZAM++;
     4ba:	0f 5f       	subi	r16, 0xFF	; 255
     4bc:	1f 4f       	sbci	r17, 0xFF	; 255
			if (!(button_down(BUTTON1_MASK, 'E')))
     4be:	65 e4       	ldi	r22, 0x45	; 69
     4c0:	84 e0       	ldi	r24, 0x04	; 4
     4c2:	0e 94 6f 00 	call	0xde	; 0xde <button_down>
     4c6:	0f 90       	pop	r0
     4c8:	0f 90       	pop	r0
     4ca:	0f 90       	pop	r0
     4cc:	0f 90       	pop	r0
     4ce:	0f 90       	pop	r0
     4d0:	0f 90       	pop	r0
     4d2:	81 11       	cpse	r24, r1
     4d4:	1d c0       	rjmp	.+58     	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
			{
				Button_Timer = 1000;
     4d6:	88 ee       	ldi	r24, 0xE8	; 232
     4d8:	93 e0       	ldi	r25, 0x03	; 3
     4da:	80 93 0a 28 	sts	0x280A, r24	; 0x80280a <Button_Timer>
     4de:	90 93 0b 28 	sts	0x280B, r25	; 0x80280b <Button_Timer+0x1>
				Left_Button_Machine = Released_Wait;
     4e2:	83 e0       	ldi	r24, 0x03	; 3
     4e4:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
     4e8:	13 c0       	rjmp	.+38     	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
			}
			break;
			case Released_Wait:
			if (Button_Timer < 1)
     4ea:	80 91 0a 28 	lds	r24, 0x280A	; 0x80280a <Button_Timer>
     4ee:	90 91 0b 28 	lds	r25, 0x280B	; 0x80280b <Button_Timer+0x1>
     4f2:	18 16       	cp	r1, r24
     4f4:	19 06       	cpc	r1, r25
     4f6:	64 f0       	brlt	.+24     	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
			{
				if (button_down(BUTTON1_MASK, 'E'))
     4f8:	65 e4       	ldi	r22, 0x45	; 69
     4fa:	84 e0       	ldi	r24, 0x04	; 4
     4fc:	0e 94 6f 00 	call	0xde	; 0xde <button_down>
     500:	88 23       	and	r24, r24
     502:	21 f0       	breq	.+8      	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
				{
					Left_Button_Machine = PushedDown_DoingSomething;
     504:	82 e0       	ldi	r24, 0x02	; 2
     506:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
     50a:	02 c0       	rjmp	.+4      	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
				}
				else
				{
					Left_Button_Machine = Released;
     50c:	10 92 00 28 	sts	0x2800, r1	; 0x802800 <__DATA_REGION_ORIGIN__>
				LCD_String_xy (1, 5, buf);
			_delay_ms(100);
			SZAM++;
				
		}*/
		if (button_down(BUTTON2_MASK, 'E'))
     510:	65 e4       	ldi	r22, 0x45	; 69
     512:	82 e0       	ldi	r24, 0x02	; 2
     514:	0e 94 6f 00 	call	0xde	; 0xde <button_down>
     518:	88 23       	and	r24, r24
     51a:	91 f0       	breq	.+36     	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
		{
			LCD_Command(0x01); 
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	0e 94 cc 00 	call	0x198	; 0x198 <LCD_Command>
			LCD_String_xy (0, 5, "RIGHT");
     522:	44 e1       	ldi	r20, 0x14	; 20
     524:	50 e5       	ldi	r21, 0x50	; 80
     526:	65 e0       	ldi	r22, 0x05	; 5
     528:	80 e0       	ldi	r24, 0x00	; 0
     52a:	0e 94 b3 01 	call	0x366	; 0x366 <LCD_String_xy>
     52e:	9f e7       	ldi	r25, 0x7F	; 127
     530:	2a e1       	ldi	r18, 0x1A	; 26
     532:	86 e0       	ldi	r24, 0x06	; 6
     534:	91 50       	subi	r25, 0x01	; 1
     536:	20 40       	sbci	r18, 0x00	; 0
     538:	80 40       	sbci	r24, 0x00	; 0
     53a:	e1 f7       	brne	.-8      	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
     53c:	00 c0       	rjmp	.+0      	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
     53e:	00 00       	nop
			_delay_ms(100);
			
		}
		if (button_down(BUTTON3_MASK, 'E'))
     540:	65 e4       	ldi	r22, 0x45	; 69
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	0e 94 6f 00 	call	0xde	; 0xde <button_down>
     548:	88 23       	and	r24, r24
     54a:	91 f0       	breq	.+36     	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
		{
			LCD_Command(0x01); 
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	0e 94 cc 00 	call	0x198	; 0x198 <LCD_Command>
			LCD_String_xy (0, 5, "DOWN");
     552:	4a e1       	ldi	r20, 0x1A	; 26
     554:	50 e5       	ldi	r21, 0x50	; 80
     556:	65 e0       	ldi	r22, 0x05	; 5
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	0e 94 b3 01 	call	0x366	; 0x366 <LCD_String_xy>
     55e:	9f e7       	ldi	r25, 0x7F	; 127
     560:	2a e1       	ldi	r18, 0x1A	; 26
     562:	86 e0       	ldi	r24, 0x06	; 6
     564:	91 50       	subi	r25, 0x01	; 1
     566:	20 40       	sbci	r18, 0x00	; 0
     568:	80 40       	sbci	r24, 0x00	; 0
     56a:	e1 f7       	brne	.-8      	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
     56c:	00 c0       	rjmp	.+0      	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
     56e:	00 00       	nop
			_delay_ms(100);
			
		}
		if (button_down(BUTTON4_MASK, 'B'))
     570:	62 e4       	ldi	r22, 0x42	; 66
     572:	82 e0       	ldi	r24, 0x02	; 2
     574:	0e 94 6f 00 	call	0xde	; 0xde <button_down>
     578:	88 23       	and	r24, r24
     57a:	09 f4       	brne	.+2      	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
     57c:	42 cf       	rjmp	.-380    	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		{
			LCD_Command(0x01);
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	0e 94 cc 00 	call	0x198	; 0x198 <LCD_Command>
			LCD_String_xy (0, 5, "UP");
     584:	4f e1       	ldi	r20, 0x1F	; 31
     586:	50 e5       	ldi	r21, 0x50	; 80
     588:	65 e0       	ldi	r22, 0x05	; 5
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	0e 94 b3 01 	call	0x366	; 0x366 <LCD_String_xy>
     590:	9f e7       	ldi	r25, 0x7F	; 127
     592:	2a e1       	ldi	r18, 0x1A	; 26
     594:	86 e0       	ldi	r24, 0x06	; 6
     596:	91 50       	subi	r25, 0x01	; 1
     598:	20 40       	sbci	r18, 0x00	; 0
     59a:	80 40       	sbci	r24, 0x00	; 0
     59c:	e1 f7       	brne	.-8      	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
     59e:	00 c0       	rjmp	.+0      	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
     5a0:	00 00       	nop
     5a2:	2f cf       	rjmp	.-418    	; 0x402 <__LOCK_REGION_LENGTH__+0x2>

000005a4 <__vector_12>:
		}*/
		
	}
}

ISR(TCB0_INT_vect){
     5a4:	1f 92       	push	r1
     5a6:	0f 92       	push	r0
     5a8:	0f b6       	in	r0, 0x3f	; 63
     5aa:	0f 92       	push	r0
     5ac:	11 24       	eor	r1, r1
     5ae:	8f 93       	push	r24
     5b0:	9f 93       	push	r25
	TCB0.INTFLAGS = TCB_CAPT_bm;
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__TEXT_REGION_LENGTH__+0x7f4a86>
	if (Button_Timer>0)
     5b8:	80 91 0a 28 	lds	r24, 0x280A	; 0x80280a <Button_Timer>
     5bc:	90 91 0b 28 	lds	r25, 0x280B	; 0x80280b <Button_Timer+0x1>
     5c0:	18 16       	cp	r1, r24
     5c2:	19 06       	cpc	r1, r25
     5c4:	4c f4       	brge	.+18     	; 0x5d8 <__vector_12+0x34>
	{
		Button_Timer --;
     5c6:	80 91 0a 28 	lds	r24, 0x280A	; 0x80280a <Button_Timer>
     5ca:	90 91 0b 28 	lds	r25, 0x280B	; 0x80280b <Button_Timer+0x1>
     5ce:	01 97       	sbiw	r24, 0x01	; 1
     5d0:	80 93 0a 28 	sts	0x280A, r24	; 0x80280a <Button_Timer>
     5d4:	90 93 0b 28 	sts	0x280B, r25	; 0x80280b <Button_Timer+0x1>
	}
	switch(channel_looker)
     5d8:	80 91 18 28 	lds	r24, 0x2818	; 0x802818 <channel_looker>
     5dc:	82 30       	cpi	r24, 0x02	; 2
     5de:	99 f0       	breq	.+38     	; 0x606 <__vector_12+0x62>
     5e0:	28 f4       	brcc	.+10     	; 0x5ec <__vector_12+0x48>
     5e2:	88 23       	and	r24, r24
     5e4:	49 f0       	breq	.+18     	; 0x5f8 <__vector_12+0x54>
     5e6:	81 30       	cpi	r24, 0x01	; 1
     5e8:	51 f0       	breq	.+20     	; 0x5fe <__vector_12+0x5a>
     5ea:	1c c0       	rjmp	.+56     	; 0x624 <__vector_12+0x80>
     5ec:	84 30       	cpi	r24, 0x04	; 4
     5ee:	99 f0       	breq	.+38     	; 0x616 <__vector_12+0x72>
     5f0:	70 f0       	brcs	.+28     	; 0x60e <__vector_12+0x6a>
     5f2:	85 30       	cpi	r24, 0x05	; 5
     5f4:	a1 f0       	breq	.+40     	; 0x61e <__vector_12+0x7a>
     5f6:	16 c0       	rjmp	.+44     	; 0x624 <__vector_12+0x80>
	{
		case 0:
		ADC0.MUXPOS = ADC_MUXPOS_AIN0_gc;
     5f8:	10 92 06 06 	sts	0x0606, r1	; 0x800606 <__TEXT_REGION_LENGTH__+0x7f4606>
		
		break;
     5fc:	13 c0       	rjmp	.+38     	; 0x624 <__vector_12+0x80>
		
		case 1:
		ADC0.MUXPOS = ADC_MUXPOS_AIN1_gc;
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7f4606>
		break;
     604:	0f c0       	rjmp	.+30     	; 0x624 <__vector_12+0x80>
		
		case 2:
		ADC0.MUXPOS = ADC_MUXPOS_AIN2_gc;
     606:	82 e0       	ldi	r24, 0x02	; 2
     608:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7f4606>
		break;
     60c:	0b c0       	rjmp	.+22     	; 0x624 <__vector_12+0x80>
		
		case 3:
		ADC0.MUXPOS = ADC_MUXPOS_AIN3_gc;
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7f4606>
		break;
     614:	07 c0       	rjmp	.+14     	; 0x624 <__vector_12+0x80>
		
		case 4:
		ADC0.MUXPOS = ADC_MUXPOS_AIN4_gc;
     616:	84 e0       	ldi	r24, 0x04	; 4
     618:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7f4606>
		break;
     61c:	03 c0       	rjmp	.+6      	; 0x624 <__vector_12+0x80>
		
		case 5:
		ADC0.MUXPOS = ADC_MUXPOS_AIN5_gc;
     61e:	85 e0       	ldi	r24, 0x05	; 5
     620:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7f4606>
		break;
		
		//Ide egy iemr változó mindegyik gombra És ezt a Timert csökkentem de 0 alá ne menjen
	}
	ADC0.COMMAND = ADC_STCONV_bm;
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f4608>
}
     62a:	9f 91       	pop	r25
     62c:	8f 91       	pop	r24
     62e:	0f 90       	pop	r0
     630:	0f be       	out	0x3f, r0	; 63
     632:	0f 90       	pop	r0
     634:	1f 90       	pop	r1
     636:	18 95       	reti

00000638 <put_to_buffer>:
	}
	USART3.TXDATAL = note_volume;
}*/

void put_to_buffer(uint8_t note_switch,uint8_t note_NOTE,uint8_t note_volume)
{
     638:	cf 93       	push	r28
     63a:	c6 2f       	mov	r28, r22
	if(bufferLength + 3 > SIZE_OF_BUFFER)
     63c:	20 91 1b 28 	lds	r18, 0x281B	; 0x80281b <bufferLength>
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	2d 5f       	subi	r18, 0xFD	; 253
     644:	3f 4f       	sbci	r19, 0xFF	; 255
     646:	26 31       	cpi	r18, 0x16	; 22
     648:	31 05       	cpc	r19, r1
     64a:	cc f5       	brge	.+114    	; 0x6be <put_to_buffer+0x86>
	 {
		 return;
	 }
	 
	 buffer[writeIndex] = note_switch;
     64c:	e0 91 19 28 	lds	r30, 0x2819	; 0x802819 <writeIndex>
     650:	f0 e0       	ldi	r31, 0x00	; 0
     652:	e2 54       	subi	r30, 0x42	; 66
     654:	f6 4d       	sbci	r31, 0xD6	; 214
     656:	80 83       	st	Z, r24
	 writeIndex = (writeIndex + 1)%(SIZE_OF_BUFFER);
     658:	80 91 19 28 	lds	r24, 0x2819	; 0x802819 <writeIndex>
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	01 96       	adiw	r24, 0x01	; 1
     660:	25 e1       	ldi	r18, 0x15	; 21
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	b9 01       	movw	r22, r18
     666:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__divmodhi4>
     66a:	80 93 19 28 	sts	0x2819, r24	; 0x802819 <writeIndex>
	 buffer[writeIndex] = note_NOTE;
     66e:	e0 91 19 28 	lds	r30, 0x2819	; 0x802819 <writeIndex>
     672:	f0 e0       	ldi	r31, 0x00	; 0
     674:	e2 54       	subi	r30, 0x42	; 66
     676:	f6 4d       	sbci	r31, 0xD6	; 214
     678:	c0 83       	st	Z, r28
	 writeIndex = (writeIndex + 1)%(SIZE_OF_BUFFER);
     67a:	80 91 19 28 	lds	r24, 0x2819	; 0x802819 <writeIndex>
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	01 96       	adiw	r24, 0x01	; 1
     682:	b9 01       	movw	r22, r18
     684:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__divmodhi4>
     688:	80 93 19 28 	sts	0x2819, r24	; 0x802819 <writeIndex>
	 buffer[writeIndex] = note_volume;
     68c:	e0 91 19 28 	lds	r30, 0x2819	; 0x802819 <writeIndex>
     690:	f0 e0       	ldi	r31, 0x00	; 0
     692:	e2 54       	subi	r30, 0x42	; 66
     694:	f6 4d       	sbci	r31, 0xD6	; 214
     696:	40 83       	st	Z, r20
	 writeIndex = (writeIndex + 1)%(SIZE_OF_BUFFER);
     698:	80 91 19 28 	lds	r24, 0x2819	; 0x802819 <writeIndex>
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	01 96       	adiw	r24, 0x01	; 1
     6a0:	b9 01       	movw	r22, r18
     6a2:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__divmodhi4>
     6a6:	80 93 19 28 	sts	0x2819, r24	; 0x802819 <writeIndex>
	 bufferLength += 3;
     6aa:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <bufferLength>
     6ae:	8d 5f       	subi	r24, 0xFD	; 253
     6b0:	80 93 1b 28 	sts	0x281B, r24	; 0x80281b <bufferLength>
	 USART3.CTRLA |= USART_DREIE_bm; 
     6b4:	e0 e6       	ldi	r30, 0x60	; 96
     6b6:	f8 e0       	ldi	r31, 0x08	; 8
     6b8:	85 81       	ldd	r24, Z+5	; 0x05
     6ba:	80 62       	ori	r24, 0x20	; 32
     6bc:	85 83       	std	Z+5, r24	; 0x05
}
     6be:	cf 91       	pop	r28
     6c0:	08 95       	ret

000006c2 <__vector_22>:
		//Ide egy iemr változó mindegyik gombra És ezt a Timert csökkentem de 0 alá ne menjen
	}
	ADC0.COMMAND = ADC_STCONV_bm;
}
ISR(ADC0_RESRDY_vect)
{
     6c2:	1f 92       	push	r1
     6c4:	0f 92       	push	r0
     6c6:	0f b6       	in	r0, 0x3f	; 63
     6c8:	0f 92       	push	r0
     6ca:	11 24       	eor	r1, r1
     6cc:	2f 93       	push	r18
     6ce:	3f 93       	push	r19
     6d0:	4f 93       	push	r20
     6d2:	5f 93       	push	r21
     6d4:	6f 93       	push	r22
     6d6:	7f 93       	push	r23
     6d8:	8f 93       	push	r24
     6da:	9f 93       	push	r25
     6dc:	af 93       	push	r26
     6de:	bf 93       	push	r27
     6e0:	ef 93       	push	r30
     6e2:	ff 93       	push	r31
	
	uint16_t sample = ADC0.RES;
     6e4:	20 91 10 06 	lds	r18, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7f4610>
     6e8:	30 91 11 06 	lds	r19, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7f4611>
	}
	else
	{
		n = 0;
	}*/
	switch(state[channel_looker])
     6ec:	e0 91 18 28 	lds	r30, 0x2818	; 0x802818 <channel_looker>
     6f0:	f0 e0       	ldi	r31, 0x00	; 0
     6f2:	ec 5f       	subi	r30, 0xFC	; 252
     6f4:	f7 4d       	sbci	r31, 0xD7	; 215
     6f6:	80 81       	ld	r24, Z
     6f8:	88 23       	and	r24, r24
     6fa:	21 f0       	breq	.+8      	; 0x704 <__vector_22+0x42>
     6fc:	81 30       	cpi	r24, 0x01	; 1
     6fe:	09 f4       	brne	.+2      	; 0x702 <__vector_22+0x40>
     700:	a3 c0       	rjmp	.+326    	; 0x848 <__vector_22+0x186>
     702:	1c c1       	rjmp	.+568    	; 0x93c <__vector_22+0x27a>
	{
		case Default_state:
		if (sample > min_velocity[channel_looker]){
     704:	e0 91 18 28 	lds	r30, 0x2818	; 0x802818 <channel_looker>
     708:	f0 e0       	ldi	r31, 0x00	; 0
     70a:	ee 0f       	add	r30, r30
     70c:	ff 1f       	adc	r31, r31
     70e:	e8 5d       	subi	r30, 0xD8	; 216
     710:	ff 4a       	sbci	r31, 0xAF	; 175
     712:	80 81       	ld	r24, Z
     714:	91 81       	ldd	r25, Z+1	; 0x01
     716:	82 17       	cp	r24, r18
     718:	93 07       	cpc	r25, r19
     71a:	88 f4       	brcc	.+34     	; 0x73e <__vector_22+0x7c>
			actual_max_velo[channel_looker] = sample;
     71c:	e0 91 18 28 	lds	r30, 0x2818	; 0x802818 <channel_looker>
     720:	f0 e0       	ldi	r31, 0x00	; 0
     722:	ee 0f       	add	r30, r30
     724:	ff 1f       	adc	r31, r31
     726:	e4 55       	subi	r30, 0x54	; 84
     728:	f6 4d       	sbci	r31, 0xD6	; 214
     72a:	20 83       	st	Z, r18
     72c:	31 83       	std	Z+1, r19	; 0x01
			state[channel_looker] = There_was_hit;
     72e:	e0 91 18 28 	lds	r30, 0x2818	; 0x802818 <channel_looker>
     732:	f0 e0       	ldi	r31, 0x00	; 0
     734:	ec 5f       	subi	r30, 0xFC	; 252
     736:	f7 4d       	sbci	r31, 0xD7	; 215
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	80 83       	st	Z, r24
     73c:	0a c0       	rjmp	.+20     	; 0x752 <__vector_22+0x90>
		}
		else
		{
			channel_looker = (channel_looker+1)%(6);
     73e:	80 91 18 28 	lds	r24, 0x2818	; 0x802818 <channel_looker>
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	01 96       	adiw	r24, 0x01	; 1
     746:	66 e0       	ldi	r22, 0x06	; 6
     748:	70 e0       	ldi	r23, 0x00	; 0
     74a:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__divmodhi4>
     74e:	80 93 18 28 	sts	0x2818, r24	; 0x802818 <channel_looker>
		}
		//Növeli a hit timert, ha már volt ütés
		if (hit_couter[channel_looker] < time_note && hit_couter[channel_looker] > 0)
     752:	e0 91 18 28 	lds	r30, 0x2818	; 0x802818 <channel_looker>
     756:	f0 e0       	ldi	r31, 0x00	; 0
     758:	ee 0f       	add	r30, r30
     75a:	ff 1f       	adc	r31, r31
     75c:	e4 5f       	subi	r30, 0xF4	; 244
     75e:	f7 4d       	sbci	r31, 0xD7	; 215
     760:	20 81       	ld	r18, Z
     762:	31 81       	ldd	r19, Z+1	; 0x01
     764:	80 91 01 28 	lds	r24, 0x2801	; 0x802801 <time_note>
     768:	90 91 02 28 	lds	r25, 0x2802	; 0x802802 <time_note+0x1>
     76c:	28 17       	cp	r18, r24
     76e:	39 07       	cpc	r19, r25
     770:	b8 f4       	brcc	.+46     	; 0x7a0 <__vector_22+0xde>
     772:	e0 91 18 28 	lds	r30, 0x2818	; 0x802818 <channel_looker>
     776:	f0 e0       	ldi	r31, 0x00	; 0
     778:	ee 0f       	add	r30, r30
     77a:	ff 1f       	adc	r31, r31
     77c:	e4 5f       	subi	r30, 0xF4	; 244
     77e:	f7 4d       	sbci	r31, 0xD7	; 215
     780:	80 81       	ld	r24, Z
     782:	91 81       	ldd	r25, Z+1	; 0x01
     784:	89 2b       	or	r24, r25
     786:	61 f0       	breq	.+24     	; 0x7a0 <__vector_22+0xde>
		{
			hit_couter[channel_looker] ++;
     788:	e0 91 18 28 	lds	r30, 0x2818	; 0x802818 <channel_looker>
     78c:	f0 e0       	ldi	r31, 0x00	; 0
     78e:	ee 0f       	add	r30, r30
     790:	ff 1f       	adc	r31, r31
     792:	e4 5f       	subi	r30, 0xF4	; 244
     794:	f7 4d       	sbci	r31, 0xD7	; 215
     796:	80 81       	ld	r24, Z
     798:	91 81       	ldd	r25, Z+1	; 0x01
     79a:	01 96       	adiw	r24, 0x01	; 1
     79c:	80 83       	st	Z, r24
     79e:	91 83       	std	Z+1, r25	; 0x01
		}
		//belelír, ha volt ütés és lejárt az idõ
		if(hit_couter[channel_looker] > time_note)
     7a0:	e0 91 18 28 	lds	r30, 0x2818	; 0x802818 <channel_looker>
     7a4:	f0 e0       	ldi	r31, 0x00	; 0
     7a6:	ee 0f       	add	r30, r30
     7a8:	ff 1f       	adc	r31, r31
     7aa:	e4 5f       	subi	r30, 0xF4	; 244
     7ac:	f7 4d       	sbci	r31, 0xD7	; 215
     7ae:	20 81       	ld	r18, Z
     7b0:	31 81       	ldd	r19, Z+1	; 0x01
     7b2:	80 91 01 28 	lds	r24, 0x2801	; 0x802801 <time_note>
     7b6:	90 91 02 28 	lds	r25, 0x2802	; 0x802802 <time_note+0x1>
     7ba:	82 17       	cp	r24, r18
     7bc:	93 07       	cpc	r25, r19
     7be:	08 f0       	brcs	.+2      	; 0x7c2 <__vector_22+0x100>
     7c0:	bd c0       	rjmp	.+378    	; 0x93c <__vector_22+0x27a>
		{
			note_velocity[channel_looker] = (uint8_t)actual_max_velo[channel_looker];
     7c2:	e0 91 18 28 	lds	r30, 0x2818	; 0x802818 <channel_looker>
     7c6:	8e 2f       	mov	r24, r30
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	e0 91 18 28 	lds	r30, 0x2818	; 0x802818 <channel_looker>
     7ce:	f0 e0       	ldi	r31, 0x00	; 0
     7d0:	ee 0f       	add	r30, r30
     7d2:	ff 1f       	adc	r31, r31
     7d4:	e4 55       	subi	r30, 0x54	; 84
     7d6:	f6 4d       	sbci	r31, 0xD6	; 214
     7d8:	20 81       	ld	r18, Z
     7da:	31 81       	ldd	r19, Z+1	; 0x01
     7dc:	fc 01       	movw	r30, r24
     7de:	e8 54       	subi	r30, 0x48	; 72
     7e0:	f6 4d       	sbci	r31, 0xD6	; 214
     7e2:	20 83       	st	Z, r18
			if(note_velocity[channel_looker] > 127)
     7e4:	e0 91 18 28 	lds	r30, 0x2818	; 0x802818 <channel_looker>
     7e8:	f0 e0       	ldi	r31, 0x00	; 0
     7ea:	e8 54       	subi	r30, 0x48	; 72
     7ec:	f6 4d       	sbci	r31, 0xD6	; 214
     7ee:	80 81       	ld	r24, Z
     7f0:	88 23       	and	r24, r24
     7f2:	3c f4       	brge	.+14     	; 0x802 <__vector_22+0x140>
			{
				note_velocity[channel_looker] = 127;
     7f4:	e0 91 18 28 	lds	r30, 0x2818	; 0x802818 <channel_looker>
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	e8 54       	subi	r30, 0x48	; 72
     7fc:	f6 4d       	sbci	r31, 0xD6	; 214
     7fe:	8f e7       	ldi	r24, 0x7F	; 127
     800:	80 83       	st	Z, r24
			}
				put_to_buffer(note_on,note_C[channel_looker],note_velocity[channel_looker]);
     802:	e0 91 18 28 	lds	r30, 0x2818	; 0x802818 <channel_looker>
     806:	f0 e0       	ldi	r31, 0x00	; 0
     808:	e8 54       	subi	r30, 0x48	; 72
     80a:	f6 4d       	sbci	r31, 0xD6	; 214
     80c:	40 81       	ld	r20, Z
     80e:	e0 91 18 28 	lds	r30, 0x2818	; 0x802818 <channel_looker>
     812:	f0 e0       	ldi	r31, 0x00	; 0
     814:	ee 5d       	subi	r30, 0xDE	; 222
     816:	ff 4a       	sbci	r31, 0xAF	; 175
     818:	60 81       	ld	r22, Z
     81a:	80 e9       	ldi	r24, 0x90	; 144
     81c:	0e 94 1c 03 	call	0x638	; 0x638 <put_to_buffer>
			
			//GND-t mérni váltások között TÖRÖLN
			/*ADC0.MUXPOS = ADC_MUXPOS_GND_gc;
			sample = ADC0.RES;*/
			//////////////////////////////////////////////////////////////////////////////////////////////////////////////
			hit_couter[channel_looker] = 0;
     820:	e0 91 18 28 	lds	r30, 0x2818	; 0x802818 <channel_looker>
     824:	f0 e0       	ldi	r31, 0x00	; 0
     826:	ee 0f       	add	r30, r30
     828:	ff 1f       	adc	r31, r31
     82a:	e4 5f       	subi	r30, 0xF4	; 244
     82c:	f7 4d       	sbci	r31, 0xD7	; 215
     82e:	10 82       	st	Z, r1
     830:	11 82       	std	Z+1, r1	; 0x01
			//Channel change
			channel_looker = (channel_looker+1)%(6);
     832:	80 91 18 28 	lds	r24, 0x2818	; 0x802818 <channel_looker>
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	01 96       	adiw	r24, 0x01	; 1
     83a:	66 e0       	ldi	r22, 0x06	; 6
     83c:	70 e0       	ldi	r23, 0x00	; 0
     83e:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__divmodhi4>
     842:	80 93 18 28 	sts	0x2818, r24	; 0x802818 <channel_looker>
     846:	7a c0       	rjmp	.+244    	; 0x93c <__vector_22+0x27a>
		}
		break;
		case There_was_hit:
		if (actual_max_velo[channel_looker] < sample)
     848:	e0 91 18 28 	lds	r30, 0x2818	; 0x802818 <channel_looker>
     84c:	f0 e0       	ldi	r31, 0x00	; 0
     84e:	ee 0f       	add	r30, r30
     850:	ff 1f       	adc	r31, r31
     852:	e4 55       	subi	r30, 0x54	; 84
     854:	f6 4d       	sbci	r31, 0xD6	; 214
     856:	80 81       	ld	r24, Z
     858:	91 81       	ldd	r25, Z+1	; 0x01
     85a:	82 17       	cp	r24, r18
     85c:	93 07       	cpc	r25, r19
     85e:	48 f4       	brcc	.+18     	; 0x872 <__vector_22+0x1b0>
		{
			actual_max_velo[channel_looker] = sample;
     860:	e0 91 18 28 	lds	r30, 0x2818	; 0x802818 <channel_looker>
     864:	f0 e0       	ldi	r31, 0x00	; 0
     866:	ee 0f       	add	r30, r30
     868:	ff 1f       	adc	r31, r31
     86a:	e4 55       	subi	r30, 0x54	; 84
     86c:	f6 4d       	sbci	r31, 0xD6	; 214
     86e:	20 83       	st	Z, r18
     870:	31 83       	std	Z+1, r19	; 0x01
		}
		if (hit_couter[channel_looker] < time_note)
     872:	e0 91 18 28 	lds	r30, 0x2818	; 0x802818 <channel_looker>
     876:	f0 e0       	ldi	r31, 0x00	; 0
     878:	ee 0f       	add	r30, r30
     87a:	ff 1f       	adc	r31, r31
     87c:	e4 5f       	subi	r30, 0xF4	; 244
     87e:	f7 4d       	sbci	r31, 0xD7	; 215
     880:	20 81       	ld	r18, Z
     882:	31 81       	ldd	r19, Z+1	; 0x01
     884:	80 91 01 28 	lds	r24, 0x2801	; 0x802801 <time_note>
     888:	90 91 02 28 	lds	r25, 0x2802	; 0x802802 <time_note+0x1>
     88c:	28 17       	cp	r18, r24
     88e:	39 07       	cpc	r19, r25
     890:	68 f4       	brcc	.+26     	; 0x8ac <__vector_22+0x1ea>
		{
			hit_couter[channel_looker] ++;
     892:	e0 91 18 28 	lds	r30, 0x2818	; 0x802818 <channel_looker>
     896:	f0 e0       	ldi	r31, 0x00	; 0
     898:	ee 0f       	add	r30, r30
     89a:	ff 1f       	adc	r31, r31
     89c:	e4 5f       	subi	r30, 0xF4	; 244
     89e:	f7 4d       	sbci	r31, 0xD7	; 215
     8a0:	80 81       	ld	r24, Z
     8a2:	91 81       	ldd	r25, Z+1	; 0x01
     8a4:	01 96       	adiw	r24, 0x01	; 1
     8a6:	80 83       	st	Z, r24
     8a8:	91 83       	std	Z+1, r25	; 0x01
     8aa:	48 c0       	rjmp	.+144    	; 0x93c <__vector_22+0x27a>
		}
		else
		{
			
			note_velocity[channel_looker] = (uint8_t)actual_max_velo[channel_looker];
     8ac:	e0 91 18 28 	lds	r30, 0x2818	; 0x802818 <channel_looker>
     8b0:	8e 2f       	mov	r24, r30
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	e0 91 18 28 	lds	r30, 0x2818	; 0x802818 <channel_looker>
     8b8:	f0 e0       	ldi	r31, 0x00	; 0
     8ba:	ee 0f       	add	r30, r30
     8bc:	ff 1f       	adc	r31, r31
     8be:	e4 55       	subi	r30, 0x54	; 84
     8c0:	f6 4d       	sbci	r31, 0xD6	; 214
     8c2:	20 81       	ld	r18, Z
     8c4:	31 81       	ldd	r19, Z+1	; 0x01
     8c6:	fc 01       	movw	r30, r24
     8c8:	e8 54       	subi	r30, 0x48	; 72
     8ca:	f6 4d       	sbci	r31, 0xD6	; 214
     8cc:	20 83       	st	Z, r18
			if(note_velocity[channel_looker] > 127)
     8ce:	e0 91 18 28 	lds	r30, 0x2818	; 0x802818 <channel_looker>
     8d2:	f0 e0       	ldi	r31, 0x00	; 0
     8d4:	e8 54       	subi	r30, 0x48	; 72
     8d6:	f6 4d       	sbci	r31, 0xD6	; 214
     8d8:	80 81       	ld	r24, Z
     8da:	88 23       	and	r24, r24
     8dc:	3c f4       	brge	.+14     	; 0x8ec <__vector_22+0x22a>
			{
				note_velocity[channel_looker] = 127;
     8de:	e0 91 18 28 	lds	r30, 0x2818	; 0x802818 <channel_looker>
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	e8 54       	subi	r30, 0x48	; 72
     8e6:	f6 4d       	sbci	r31, 0xD6	; 214
     8e8:	8f e7       	ldi	r24, 0x7F	; 127
     8ea:	80 83       	st	Z, r24
			}
				put_to_buffer(note_on,note_C[channel_looker],note_velocity[channel_looker]);
     8ec:	e0 91 18 28 	lds	r30, 0x2818	; 0x802818 <channel_looker>
     8f0:	f0 e0       	ldi	r31, 0x00	; 0
     8f2:	e8 54       	subi	r30, 0x48	; 72
     8f4:	f6 4d       	sbci	r31, 0xD6	; 214
     8f6:	40 81       	ld	r20, Z
     8f8:	e0 91 18 28 	lds	r30, 0x2818	; 0x802818 <channel_looker>
     8fc:	f0 e0       	ldi	r31, 0x00	; 0
     8fe:	ee 5d       	subi	r30, 0xDE	; 222
     900:	ff 4a       	sbci	r31, 0xAF	; 175
     902:	60 81       	ld	r22, Z
     904:	80 e9       	ldi	r24, 0x90	; 144
     906:	0e 94 1c 03 	call	0x638	; 0x638 <put_to_buffer>
			
			//GND-t mérni váltások között TÖRÖLN
			/*ADC0.MUXPOS = ADC_MUXPOS_GND_gc;
			sample = ADC0.RES;*/
			//////////////////////////////////////////////////////////////////////////////////////////////////////////////
			hit_couter[channel_looker] = 0;
     90a:	e0 91 18 28 	lds	r30, 0x2818	; 0x802818 <channel_looker>
     90e:	f0 e0       	ldi	r31, 0x00	; 0
     910:	ee 0f       	add	r30, r30
     912:	ff 1f       	adc	r31, r31
     914:	e4 5f       	subi	r30, 0xF4	; 244
     916:	f7 4d       	sbci	r31, 0xD7	; 215
     918:	10 82       	st	Z, r1
     91a:	11 82       	std	Z+1, r1	; 0x01
			state[channel_looker] = Default_state;
     91c:	e0 91 18 28 	lds	r30, 0x2818	; 0x802818 <channel_looker>
     920:	f0 e0       	ldi	r31, 0x00	; 0
     922:	ec 5f       	subi	r30, 0xFC	; 252
     924:	f7 4d       	sbci	r31, 0xD7	; 215
     926:	10 82       	st	Z, r1
			channel_looker = (channel_looker+1)%(6);
     928:	80 91 18 28 	lds	r24, 0x2818	; 0x802818 <channel_looker>
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	01 96       	adiw	r24, 0x01	; 1
     930:	66 e0       	ldi	r22, 0x06	; 6
     932:	70 e0       	ldi	r23, 0x00	; 0
     934:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__divmodhi4>
     938:	80 93 18 28 	sts	0x2818, r24	; 0x802818 <channel_looker>
	}
	
	
	
	
}
     93c:	ff 91       	pop	r31
     93e:	ef 91       	pop	r30
     940:	bf 91       	pop	r27
     942:	af 91       	pop	r26
     944:	9f 91       	pop	r25
     946:	8f 91       	pop	r24
     948:	7f 91       	pop	r23
     94a:	6f 91       	pop	r22
     94c:	5f 91       	pop	r21
     94e:	4f 91       	pop	r20
     950:	3f 91       	pop	r19
     952:	2f 91       	pop	r18
     954:	0f 90       	pop	r0
     956:	0f be       	out	0x3f, r0	; 63
     958:	0f 90       	pop	r0
     95a:	1f 90       	pop	r1
     95c:	18 95       	reti

0000095e <__vector_38>:
	 bufferLength += 3;
	 USART3.CTRLA |= USART_DREIE_bm; 
}
 
ISR(USART3_DRE_vect)
{
     95e:	1f 92       	push	r1
     960:	0f 92       	push	r0
     962:	0f b6       	in	r0, 0x3f	; 63
     964:	0f 92       	push	r0
     966:	11 24       	eor	r1, r1
     968:	5f 93       	push	r21
     96a:	6f 93       	push	r22
     96c:	7f 93       	push	r23
     96e:	8f 93       	push	r24
     970:	9f 93       	push	r25
     972:	af 93       	push	r26
     974:	bf 93       	push	r27
     976:	ef 93       	push	r30
     978:	ff 93       	push	r31
	
	if(bufferLength == 0)
     97a:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <bufferLength>
     97e:	81 11       	cpse	r24, r1
     980:	06 c0       	rjmp	.+12     	; 0x98e <__vector_38+0x30>
	{
		USART3.CTRLA &= ~USART_DREIE_bm;
     982:	e0 e6       	ldi	r30, 0x60	; 96
     984:	f8 e0       	ldi	r31, 0x08	; 8
     986:	85 81       	ldd	r24, Z+5	; 0x05
     988:	8f 7d       	andi	r24, 0xDF	; 223
     98a:	85 83       	std	Z+5, r24	; 0x05
     98c:	17 c0       	rjmp	.+46     	; 0x9bc <__vector_38+0x5e>
		
	}
	else
	{
		USART3.TXDATAL = buffer[readIndex];
     98e:	e0 91 1a 28 	lds	r30, 0x281A	; 0x80281a <readIndex>
     992:	f0 e0       	ldi	r31, 0x00	; 0
     994:	e2 54       	subi	r30, 0x42	; 66
     996:	f6 4d       	sbci	r31, 0xD6	; 214
     998:	80 81       	ld	r24, Z
     99a:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7f4862>
		readIndex = (readIndex + 1)%(SIZE_OF_BUFFER);
     99e:	80 91 1a 28 	lds	r24, 0x281A	; 0x80281a <readIndex>
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	01 96       	adiw	r24, 0x01	; 1
     9a6:	65 e1       	ldi	r22, 0x15	; 21
     9a8:	70 e0       	ldi	r23, 0x00	; 0
     9aa:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__divmodhi4>
     9ae:	80 93 1a 28 	sts	0x281A, r24	; 0x80281a <readIndex>
		bufferLength --;
     9b2:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <bufferLength>
     9b6:	81 50       	subi	r24, 0x01	; 1
     9b8:	80 93 1b 28 	sts	0x281B, r24	; 0x80281b <bufferLength>
	}
     9bc:	ff 91       	pop	r31
     9be:	ef 91       	pop	r30
     9c0:	bf 91       	pop	r27
     9c2:	af 91       	pop	r26
     9c4:	9f 91       	pop	r25
     9c6:	8f 91       	pop	r24
     9c8:	7f 91       	pop	r23
     9ca:	6f 91       	pop	r22
     9cc:	5f 91       	pop	r21
     9ce:	0f 90       	pop	r0
     9d0:	0f be       	out	0x3f, r0	; 63
     9d2:	0f 90       	pop	r0
     9d4:	1f 90       	pop	r1
     9d6:	18 95       	reti

000009d8 <__divmodhi4>:
     9d8:	97 fb       	bst	r25, 7
     9da:	07 2e       	mov	r0, r23
     9dc:	16 f4       	brtc	.+4      	; 0x9e2 <__divmodhi4+0xa>
     9de:	00 94       	com	r0
     9e0:	07 d0       	rcall	.+14     	; 0x9f0 <__divmodhi4_neg1>
     9e2:	77 fd       	sbrc	r23, 7
     9e4:	09 d0       	rcall	.+18     	; 0x9f8 <__divmodhi4_neg2>
     9e6:	0e 94 00 05 	call	0xa00	; 0xa00 <__udivmodhi4>
     9ea:	07 fc       	sbrc	r0, 7
     9ec:	05 d0       	rcall	.+10     	; 0x9f8 <__divmodhi4_neg2>
     9ee:	3e f4       	brtc	.+14     	; 0x9fe <__divmodhi4_exit>

000009f0 <__divmodhi4_neg1>:
     9f0:	90 95       	com	r25
     9f2:	81 95       	neg	r24
     9f4:	9f 4f       	sbci	r25, 0xFF	; 255
     9f6:	08 95       	ret

000009f8 <__divmodhi4_neg2>:
     9f8:	70 95       	com	r23
     9fa:	61 95       	neg	r22
     9fc:	7f 4f       	sbci	r23, 0xFF	; 255

000009fe <__divmodhi4_exit>:
     9fe:	08 95       	ret

00000a00 <__udivmodhi4>:
     a00:	aa 1b       	sub	r26, r26
     a02:	bb 1b       	sub	r27, r27
     a04:	51 e1       	ldi	r21, 0x11	; 17
     a06:	07 c0       	rjmp	.+14     	; 0xa16 <__udivmodhi4_ep>

00000a08 <__udivmodhi4_loop>:
     a08:	aa 1f       	adc	r26, r26
     a0a:	bb 1f       	adc	r27, r27
     a0c:	a6 17       	cp	r26, r22
     a0e:	b7 07       	cpc	r27, r23
     a10:	10 f0       	brcs	.+4      	; 0xa16 <__udivmodhi4_ep>
     a12:	a6 1b       	sub	r26, r22
     a14:	b7 0b       	sbc	r27, r23

00000a16 <__udivmodhi4_ep>:
     a16:	88 1f       	adc	r24, r24
     a18:	99 1f       	adc	r25, r25
     a1a:	5a 95       	dec	r21
     a1c:	a9 f7       	brne	.-22     	; 0xa08 <__udivmodhi4_loop>
     a1e:	80 95       	com	r24
     a20:	90 95       	com	r25
     a22:	bc 01       	movw	r22, r24
     a24:	cd 01       	movw	r24, r26
     a26:	08 95       	ret

00000a28 <sprintf>:
     a28:	ae e0       	ldi	r26, 0x0E	; 14
     a2a:	b0 e0       	ldi	r27, 0x00	; 0
     a2c:	ea e1       	ldi	r30, 0x1A	; 26
     a2e:	f5 e0       	ldi	r31, 0x05	; 5
     a30:	0c 94 db 07 	jmp	0xfb6	; 0xfb6 <__prologue_saves__+0x1c>
     a34:	0d 89       	ldd	r16, Y+21	; 0x15
     a36:	1e 89       	ldd	r17, Y+22	; 0x16
     a38:	86 e0       	ldi	r24, 0x06	; 6
     a3a:	8c 83       	std	Y+4, r24	; 0x04
     a3c:	09 83       	std	Y+1, r16	; 0x01
     a3e:	1a 83       	std	Y+2, r17	; 0x02
     a40:	8f ef       	ldi	r24, 0xFF	; 255
     a42:	9f e7       	ldi	r25, 0x7F	; 127
     a44:	8d 83       	std	Y+5, r24	; 0x05
     a46:	9e 83       	std	Y+6, r25	; 0x06
     a48:	ae 01       	movw	r20, r28
     a4a:	47 5e       	subi	r20, 0xE7	; 231
     a4c:	5f 4f       	sbci	r21, 0xFF	; 255
     a4e:	6f 89       	ldd	r22, Y+23	; 0x17
     a50:	78 8d       	ldd	r23, Y+24	; 0x18
     a52:	ce 01       	movw	r24, r28
     a54:	01 96       	adiw	r24, 0x01	; 1
     a56:	0e 94 36 05 	call	0xa6c	; 0xa6c <vfprintf>
     a5a:	ef 81       	ldd	r30, Y+7	; 0x07
     a5c:	f8 85       	ldd	r31, Y+8	; 0x08
     a5e:	e0 0f       	add	r30, r16
     a60:	f1 1f       	adc	r31, r17
     a62:	10 82       	st	Z, r1
     a64:	2e 96       	adiw	r28, 0x0e	; 14
     a66:	e4 e0       	ldi	r30, 0x04	; 4
     a68:	0c 94 f4 07 	jmp	0xfe8	; 0xfe8 <__epilogue_restores__+0x1c>

00000a6c <vfprintf>:
     a6c:	ab e0       	ldi	r26, 0x0B	; 11
     a6e:	b0 e0       	ldi	r27, 0x00	; 0
     a70:	ec e3       	ldi	r30, 0x3C	; 60
     a72:	f5 e0       	ldi	r31, 0x05	; 5
     a74:	0c 94 cd 07 	jmp	0xf9a	; 0xf9a <__prologue_saves__>
     a78:	6c 01       	movw	r12, r24
     a7a:	7b 01       	movw	r14, r22
     a7c:	8a 01       	movw	r16, r20
     a7e:	fc 01       	movw	r30, r24
     a80:	16 82       	std	Z+6, r1	; 0x06
     a82:	17 82       	std	Z+7, r1	; 0x07
     a84:	83 81       	ldd	r24, Z+3	; 0x03
     a86:	81 ff       	sbrs	r24, 1
     a88:	cc c1       	rjmp	.+920    	; 0xe22 <vfprintf+0x3b6>
     a8a:	ce 01       	movw	r24, r28
     a8c:	01 96       	adiw	r24, 0x01	; 1
     a8e:	3c 01       	movw	r6, r24
     a90:	f6 01       	movw	r30, r12
     a92:	93 81       	ldd	r25, Z+3	; 0x03
     a94:	f7 01       	movw	r30, r14
     a96:	93 fd       	sbrc	r25, 3
     a98:	85 91       	lpm	r24, Z+
     a9a:	93 ff       	sbrs	r25, 3
     a9c:	81 91       	ld	r24, Z+
     a9e:	7f 01       	movw	r14, r30
     aa0:	88 23       	and	r24, r24
     aa2:	09 f4       	brne	.+2      	; 0xaa6 <vfprintf+0x3a>
     aa4:	ba c1       	rjmp	.+884    	; 0xe1a <vfprintf+0x3ae>
     aa6:	85 32       	cpi	r24, 0x25	; 37
     aa8:	39 f4       	brne	.+14     	; 0xab8 <vfprintf+0x4c>
     aaa:	93 fd       	sbrc	r25, 3
     aac:	85 91       	lpm	r24, Z+
     aae:	93 ff       	sbrs	r25, 3
     ab0:	81 91       	ld	r24, Z+
     ab2:	7f 01       	movw	r14, r30
     ab4:	85 32       	cpi	r24, 0x25	; 37
     ab6:	29 f4       	brne	.+10     	; 0xac2 <vfprintf+0x56>
     ab8:	b6 01       	movw	r22, r12
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	0e 94 2d 07 	call	0xe5a	; 0xe5a <fputc>
     ac0:	e7 cf       	rjmp	.-50     	; 0xa90 <vfprintf+0x24>
     ac2:	91 2c       	mov	r9, r1
     ac4:	21 2c       	mov	r2, r1
     ac6:	31 2c       	mov	r3, r1
     ac8:	ff e1       	ldi	r31, 0x1F	; 31
     aca:	f3 15       	cp	r31, r3
     acc:	d8 f0       	brcs	.+54     	; 0xb04 <vfprintf+0x98>
     ace:	8b 32       	cpi	r24, 0x2B	; 43
     ad0:	79 f0       	breq	.+30     	; 0xaf0 <vfprintf+0x84>
     ad2:	38 f4       	brcc	.+14     	; 0xae2 <vfprintf+0x76>
     ad4:	80 32       	cpi	r24, 0x20	; 32
     ad6:	79 f0       	breq	.+30     	; 0xaf6 <vfprintf+0x8a>
     ad8:	83 32       	cpi	r24, 0x23	; 35
     ada:	a1 f4       	brne	.+40     	; 0xb04 <vfprintf+0x98>
     adc:	23 2d       	mov	r18, r3
     ade:	20 61       	ori	r18, 0x10	; 16
     ae0:	1d c0       	rjmp	.+58     	; 0xb1c <vfprintf+0xb0>
     ae2:	8d 32       	cpi	r24, 0x2D	; 45
     ae4:	61 f0       	breq	.+24     	; 0xafe <vfprintf+0x92>
     ae6:	80 33       	cpi	r24, 0x30	; 48
     ae8:	69 f4       	brne	.+26     	; 0xb04 <vfprintf+0x98>
     aea:	23 2d       	mov	r18, r3
     aec:	21 60       	ori	r18, 0x01	; 1
     aee:	16 c0       	rjmp	.+44     	; 0xb1c <vfprintf+0xb0>
     af0:	83 2d       	mov	r24, r3
     af2:	82 60       	ori	r24, 0x02	; 2
     af4:	38 2e       	mov	r3, r24
     af6:	e3 2d       	mov	r30, r3
     af8:	e4 60       	ori	r30, 0x04	; 4
     afa:	3e 2e       	mov	r3, r30
     afc:	2a c0       	rjmp	.+84     	; 0xb52 <vfprintf+0xe6>
     afe:	f3 2d       	mov	r31, r3
     b00:	f8 60       	ori	r31, 0x08	; 8
     b02:	1d c0       	rjmp	.+58     	; 0xb3e <vfprintf+0xd2>
     b04:	37 fc       	sbrc	r3, 7
     b06:	2d c0       	rjmp	.+90     	; 0xb62 <vfprintf+0xf6>
     b08:	20 ed       	ldi	r18, 0xD0	; 208
     b0a:	28 0f       	add	r18, r24
     b0c:	2a 30       	cpi	r18, 0x0A	; 10
     b0e:	40 f0       	brcs	.+16     	; 0xb20 <vfprintf+0xb4>
     b10:	8e 32       	cpi	r24, 0x2E	; 46
     b12:	b9 f4       	brne	.+46     	; 0xb42 <vfprintf+0xd6>
     b14:	36 fc       	sbrc	r3, 6
     b16:	81 c1       	rjmp	.+770    	; 0xe1a <vfprintf+0x3ae>
     b18:	23 2d       	mov	r18, r3
     b1a:	20 64       	ori	r18, 0x40	; 64
     b1c:	32 2e       	mov	r3, r18
     b1e:	19 c0       	rjmp	.+50     	; 0xb52 <vfprintf+0xe6>
     b20:	36 fe       	sbrs	r3, 6
     b22:	06 c0       	rjmp	.+12     	; 0xb30 <vfprintf+0xc4>
     b24:	8a e0       	ldi	r24, 0x0A	; 10
     b26:	98 9e       	mul	r9, r24
     b28:	20 0d       	add	r18, r0
     b2a:	11 24       	eor	r1, r1
     b2c:	92 2e       	mov	r9, r18
     b2e:	11 c0       	rjmp	.+34     	; 0xb52 <vfprintf+0xe6>
     b30:	ea e0       	ldi	r30, 0x0A	; 10
     b32:	2e 9e       	mul	r2, r30
     b34:	20 0d       	add	r18, r0
     b36:	11 24       	eor	r1, r1
     b38:	22 2e       	mov	r2, r18
     b3a:	f3 2d       	mov	r31, r3
     b3c:	f0 62       	ori	r31, 0x20	; 32
     b3e:	3f 2e       	mov	r3, r31
     b40:	08 c0       	rjmp	.+16     	; 0xb52 <vfprintf+0xe6>
     b42:	8c 36       	cpi	r24, 0x6C	; 108
     b44:	21 f4       	brne	.+8      	; 0xb4e <vfprintf+0xe2>
     b46:	83 2d       	mov	r24, r3
     b48:	80 68       	ori	r24, 0x80	; 128
     b4a:	38 2e       	mov	r3, r24
     b4c:	02 c0       	rjmp	.+4      	; 0xb52 <vfprintf+0xe6>
     b4e:	88 36       	cpi	r24, 0x68	; 104
     b50:	41 f4       	brne	.+16     	; 0xb62 <vfprintf+0xf6>
     b52:	f7 01       	movw	r30, r14
     b54:	93 fd       	sbrc	r25, 3
     b56:	85 91       	lpm	r24, Z+
     b58:	93 ff       	sbrs	r25, 3
     b5a:	81 91       	ld	r24, Z+
     b5c:	7f 01       	movw	r14, r30
     b5e:	81 11       	cpse	r24, r1
     b60:	b3 cf       	rjmp	.-154    	; 0xac8 <vfprintf+0x5c>
     b62:	98 2f       	mov	r25, r24
     b64:	9f 7d       	andi	r25, 0xDF	; 223
     b66:	95 54       	subi	r25, 0x45	; 69
     b68:	93 30       	cpi	r25, 0x03	; 3
     b6a:	28 f4       	brcc	.+10     	; 0xb76 <vfprintf+0x10a>
     b6c:	0c 5f       	subi	r16, 0xFC	; 252
     b6e:	1f 4f       	sbci	r17, 0xFF	; 255
     b70:	9f e3       	ldi	r25, 0x3F	; 63
     b72:	99 83       	std	Y+1, r25	; 0x01
     b74:	0d c0       	rjmp	.+26     	; 0xb90 <vfprintf+0x124>
     b76:	83 36       	cpi	r24, 0x63	; 99
     b78:	31 f0       	breq	.+12     	; 0xb86 <vfprintf+0x11a>
     b7a:	83 37       	cpi	r24, 0x73	; 115
     b7c:	71 f0       	breq	.+28     	; 0xb9a <vfprintf+0x12e>
     b7e:	83 35       	cpi	r24, 0x53	; 83
     b80:	09 f0       	breq	.+2      	; 0xb84 <vfprintf+0x118>
     b82:	59 c0       	rjmp	.+178    	; 0xc36 <vfprintf+0x1ca>
     b84:	21 c0       	rjmp	.+66     	; 0xbc8 <vfprintf+0x15c>
     b86:	f8 01       	movw	r30, r16
     b88:	80 81       	ld	r24, Z
     b8a:	89 83       	std	Y+1, r24	; 0x01
     b8c:	0e 5f       	subi	r16, 0xFE	; 254
     b8e:	1f 4f       	sbci	r17, 0xFF	; 255
     b90:	88 24       	eor	r8, r8
     b92:	83 94       	inc	r8
     b94:	91 2c       	mov	r9, r1
     b96:	53 01       	movw	r10, r6
     b98:	13 c0       	rjmp	.+38     	; 0xbc0 <vfprintf+0x154>
     b9a:	28 01       	movw	r4, r16
     b9c:	f2 e0       	ldi	r31, 0x02	; 2
     b9e:	4f 0e       	add	r4, r31
     ba0:	51 1c       	adc	r5, r1
     ba2:	f8 01       	movw	r30, r16
     ba4:	a0 80       	ld	r10, Z
     ba6:	b1 80       	ldd	r11, Z+1	; 0x01
     ba8:	36 fe       	sbrs	r3, 6
     baa:	03 c0       	rjmp	.+6      	; 0xbb2 <vfprintf+0x146>
     bac:	69 2d       	mov	r22, r9
     bae:	70 e0       	ldi	r23, 0x00	; 0
     bb0:	02 c0       	rjmp	.+4      	; 0xbb6 <vfprintf+0x14a>
     bb2:	6f ef       	ldi	r22, 0xFF	; 255
     bb4:	7f ef       	ldi	r23, 0xFF	; 255
     bb6:	c5 01       	movw	r24, r10
     bb8:	0e 94 22 07 	call	0xe44	; 0xe44 <strnlen>
     bbc:	4c 01       	movw	r8, r24
     bbe:	82 01       	movw	r16, r4
     bc0:	f3 2d       	mov	r31, r3
     bc2:	ff 77       	andi	r31, 0x7F	; 127
     bc4:	3f 2e       	mov	r3, r31
     bc6:	16 c0       	rjmp	.+44     	; 0xbf4 <vfprintf+0x188>
     bc8:	28 01       	movw	r4, r16
     bca:	22 e0       	ldi	r18, 0x02	; 2
     bcc:	42 0e       	add	r4, r18
     bce:	51 1c       	adc	r5, r1
     bd0:	f8 01       	movw	r30, r16
     bd2:	a0 80       	ld	r10, Z
     bd4:	b1 80       	ldd	r11, Z+1	; 0x01
     bd6:	36 fe       	sbrs	r3, 6
     bd8:	03 c0       	rjmp	.+6      	; 0xbe0 <vfprintf+0x174>
     bda:	69 2d       	mov	r22, r9
     bdc:	70 e0       	ldi	r23, 0x00	; 0
     bde:	02 c0       	rjmp	.+4      	; 0xbe4 <vfprintf+0x178>
     be0:	6f ef       	ldi	r22, 0xFF	; 255
     be2:	7f ef       	ldi	r23, 0xFF	; 255
     be4:	c5 01       	movw	r24, r10
     be6:	0e 94 17 07 	call	0xe2e	; 0xe2e <strnlen_P>
     bea:	4c 01       	movw	r8, r24
     bec:	f3 2d       	mov	r31, r3
     bee:	f0 68       	ori	r31, 0x80	; 128
     bf0:	3f 2e       	mov	r3, r31
     bf2:	82 01       	movw	r16, r4
     bf4:	33 fc       	sbrc	r3, 3
     bf6:	1b c0       	rjmp	.+54     	; 0xc2e <vfprintf+0x1c2>
     bf8:	82 2d       	mov	r24, r2
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	88 16       	cp	r8, r24
     bfe:	99 06       	cpc	r9, r25
     c00:	b0 f4       	brcc	.+44     	; 0xc2e <vfprintf+0x1c2>
     c02:	b6 01       	movw	r22, r12
     c04:	80 e2       	ldi	r24, 0x20	; 32
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	0e 94 2d 07 	call	0xe5a	; 0xe5a <fputc>
     c0c:	2a 94       	dec	r2
     c0e:	f4 cf       	rjmp	.-24     	; 0xbf8 <vfprintf+0x18c>
     c10:	f5 01       	movw	r30, r10
     c12:	37 fc       	sbrc	r3, 7
     c14:	85 91       	lpm	r24, Z+
     c16:	37 fe       	sbrs	r3, 7
     c18:	81 91       	ld	r24, Z+
     c1a:	5f 01       	movw	r10, r30
     c1c:	b6 01       	movw	r22, r12
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	0e 94 2d 07 	call	0xe5a	; 0xe5a <fputc>
     c24:	21 10       	cpse	r2, r1
     c26:	2a 94       	dec	r2
     c28:	21 e0       	ldi	r18, 0x01	; 1
     c2a:	82 1a       	sub	r8, r18
     c2c:	91 08       	sbc	r9, r1
     c2e:	81 14       	cp	r8, r1
     c30:	91 04       	cpc	r9, r1
     c32:	71 f7       	brne	.-36     	; 0xc10 <vfprintf+0x1a4>
     c34:	e8 c0       	rjmp	.+464    	; 0xe06 <vfprintf+0x39a>
     c36:	84 36       	cpi	r24, 0x64	; 100
     c38:	11 f0       	breq	.+4      	; 0xc3e <vfprintf+0x1d2>
     c3a:	89 36       	cpi	r24, 0x69	; 105
     c3c:	41 f5       	brne	.+80     	; 0xc8e <vfprintf+0x222>
     c3e:	f8 01       	movw	r30, r16
     c40:	37 fe       	sbrs	r3, 7
     c42:	07 c0       	rjmp	.+14     	; 0xc52 <vfprintf+0x1e6>
     c44:	60 81       	ld	r22, Z
     c46:	71 81       	ldd	r23, Z+1	; 0x01
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	0c 5f       	subi	r16, 0xFC	; 252
     c4e:	1f 4f       	sbci	r17, 0xFF	; 255
     c50:	08 c0       	rjmp	.+16     	; 0xc62 <vfprintf+0x1f6>
     c52:	60 81       	ld	r22, Z
     c54:	71 81       	ldd	r23, Z+1	; 0x01
     c56:	07 2e       	mov	r0, r23
     c58:	00 0c       	add	r0, r0
     c5a:	88 0b       	sbc	r24, r24
     c5c:	99 0b       	sbc	r25, r25
     c5e:	0e 5f       	subi	r16, 0xFE	; 254
     c60:	1f 4f       	sbci	r17, 0xFF	; 255
     c62:	f3 2d       	mov	r31, r3
     c64:	ff 76       	andi	r31, 0x6F	; 111
     c66:	3f 2e       	mov	r3, r31
     c68:	97 ff       	sbrs	r25, 7
     c6a:	09 c0       	rjmp	.+18     	; 0xc7e <vfprintf+0x212>
     c6c:	90 95       	com	r25
     c6e:	80 95       	com	r24
     c70:	70 95       	com	r23
     c72:	61 95       	neg	r22
     c74:	7f 4f       	sbci	r23, 0xFF	; 255
     c76:	8f 4f       	sbci	r24, 0xFF	; 255
     c78:	9f 4f       	sbci	r25, 0xFF	; 255
     c7a:	f0 68       	ori	r31, 0x80	; 128
     c7c:	3f 2e       	mov	r3, r31
     c7e:	2a e0       	ldi	r18, 0x0A	; 10
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	a3 01       	movw	r20, r6
     c84:	0e 94 69 07 	call	0xed2	; 0xed2 <__ultoa_invert>
     c88:	88 2e       	mov	r8, r24
     c8a:	86 18       	sub	r8, r6
     c8c:	45 c0       	rjmp	.+138    	; 0xd18 <vfprintf+0x2ac>
     c8e:	85 37       	cpi	r24, 0x75	; 117
     c90:	31 f4       	brne	.+12     	; 0xc9e <vfprintf+0x232>
     c92:	23 2d       	mov	r18, r3
     c94:	2f 7e       	andi	r18, 0xEF	; 239
     c96:	b2 2e       	mov	r11, r18
     c98:	2a e0       	ldi	r18, 0x0A	; 10
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	25 c0       	rjmp	.+74     	; 0xce8 <vfprintf+0x27c>
     c9e:	93 2d       	mov	r25, r3
     ca0:	99 7f       	andi	r25, 0xF9	; 249
     ca2:	b9 2e       	mov	r11, r25
     ca4:	8f 36       	cpi	r24, 0x6F	; 111
     ca6:	c1 f0       	breq	.+48     	; 0xcd8 <vfprintf+0x26c>
     ca8:	18 f4       	brcc	.+6      	; 0xcb0 <vfprintf+0x244>
     caa:	88 35       	cpi	r24, 0x58	; 88
     cac:	79 f0       	breq	.+30     	; 0xccc <vfprintf+0x260>
     cae:	b5 c0       	rjmp	.+362    	; 0xe1a <vfprintf+0x3ae>
     cb0:	80 37       	cpi	r24, 0x70	; 112
     cb2:	19 f0       	breq	.+6      	; 0xcba <vfprintf+0x24e>
     cb4:	88 37       	cpi	r24, 0x78	; 120
     cb6:	21 f0       	breq	.+8      	; 0xcc0 <vfprintf+0x254>
     cb8:	b0 c0       	rjmp	.+352    	; 0xe1a <vfprintf+0x3ae>
     cba:	e9 2f       	mov	r30, r25
     cbc:	e0 61       	ori	r30, 0x10	; 16
     cbe:	be 2e       	mov	r11, r30
     cc0:	b4 fe       	sbrs	r11, 4
     cc2:	0d c0       	rjmp	.+26     	; 0xcde <vfprintf+0x272>
     cc4:	fb 2d       	mov	r31, r11
     cc6:	f4 60       	ori	r31, 0x04	; 4
     cc8:	bf 2e       	mov	r11, r31
     cca:	09 c0       	rjmp	.+18     	; 0xcde <vfprintf+0x272>
     ccc:	34 fe       	sbrs	r3, 4
     cce:	0a c0       	rjmp	.+20     	; 0xce4 <vfprintf+0x278>
     cd0:	29 2f       	mov	r18, r25
     cd2:	26 60       	ori	r18, 0x06	; 6
     cd4:	b2 2e       	mov	r11, r18
     cd6:	06 c0       	rjmp	.+12     	; 0xce4 <vfprintf+0x278>
     cd8:	28 e0       	ldi	r18, 0x08	; 8
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	05 c0       	rjmp	.+10     	; 0xce8 <vfprintf+0x27c>
     cde:	20 e1       	ldi	r18, 0x10	; 16
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	02 c0       	rjmp	.+4      	; 0xce8 <vfprintf+0x27c>
     ce4:	20 e1       	ldi	r18, 0x10	; 16
     ce6:	32 e0       	ldi	r19, 0x02	; 2
     ce8:	f8 01       	movw	r30, r16
     cea:	b7 fe       	sbrs	r11, 7
     cec:	07 c0       	rjmp	.+14     	; 0xcfc <vfprintf+0x290>
     cee:	60 81       	ld	r22, Z
     cf0:	71 81       	ldd	r23, Z+1	; 0x01
     cf2:	82 81       	ldd	r24, Z+2	; 0x02
     cf4:	93 81       	ldd	r25, Z+3	; 0x03
     cf6:	0c 5f       	subi	r16, 0xFC	; 252
     cf8:	1f 4f       	sbci	r17, 0xFF	; 255
     cfa:	06 c0       	rjmp	.+12     	; 0xd08 <vfprintf+0x29c>
     cfc:	60 81       	ld	r22, Z
     cfe:	71 81       	ldd	r23, Z+1	; 0x01
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	0e 5f       	subi	r16, 0xFE	; 254
     d06:	1f 4f       	sbci	r17, 0xFF	; 255
     d08:	a3 01       	movw	r20, r6
     d0a:	0e 94 69 07 	call	0xed2	; 0xed2 <__ultoa_invert>
     d0e:	88 2e       	mov	r8, r24
     d10:	86 18       	sub	r8, r6
     d12:	fb 2d       	mov	r31, r11
     d14:	ff 77       	andi	r31, 0x7F	; 127
     d16:	3f 2e       	mov	r3, r31
     d18:	36 fe       	sbrs	r3, 6
     d1a:	0d c0       	rjmp	.+26     	; 0xd36 <vfprintf+0x2ca>
     d1c:	23 2d       	mov	r18, r3
     d1e:	2e 7f       	andi	r18, 0xFE	; 254
     d20:	a2 2e       	mov	r10, r18
     d22:	89 14       	cp	r8, r9
     d24:	58 f4       	brcc	.+22     	; 0xd3c <vfprintf+0x2d0>
     d26:	34 fe       	sbrs	r3, 4
     d28:	0b c0       	rjmp	.+22     	; 0xd40 <vfprintf+0x2d4>
     d2a:	32 fc       	sbrc	r3, 2
     d2c:	09 c0       	rjmp	.+18     	; 0xd40 <vfprintf+0x2d4>
     d2e:	83 2d       	mov	r24, r3
     d30:	8e 7e       	andi	r24, 0xEE	; 238
     d32:	a8 2e       	mov	r10, r24
     d34:	05 c0       	rjmp	.+10     	; 0xd40 <vfprintf+0x2d4>
     d36:	b8 2c       	mov	r11, r8
     d38:	a3 2c       	mov	r10, r3
     d3a:	03 c0       	rjmp	.+6      	; 0xd42 <vfprintf+0x2d6>
     d3c:	b8 2c       	mov	r11, r8
     d3e:	01 c0       	rjmp	.+2      	; 0xd42 <vfprintf+0x2d6>
     d40:	b9 2c       	mov	r11, r9
     d42:	a4 fe       	sbrs	r10, 4
     d44:	0f c0       	rjmp	.+30     	; 0xd64 <vfprintf+0x2f8>
     d46:	fe 01       	movw	r30, r28
     d48:	e8 0d       	add	r30, r8
     d4a:	f1 1d       	adc	r31, r1
     d4c:	80 81       	ld	r24, Z
     d4e:	80 33       	cpi	r24, 0x30	; 48
     d50:	21 f4       	brne	.+8      	; 0xd5a <vfprintf+0x2ee>
     d52:	9a 2d       	mov	r25, r10
     d54:	99 7e       	andi	r25, 0xE9	; 233
     d56:	a9 2e       	mov	r10, r25
     d58:	09 c0       	rjmp	.+18     	; 0xd6c <vfprintf+0x300>
     d5a:	a2 fe       	sbrs	r10, 2
     d5c:	06 c0       	rjmp	.+12     	; 0xd6a <vfprintf+0x2fe>
     d5e:	b3 94       	inc	r11
     d60:	b3 94       	inc	r11
     d62:	04 c0       	rjmp	.+8      	; 0xd6c <vfprintf+0x300>
     d64:	8a 2d       	mov	r24, r10
     d66:	86 78       	andi	r24, 0x86	; 134
     d68:	09 f0       	breq	.+2      	; 0xd6c <vfprintf+0x300>
     d6a:	b3 94       	inc	r11
     d6c:	a3 fc       	sbrc	r10, 3
     d6e:	11 c0       	rjmp	.+34     	; 0xd92 <vfprintf+0x326>
     d70:	a0 fe       	sbrs	r10, 0
     d72:	06 c0       	rjmp	.+12     	; 0xd80 <vfprintf+0x314>
     d74:	b2 14       	cp	r11, r2
     d76:	88 f4       	brcc	.+34     	; 0xd9a <vfprintf+0x32e>
     d78:	28 0c       	add	r2, r8
     d7a:	92 2c       	mov	r9, r2
     d7c:	9b 18       	sub	r9, r11
     d7e:	0e c0       	rjmp	.+28     	; 0xd9c <vfprintf+0x330>
     d80:	b2 14       	cp	r11, r2
     d82:	60 f4       	brcc	.+24     	; 0xd9c <vfprintf+0x330>
     d84:	b6 01       	movw	r22, r12
     d86:	80 e2       	ldi	r24, 0x20	; 32
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	0e 94 2d 07 	call	0xe5a	; 0xe5a <fputc>
     d8e:	b3 94       	inc	r11
     d90:	f7 cf       	rjmp	.-18     	; 0xd80 <vfprintf+0x314>
     d92:	b2 14       	cp	r11, r2
     d94:	18 f4       	brcc	.+6      	; 0xd9c <vfprintf+0x330>
     d96:	2b 18       	sub	r2, r11
     d98:	02 c0       	rjmp	.+4      	; 0xd9e <vfprintf+0x332>
     d9a:	98 2c       	mov	r9, r8
     d9c:	21 2c       	mov	r2, r1
     d9e:	a4 fe       	sbrs	r10, 4
     da0:	10 c0       	rjmp	.+32     	; 0xdc2 <vfprintf+0x356>
     da2:	b6 01       	movw	r22, r12
     da4:	80 e3       	ldi	r24, 0x30	; 48
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	0e 94 2d 07 	call	0xe5a	; 0xe5a <fputc>
     dac:	a2 fe       	sbrs	r10, 2
     dae:	17 c0       	rjmp	.+46     	; 0xdde <vfprintf+0x372>
     db0:	a1 fc       	sbrc	r10, 1
     db2:	03 c0       	rjmp	.+6      	; 0xdba <vfprintf+0x34e>
     db4:	88 e7       	ldi	r24, 0x78	; 120
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	02 c0       	rjmp	.+4      	; 0xdbe <vfprintf+0x352>
     dba:	88 e5       	ldi	r24, 0x58	; 88
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	b6 01       	movw	r22, r12
     dc0:	0c c0       	rjmp	.+24     	; 0xdda <vfprintf+0x36e>
     dc2:	8a 2d       	mov	r24, r10
     dc4:	86 78       	andi	r24, 0x86	; 134
     dc6:	59 f0       	breq	.+22     	; 0xdde <vfprintf+0x372>
     dc8:	a1 fe       	sbrs	r10, 1
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <vfprintf+0x364>
     dcc:	8b e2       	ldi	r24, 0x2B	; 43
     dce:	01 c0       	rjmp	.+2      	; 0xdd2 <vfprintf+0x366>
     dd0:	80 e2       	ldi	r24, 0x20	; 32
     dd2:	a7 fc       	sbrc	r10, 7
     dd4:	8d e2       	ldi	r24, 0x2D	; 45
     dd6:	b6 01       	movw	r22, r12
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	0e 94 2d 07 	call	0xe5a	; 0xe5a <fputc>
     dde:	89 14       	cp	r8, r9
     de0:	38 f4       	brcc	.+14     	; 0xdf0 <vfprintf+0x384>
     de2:	b6 01       	movw	r22, r12
     de4:	80 e3       	ldi	r24, 0x30	; 48
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	0e 94 2d 07 	call	0xe5a	; 0xe5a <fputc>
     dec:	9a 94       	dec	r9
     dee:	f7 cf       	rjmp	.-18     	; 0xdde <vfprintf+0x372>
     df0:	8a 94       	dec	r8
     df2:	f3 01       	movw	r30, r6
     df4:	e8 0d       	add	r30, r8
     df6:	f1 1d       	adc	r31, r1
     df8:	80 81       	ld	r24, Z
     dfa:	b6 01       	movw	r22, r12
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	0e 94 2d 07 	call	0xe5a	; 0xe5a <fputc>
     e02:	81 10       	cpse	r8, r1
     e04:	f5 cf       	rjmp	.-22     	; 0xdf0 <vfprintf+0x384>
     e06:	22 20       	and	r2, r2
     e08:	09 f4       	brne	.+2      	; 0xe0c <vfprintf+0x3a0>
     e0a:	42 ce       	rjmp	.-892    	; 0xa90 <vfprintf+0x24>
     e0c:	b6 01       	movw	r22, r12
     e0e:	80 e2       	ldi	r24, 0x20	; 32
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	0e 94 2d 07 	call	0xe5a	; 0xe5a <fputc>
     e16:	2a 94       	dec	r2
     e18:	f6 cf       	rjmp	.-20     	; 0xe06 <vfprintf+0x39a>
     e1a:	f6 01       	movw	r30, r12
     e1c:	86 81       	ldd	r24, Z+6	; 0x06
     e1e:	97 81       	ldd	r25, Z+7	; 0x07
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <vfprintf+0x3ba>
     e22:	8f ef       	ldi	r24, 0xFF	; 255
     e24:	9f ef       	ldi	r25, 0xFF	; 255
     e26:	2b 96       	adiw	r28, 0x0b	; 11
     e28:	e2 e1       	ldi	r30, 0x12	; 18
     e2a:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__epilogue_restores__>

00000e2e <strnlen_P>:
     e2e:	fc 01       	movw	r30, r24
     e30:	05 90       	lpm	r0, Z+
     e32:	61 50       	subi	r22, 0x01	; 1
     e34:	70 40       	sbci	r23, 0x00	; 0
     e36:	01 10       	cpse	r0, r1
     e38:	d8 f7       	brcc	.-10     	; 0xe30 <strnlen_P+0x2>
     e3a:	80 95       	com	r24
     e3c:	90 95       	com	r25
     e3e:	8e 0f       	add	r24, r30
     e40:	9f 1f       	adc	r25, r31
     e42:	08 95       	ret

00000e44 <strnlen>:
     e44:	fc 01       	movw	r30, r24
     e46:	61 50       	subi	r22, 0x01	; 1
     e48:	70 40       	sbci	r23, 0x00	; 0
     e4a:	01 90       	ld	r0, Z+
     e4c:	01 10       	cpse	r0, r1
     e4e:	d8 f7       	brcc	.-10     	; 0xe46 <strnlen+0x2>
     e50:	80 95       	com	r24
     e52:	90 95       	com	r25
     e54:	8e 0f       	add	r24, r30
     e56:	9f 1f       	adc	r25, r31
     e58:	08 95       	ret

00000e5a <fputc>:
     e5a:	0f 93       	push	r16
     e5c:	1f 93       	push	r17
     e5e:	cf 93       	push	r28
     e60:	df 93       	push	r29
     e62:	fb 01       	movw	r30, r22
     e64:	23 81       	ldd	r18, Z+3	; 0x03
     e66:	21 fd       	sbrc	r18, 1
     e68:	03 c0       	rjmp	.+6      	; 0xe70 <fputc+0x16>
     e6a:	8f ef       	ldi	r24, 0xFF	; 255
     e6c:	9f ef       	ldi	r25, 0xFF	; 255
     e6e:	2c c0       	rjmp	.+88     	; 0xec8 <fputc+0x6e>
     e70:	22 ff       	sbrs	r18, 2
     e72:	16 c0       	rjmp	.+44     	; 0xea0 <fputc+0x46>
     e74:	46 81       	ldd	r20, Z+6	; 0x06
     e76:	57 81       	ldd	r21, Z+7	; 0x07
     e78:	24 81       	ldd	r18, Z+4	; 0x04
     e7a:	35 81       	ldd	r19, Z+5	; 0x05
     e7c:	42 17       	cp	r20, r18
     e7e:	53 07       	cpc	r21, r19
     e80:	44 f4       	brge	.+16     	; 0xe92 <fputc+0x38>
     e82:	a0 81       	ld	r26, Z
     e84:	b1 81       	ldd	r27, Z+1	; 0x01
     e86:	9d 01       	movw	r18, r26
     e88:	2f 5f       	subi	r18, 0xFF	; 255
     e8a:	3f 4f       	sbci	r19, 0xFF	; 255
     e8c:	20 83       	st	Z, r18
     e8e:	31 83       	std	Z+1, r19	; 0x01
     e90:	8c 93       	st	X, r24
     e92:	26 81       	ldd	r18, Z+6	; 0x06
     e94:	37 81       	ldd	r19, Z+7	; 0x07
     e96:	2f 5f       	subi	r18, 0xFF	; 255
     e98:	3f 4f       	sbci	r19, 0xFF	; 255
     e9a:	26 83       	std	Z+6, r18	; 0x06
     e9c:	37 83       	std	Z+7, r19	; 0x07
     e9e:	14 c0       	rjmp	.+40     	; 0xec8 <fputc+0x6e>
     ea0:	8b 01       	movw	r16, r22
     ea2:	ec 01       	movw	r28, r24
     ea4:	fb 01       	movw	r30, r22
     ea6:	00 84       	ldd	r0, Z+8	; 0x08
     ea8:	f1 85       	ldd	r31, Z+9	; 0x09
     eaa:	e0 2d       	mov	r30, r0
     eac:	09 95       	icall
     eae:	89 2b       	or	r24, r25
     eb0:	e1 f6       	brne	.-72     	; 0xe6a <fputc+0x10>
     eb2:	d8 01       	movw	r26, r16
     eb4:	16 96       	adiw	r26, 0x06	; 6
     eb6:	8d 91       	ld	r24, X+
     eb8:	9c 91       	ld	r25, X
     eba:	17 97       	sbiw	r26, 0x07	; 7
     ebc:	01 96       	adiw	r24, 0x01	; 1
     ebe:	16 96       	adiw	r26, 0x06	; 6
     ec0:	8d 93       	st	X+, r24
     ec2:	9c 93       	st	X, r25
     ec4:	17 97       	sbiw	r26, 0x07	; 7
     ec6:	ce 01       	movw	r24, r28
     ec8:	df 91       	pop	r29
     eca:	cf 91       	pop	r28
     ecc:	1f 91       	pop	r17
     ece:	0f 91       	pop	r16
     ed0:	08 95       	ret

00000ed2 <__ultoa_invert>:
     ed2:	fa 01       	movw	r30, r20
     ed4:	aa 27       	eor	r26, r26
     ed6:	28 30       	cpi	r18, 0x08	; 8
     ed8:	51 f1       	breq	.+84     	; 0xf2e <__ultoa_invert+0x5c>
     eda:	20 31       	cpi	r18, 0x10	; 16
     edc:	81 f1       	breq	.+96     	; 0xf3e <__ultoa_invert+0x6c>
     ede:	e8 94       	clt
     ee0:	6f 93       	push	r22
     ee2:	6e 7f       	andi	r22, 0xFE	; 254
     ee4:	6e 5f       	subi	r22, 0xFE	; 254
     ee6:	7f 4f       	sbci	r23, 0xFF	; 255
     ee8:	8f 4f       	sbci	r24, 0xFF	; 255
     eea:	9f 4f       	sbci	r25, 0xFF	; 255
     eec:	af 4f       	sbci	r26, 0xFF	; 255
     eee:	b1 e0       	ldi	r27, 0x01	; 1
     ef0:	3e d0       	rcall	.+124    	; 0xf6e <__ultoa_invert+0x9c>
     ef2:	b4 e0       	ldi	r27, 0x04	; 4
     ef4:	3c d0       	rcall	.+120    	; 0xf6e <__ultoa_invert+0x9c>
     ef6:	67 0f       	add	r22, r23
     ef8:	78 1f       	adc	r23, r24
     efa:	89 1f       	adc	r24, r25
     efc:	9a 1f       	adc	r25, r26
     efe:	a1 1d       	adc	r26, r1
     f00:	68 0f       	add	r22, r24
     f02:	79 1f       	adc	r23, r25
     f04:	8a 1f       	adc	r24, r26
     f06:	91 1d       	adc	r25, r1
     f08:	a1 1d       	adc	r26, r1
     f0a:	6a 0f       	add	r22, r26
     f0c:	71 1d       	adc	r23, r1
     f0e:	81 1d       	adc	r24, r1
     f10:	91 1d       	adc	r25, r1
     f12:	a1 1d       	adc	r26, r1
     f14:	20 d0       	rcall	.+64     	; 0xf56 <__ultoa_invert+0x84>
     f16:	09 f4       	brne	.+2      	; 0xf1a <__ultoa_invert+0x48>
     f18:	68 94       	set
     f1a:	3f 91       	pop	r19
     f1c:	2a e0       	ldi	r18, 0x0A	; 10
     f1e:	26 9f       	mul	r18, r22
     f20:	11 24       	eor	r1, r1
     f22:	30 19       	sub	r19, r0
     f24:	30 5d       	subi	r19, 0xD0	; 208
     f26:	31 93       	st	Z+, r19
     f28:	de f6       	brtc	.-74     	; 0xee0 <__ultoa_invert+0xe>
     f2a:	cf 01       	movw	r24, r30
     f2c:	08 95       	ret
     f2e:	46 2f       	mov	r20, r22
     f30:	47 70       	andi	r20, 0x07	; 7
     f32:	40 5d       	subi	r20, 0xD0	; 208
     f34:	41 93       	st	Z+, r20
     f36:	b3 e0       	ldi	r27, 0x03	; 3
     f38:	0f d0       	rcall	.+30     	; 0xf58 <__ultoa_invert+0x86>
     f3a:	c9 f7       	brne	.-14     	; 0xf2e <__ultoa_invert+0x5c>
     f3c:	f6 cf       	rjmp	.-20     	; 0xf2a <__ultoa_invert+0x58>
     f3e:	46 2f       	mov	r20, r22
     f40:	4f 70       	andi	r20, 0x0F	; 15
     f42:	40 5d       	subi	r20, 0xD0	; 208
     f44:	4a 33       	cpi	r20, 0x3A	; 58
     f46:	18 f0       	brcs	.+6      	; 0xf4e <__ultoa_invert+0x7c>
     f48:	49 5d       	subi	r20, 0xD9	; 217
     f4a:	31 fd       	sbrc	r19, 1
     f4c:	40 52       	subi	r20, 0x20	; 32
     f4e:	41 93       	st	Z+, r20
     f50:	02 d0       	rcall	.+4      	; 0xf56 <__ultoa_invert+0x84>
     f52:	a9 f7       	brne	.-22     	; 0xf3e <__ultoa_invert+0x6c>
     f54:	ea cf       	rjmp	.-44     	; 0xf2a <__ultoa_invert+0x58>
     f56:	b4 e0       	ldi	r27, 0x04	; 4
     f58:	a6 95       	lsr	r26
     f5a:	97 95       	ror	r25
     f5c:	87 95       	ror	r24
     f5e:	77 95       	ror	r23
     f60:	67 95       	ror	r22
     f62:	ba 95       	dec	r27
     f64:	c9 f7       	brne	.-14     	; 0xf58 <__ultoa_invert+0x86>
     f66:	00 97       	sbiw	r24, 0x00	; 0
     f68:	61 05       	cpc	r22, r1
     f6a:	71 05       	cpc	r23, r1
     f6c:	08 95       	ret
     f6e:	9b 01       	movw	r18, r22
     f70:	ac 01       	movw	r20, r24
     f72:	0a 2e       	mov	r0, r26
     f74:	06 94       	lsr	r0
     f76:	57 95       	ror	r21
     f78:	47 95       	ror	r20
     f7a:	37 95       	ror	r19
     f7c:	27 95       	ror	r18
     f7e:	ba 95       	dec	r27
     f80:	c9 f7       	brne	.-14     	; 0xf74 <__ultoa_invert+0xa2>
     f82:	62 0f       	add	r22, r18
     f84:	73 1f       	adc	r23, r19
     f86:	84 1f       	adc	r24, r20
     f88:	95 1f       	adc	r25, r21
     f8a:	a0 1d       	adc	r26, r0
     f8c:	08 95       	ret

00000f8e <ccp_write_io>:
     f8e:	dc 01       	movw	r26, r24
     f90:	28 ed       	ldi	r18, 0xD8	; 216
     f92:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x7f4034>
     f96:	6c 93       	st	X, r22
     f98:	08 95       	ret

00000f9a <__prologue_saves__>:
     f9a:	2f 92       	push	r2
     f9c:	3f 92       	push	r3
     f9e:	4f 92       	push	r4
     fa0:	5f 92       	push	r5
     fa2:	6f 92       	push	r6
     fa4:	7f 92       	push	r7
     fa6:	8f 92       	push	r8
     fa8:	9f 92       	push	r9
     faa:	af 92       	push	r10
     fac:	bf 92       	push	r11
     fae:	cf 92       	push	r12
     fb0:	df 92       	push	r13
     fb2:	ef 92       	push	r14
     fb4:	ff 92       	push	r15
     fb6:	0f 93       	push	r16
     fb8:	1f 93       	push	r17
     fba:	cf 93       	push	r28
     fbc:	df 93       	push	r29
     fbe:	cd b7       	in	r28, 0x3d	; 61
     fc0:	de b7       	in	r29, 0x3e	; 62
     fc2:	ca 1b       	sub	r28, r26
     fc4:	db 0b       	sbc	r29, r27
     fc6:	cd bf       	out	0x3d, r28	; 61
     fc8:	de bf       	out	0x3e, r29	; 62
     fca:	09 94       	ijmp

00000fcc <__epilogue_restores__>:
     fcc:	2a 88       	ldd	r2, Y+18	; 0x12
     fce:	39 88       	ldd	r3, Y+17	; 0x11
     fd0:	48 88       	ldd	r4, Y+16	; 0x10
     fd2:	5f 84       	ldd	r5, Y+15	; 0x0f
     fd4:	6e 84       	ldd	r6, Y+14	; 0x0e
     fd6:	7d 84       	ldd	r7, Y+13	; 0x0d
     fd8:	8c 84       	ldd	r8, Y+12	; 0x0c
     fda:	9b 84       	ldd	r9, Y+11	; 0x0b
     fdc:	aa 84       	ldd	r10, Y+10	; 0x0a
     fde:	b9 84       	ldd	r11, Y+9	; 0x09
     fe0:	c8 84       	ldd	r12, Y+8	; 0x08
     fe2:	df 80       	ldd	r13, Y+7	; 0x07
     fe4:	ee 80       	ldd	r14, Y+6	; 0x06
     fe6:	fd 80       	ldd	r15, Y+5	; 0x05
     fe8:	0c 81       	ldd	r16, Y+4	; 0x04
     fea:	1b 81       	ldd	r17, Y+3	; 0x03
     fec:	aa 81       	ldd	r26, Y+2	; 0x02
     fee:	b9 81       	ldd	r27, Y+1	; 0x01
     ff0:	ce 0f       	add	r28, r30
     ff2:	d1 1d       	adc	r29, r1
     ff4:	cd bf       	out	0x3d, r28	; 61
     ff6:	de bf       	out	0x3e, r29	; 62
     ff8:	ed 01       	movw	r28, r26
     ffa:	08 95       	ret

00000ffc <_exit>:
     ffc:	f8 94       	cli

00000ffe <__stop_program>:
     ffe:	ff cf       	rjmp	.-2      	; 0xffe <__stop_program>
